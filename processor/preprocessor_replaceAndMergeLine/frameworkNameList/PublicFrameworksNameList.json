{
  "vecLib.framework": {
    "frameworkName": "vecLib.framework",
    "classes": {}
  },
  "NotificationCenter.framework": {
    "frameworkName": "NotificationCenter.framework",
    "classes": {
      "UIVibrancyEffect": {
        "className": "UIVibrancyEffect",
        "methodNames": [
          "notificationCenterVibrancyEffect"
        ]
      },
      "NCWidgetController": {
        "className": "NCWidgetController",
        "methodNames": [
          "setHasContent_forWidgetWithBundleIdentifier_",
          "widgetController"
        ]
      }
    }
  },
  "vImage.framework": {
    "frameworkName": "vImage.framework",
    "classes": {}
  },
  "AudioUnit.framework": {
    "frameworkName": "AudioUnit.framework",
    "classes": {
      "AUAudioUnitBus": {
        "className": "AUAudioUnitBus",
        "methodNames": [
          "initWithFormat_error_",
          "setFormat_error_"
        ]
      },
      "AUParameter": {
        "className": "AUParameter",
        "methodNames": [
          "setValue_originator_",
          "valueFromString_",
          "stringFromValue_",
          "setValue_originator_atHostTime_"
        ]
      },
      "AUAudioUnitBusArray": {
        "className": "AUAudioUnitBusArray",
        "methodNames": [
          "initWithAudioUnit_busType_busses_",
          "init",
          "objectAtIndexedSubscript_",
          "setBusCount_error_",
          "addObserverToAllBusses_forKeyPath_options_context_",
          "replaceBusses_",
          "initWithAudioUnit_busType_",
          "removeObserverFromAllBusses_forKeyPath_context_"
        ]
      },
      "AUAudioUnit": {
        "className": "AUAudioUnit",
        "methodNames": [
          "init",
          "instantiateWithComponentDescription_options_completionHandler_",
          "stopHardware",
          "initWithComponentDescription_error_",
          "registerSubclass_asComponentDescription_name_version_",
          "parametersForOverviewWithCount_",
          "tokenByAddingRenderObserver_",
          "startHardwareAndReturnError_",
          "deallocateRenderResources",
          "shouldChangeToFormat_forBus_",
          "setRenderResourcesAllocated_",
          "initWithComponentDescription_options_error_",
          "allocateRenderResourcesAndReturnError_",
          "removeRenderObserver_",
          "setDeviceID_error_",
          "reset"
        ]
      },
      "AUParameterTree": {
        "className": "AUParameterTree",
        "methodNames": [
          "createGroupWithIdentifier_name_children_",
          "createGroupTemplate_",
          "createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_",
          "createTreeWithChildren_",
          "parameterWithAddress_",
          "parameterWithID_scope_element_",
          "createGroupFromTemplate_identifier_name_addressOffset_"
        ]
      },
      "AUAudioUnitV2Bridge": {
        "className": "AUAudioUnitV2Bridge",
        "methodNames": []
      },
      "AUParameterGroup": {
        "className": "AUParameterGroup",
        "methodNames": []
      },
      "AUAudioUnitPreset": {
        "className": "AUAudioUnitPreset",
        "methodNames": []
      },
      "AUParameterNode": {
        "className": "AUParameterNode",
        "methodNames": [
          "removeParameterObserver_",
          "tokenByAddingParameterRecordingObserver_",
          "displayNameWithLength_",
          "tokenByAddingParameterObserver_"
        ]
      }
    }
  },
  "CoreData.framework": {
    "frameworkName": "CoreData.framework",
    "classes": {
      "NSAttributeDescription": {
        "className": "NSAttributeDescription",
        "methodNames": []
      },
      "NSFetchedPropertyDescription": {
        "className": "NSFetchedPropertyDescription",
        "methodNames": []
      },
      "NSFetchRequest": {
        "className": "NSFetchRequest",
        "methodNames": [
          "init",
          "initWithEntityName_",
          "fetchRequestWithEntityName_"
        ]
      },
      "NSAtomicStoreCacheNode": {
        "className": "NSAtomicStoreCacheNode",
        "methodNames": [
          "valueForKey_",
          "initWithObjectID_",
          "setValue_forKey_"
        ]
      },
      "NSBatchUpdateRequest": {
        "className": "NSBatchUpdateRequest",
        "methodNames": [
          "initWithEntityName_",
          "initWithEntity_",
          "batchUpdateRequestWithEntityName_"
        ]
      },
      "NSManagedObjectModel": {
        "className": "NSManagedObjectModel",
        "methodNames": [
          "init",
          "modelByMergingModels_",
          "entitiesForConfiguration_",
          "mergedModelFromBundles_forStoreMetadata_",
          "initWithContentsOfURL_",
          "isConfiguration_compatibleWithStoreMetadata_",
          "fetchRequestTemplateForName_",
          "fetchRequestFromTemplateWithName_substitutionVariables_",
          "mergedModelFromBundles_",
          "modelByMergingModels_forStoreMetadata_",
          "setEntities_forConfiguration_",
          "setFetchRequestTemplate_forName_"
        ]
      },
      "NSMergePolicy": {
        "className": "NSMergePolicy",
        "methodNames": []
      },
      "NSMergeConflict": {
        "className": "NSMergeConflict",
        "methodNames": []
      },
      "NSRelationshipDescription": {
        "className": "NSRelationshipDescription",
        "methodNames": []
      },
      "NSEntityDescription": {
        "className": "NSEntityDescription",
        "methodNames": [
          "entityForName_inManagedObjectContext_"
        ]
      },
      "NSMappingModel": {
        "className": "NSMappingModel",
        "methodNames": [
          "mappingModelFromBundles_forSourceModel_destinationModel_",
          "initWithContentsOfURL_",
          "inferredMappingModelForSourceModel_destinationModel_error_"
        ]
      },
      "NSPersistentStore": {
        "className": "NSPersistentStore",
        "methodNames": [
          "metadataForPersistentStoreWithURL_error_"
        ]
      },
      "NSBatchDeleteResult": {
        "className": "NSBatchDeleteResult",
        "methodNames": []
      },
      "NSPersistentStoreCoordinator": {
        "className": "NSPersistentStoreCoordinator",
        "methodNames": [
          "initWithManagedObjectModel_"
        ]
      },
      "NSExpressionDescription": {
        "className": "NSExpressionDescription",
        "methodNames": []
      },
      "NSSaveChangesRequest": {
        "className": "NSSaveChangesRequest",
        "methodNames": [
          "initWithInsertedObjects_updatedObjects_deletedObjects_lockedObjects_"
        ]
      },
      "NSEntityMapping": {
        "className": "NSEntityMapping",
        "methodNames": []
      },
      "NSPropertyMapping": {
        "className": "NSPropertyMapping",
        "methodNames": []
      },
      "NSConstraintConflict": {
        "className": "NSConstraintConflict",
        "methodNames": [
          "initWithConstraint_databaseObject_databaseSnapshot_conflictingObjects_conflictingSnapshots_"
        ]
      },
      "NSPersistentStoreResult": {
        "className": "NSPersistentStoreResult",
        "methodNames": []
      },
      "NSFetchRequestExpression": {
        "className": "NSFetchRequestExpression",
        "methodNames": [
          "expressionForFetch_context_countOnly_"
        ]
      },
      "NSMigrationManager": {
        "className": "NSMigrationManager",
        "methodNames": [
          "initWithSourceModel_destinationModel_"
        ]
      },
      "NSIncrementalStoreNode": {
        "className": "NSIncrementalStoreNode",
        "methodNames": [
          "initWithObjectID_withValues_version_",
          "valueForPropertyDescription_",
          "updateWithValues_version_"
        ]
      },
      "NSBatchDeleteRequest": {
        "className": "NSBatchDeleteRequest",
        "methodNames": [
          "init",
          "initWithFetchRequest_",
          "initWithObjectIDs_"
        ]
      },
      "NSEntityMigrationPolicy": {
        "className": "NSEntityMigrationPolicy",
        "methodNames": [
          "endEntityMapping_manager_error_",
          "endInstanceCreationForEntityMapping_manager_error_",
          "endRelationshipCreationForEntityMapping_manager_error_",
          "createDestinationInstancesForSourceInstance_entityMapping_manager_error_",
          "createRelationshipsForDestinationInstance_entityMapping_manager_error_",
          "beginEntityMapping_manager_error_",
          "performCustomValidationForEntityMapping_manager_error_"
        ]
      },
      "NSPersistentStoreRequest": {
        "className": "NSPersistentStoreRequest",
        "methodNames": []
      },
      "NSPropertyDescription": {
        "className": "NSPropertyDescription",
        "methodNames": [
          "setValidationPredicates_withValidationWarnings_"
        ]
      },
      "NSPersistentStoreAsynchronousResult": {
        "className": "NSPersistentStoreAsynchronousResult",
        "methodNames": [
          "cancel"
        ]
      },
      "NSAsynchronousFetchResult": {
        "className": "NSAsynchronousFetchResult",
        "methodNames": []
      },
      "NSManagedObject": {
        "className": "NSManagedObject",
        "methodNames": [
          "awakeFromFetch",
          "awakeFromInsert",
          "contextShouldIgnoreUnmodeledPropertyChanges",
          "validateForUpdate_",
          "didChangeValueForKey_withSetMutation_usingObjects_",
          "validateForDelete_",
          "changedValues",
          "willSave",
          "initWithEntity_insertIntoManagedObjectContext_",
          "didChangeValueForKey_",
          "didSave",
          "awakeFromSnapshotEvents_",
          "didTurnIntoFault",
          "objectIDsForRelationshipNamed_",
          "hasFaultForRelationshipNamed_",
          "didAccessValueForKey_",
          "setValue_forKey_",
          "willChangeValueForKey_withSetMutation_usingObjects_",
          "valueForKey_",
          "validateValue_forKey_error_",
          "setPrimitiveValue_forKey_",
          "willChangeValueForKey_",
          "willTurnIntoFault",
          "willAccessValueForKey_",
          "prepareForDeletion",
          "changedValuesForCurrentEvent",
          "primitiveValueForKey_",
          "committedValuesForKeys_",
          "validateForInsert_"
        ]
      },
      "NSBatchUpdateResult": {
        "className": "NSBatchUpdateResult",
        "methodNames": []
      },
      "NSFetchedResultsController": {
        "className": "NSFetchedResultsController",
        "methodNames": [
          "initWithFetchRequest_managedObjectContext_sectionNameKeyPath_cacheName_"
        ]
      },
      "NSManagedObjectContext": {
        "className": "NSManagedObjectContext",
        "methodNames": [
          "new"
        ]
      },
      "NSAsynchronousFetchRequest": {
        "className": "NSAsynchronousFetchRequest",
        "methodNames": [
          "initWithFetchRequest_completionBlock_"
        ]
      },
      "NSManagedObjectID": {
        "className": "NSManagedObjectID",
        "methodNames": [
          "URIRepresentation"
        ]
      },
      "NSAtomicStore": {
        "className": "NSAtomicStore",
        "methodNames": [
          "initWithPersistentStoreCoordinator_configurationName_URL_options_"
        ]
      },
      "NSIncrementalStore": {
        "className": "NSIncrementalStore",
        "methodNames": [
          "executeRequest_withContext_error_",
          "newValuesForObjectWithID_withContext_error_",
          "managedObjectContextDidRegisterObjectsWithIDs_",
          "managedObjectContextDidUnregisterObjectsWithIDs_",
          "referenceObjectForObjectID_",
          "loadMetadata_",
          "obtainPermanentIDsForObjects_error_",
          "identifierForNewStoreAtURL_",
          "newValueForRelationship_forObjectWithID_withContext_error_",
          "newObjectIDForEntity_referenceObject_"
        ]
      }
    }
  },
  "CFNetwork.framework": {
    "frameworkName": "CFNetwork.framework",
    "classes": {}
  },
  "GameplayKit.framework": {
    "frameworkName": "GameplayKit.framework",
    "classes": {
      "GKGraphNode": {
        "className": "GKGraphNode",
        "methodNames": []
      },
      "GKMinmaxStrategist": {
        "className": "GKMinmaxStrategist",
        "methodNames": [
          "randomMoveForPlayer_fromNumberOfBestMoves_",
          "bestMoveForPlayer_"
        ]
      },
      "GKObstacle": {
        "className": "GKObstacle",
        "methodNames": []
      },
      "GKBehavior": {
        "className": "GKBehavior",
        "methodNames": [
          "removeAllGoals",
          "removeGoal_",
          "objectForKeyedSubscript_",
          "behaviorWithGoal_weight_",
          "behaviorWithGoals_",
          "weightForGoal_",
          "behaviorWithGoals_andWeights_",
          "behaviorWithWeightedGoals_",
          "objectAtIndexedSubscript_",
          "setWeight_forGoal_",
          "setObject_forKeyedSubscript_"
        ]
      },
      "GKGridGraph": {
        "className": "GKGridGraph",
        "methodNames": [
          "graphFromGridStartingAt_width_height_diagonalsAllowed_",
          "initFromGridStartingAt_width_height_diagonalsAllowed_",
          "connectNodeToAdjacentNodes_",
          "nodeAtGridPosition_"
        ]
      },
      "GKPath": {
        "className": "GKPath",
        "methodNames": [
          "pathWithGraphNodes_radius_",
          "initWithGraphNodes_radius_",
          "initWithPoints_count_radius_cyclical_",
          "pointAtIndex_",
          "pathWithPoints_count_radius_cyclical_"
        ]
      },
      "GKMersenneTwisterRandomSource": {
        "className": "GKMersenneTwisterRandomSource",
        "methodNames": [
          "init",
          "initWithSeed_"
        ]
      },
      "GKComponent": {
        "className": "GKComponent",
        "methodNames": [
          "updateWithDeltaTime_"
        ]
      },
      "GKStateMachine": {
        "className": "GKStateMachine",
        "methodNames": []
      },
      "GKEntity": {
        "className": "GKEntity",
        "methodNames": [
          "entity"
        ]
      },
      "GKShuffledDistribution": {
        "className": "GKShuffledDistribution",
        "methodNames": []
      },
      "GKState": {
        "className": "GKState",
        "methodNames": [
          "willExitWithNextState_",
          "init",
          "didEnterWithPreviousState_",
          "state",
          "isValidNextState_",
          "updateWithDeltaTime_"
        ]
      },
      "GKLinearCongruentialRandomSource": {
        "className": "GKLinearCongruentialRandomSource",
        "methodNames": [
          "init",
          "initWithSeed_"
        ]
      },
      "GKObstacleGraph": {
        "className": "GKObstacleGraph",
        "methodNames": [
          "initWithObstacles_bufferRadius_",
          "unlockConnectionFromNode_toNode_",
          "removeAllObstacles",
          "lockConnectionFromNode_toNode_",
          "graphWithObstacles_bufferRadius_",
          "connectNodeUsingObstacles_ignoringObstacles_",
          "connectNodeUsingObstacles_ignoringBufferRadiusOfObstacles_",
          "isConnectionLockedFromNode_toNode_",
          "removeObstacles_",
          "nodesForObstacle_",
          "connectNodeUsingObstacles_",
          "addObstacles_"
        ]
      },
      "GKAgent": {
        "className": "GKAgent",
        "methodNames": []
      },
      "GKGraphNode2D": {
        "className": "GKGraphNode2D",
        "methodNames": [
          "nodeWithPoint_",
          "initWithPoint_"
        ]
      },
      "GKRandomSource": {
        "className": "GKRandomSource",
        "methodNames": [
          "init",
          "arrayByShufflingObjectsInArray_",
          "sharedRandom",
          "initWithCoder_"
        ]
      },
      "GKGaussianDistribution": {
        "className": "GKGaussianDistribution",
        "methodNames": [
          "initWithRandomSource_mean_deviation_",
          "initWithRandomSource_lowestValue_highestValue_"
        ]
      },
      "GKRandomDistribution": {
        "className": "GKRandomDistribution",
        "methodNames": [
          "distributionForDieWithSideCount_",
          "nextIntWithUpperBound_",
          "d6",
          "nextBool",
          "d20",
          "distributionWithLowestValue_highestValue_",
          "nextUniform",
          "nextInt",
          "initWithRandomSource_lowestValue_highestValue_"
        ]
      },
      "GKPolygonObstacle": {
        "className": "GKPolygonObstacle",
        "methodNames": [
          "vertexAtIndex_",
          "obstacleWithPoints_count_",
          "initWithPoints_count_"
        ]
      },
      "GKRuleSystem": {
        "className": "GKRuleSystem",
        "methodNames": [
          "gradeForFact_",
          "init",
          "addRule_",
          "assertFact_grade_",
          "maximumGradeForFacts_",
          "minimumGradeForFacts_",
          "removeAllRules",
          "assertFact_",
          "retractFact_",
          "reset",
          "retractFact_grade_",
          "evaluate",
          "addRulesFromArray_"
        ]
      },
      "GKARC4RandomSource": {
        "className": "GKARC4RandomSource",
        "methodNames": [
          "init",
          "dropValuesWithCount_",
          "initWithSeed_"
        ]
      },
      "GKRule": {
        "className": "GKRule",
        "methodNames": [
          "evaluatePredicateWithSystem_",
          "ruleWithBlockPredicate_action_",
          "ruleWithPredicate_assertingFact_grade_",
          "performActionWithSystem_",
          "ruleWithPredicate_retractingFact_grade_"
        ]
      },
      "GKNSPredicateRule": {
        "className": "GKNSPredicateRule",
        "methodNames": [
          "evaluatePredicateWithSystem_",
          "initWithPredicate_"
        ]
      },
      "GKCircleObstacle": {
        "className": "GKCircleObstacle",
        "methodNames": [
          "initWithRadius_",
          "obstacleWithRadius_"
        ]
      },
      "GKGraph": {
        "className": "GKGraph",
        "methodNames": []
      },
      "GKGridGraphNode": {
        "className": "GKGridGraphNode",
        "methodNames": [
          "nodeWithGridPosition_",
          "initWithGridPosition_"
        ]
      },
      "GKAgent2D": {
        "className": "GKAgent2D",
        "methodNames": [
          "updateWithDeltaTime_"
        ]
      },
      "GKGoal": {
        "className": "GKGoal",
        "methodNames": [
          "goalToFollowPath_maxPredictionTime_forward_",
          "goalToFleeAgent_",
          "goalToCohereWithAgents_maxDistance_maxAngle_",
          "goalToAlignWithAgents_maxDistance_maxAngle_",
          "goalToInterceptAgent_maxPredictionTime_",
          "goalToStayOnPath_maxPredictionTime_",
          "goalToReachTargetSpeed_",
          "goalToAvoidObstacles_maxPredictionTime_",
          "goalToSeparateFromAgents_maxDistance_maxAngle_",
          "goalToWander_",
          "goalToSeekAgent_",
          "goalToAvoidAgents_maxPredictionTime_"
        ]
      }
    }
  },
  "ReplayKit.framework": {
    "frameworkName": "ReplayKit.framework",
    "classes": {
      "RPScreenRecorder": {
        "className": "RPScreenRecorder",
        "methodNames": [
          "sharedRecorder"
        ]
      },
      "RPPreviewViewController": {
        "className": "RPPreviewViewController",
        "methodNames": []
      }
    }
  },
  "UIKit.framework": {
    "frameworkName": "UIKit.framework",
    "classes": {
      "UINib": {
        "className": "UINib",
        "methodNames": [
          "nibWithData_bundle_",
          "instantiateWithOwner_options_",
          "nibWithNibName_bundle_"
        ]
      },
      "NSTextStorage": {
        "className": "NSTextStorage",
        "methodNames": [
          "removeLayoutManager_",
          "processEditing",
          "invalidateAttributesInRange_",
          "ensureAttributesAreFixedInRange_",
          "edited_range_changeInLength_",
          "addLayoutManager_"
        ]
      },
      "UICollectionViewCell": {
        "className": "UICollectionViewCell",
        "methodNames": []
      },
      "NSLayoutXAxisAnchor": {
        "className": "NSLayoutXAxisAnchor",
        "methodNames": []
      },
      "UIApplicationShortcutIcon": {
        "className": "UIApplicationShortcutIcon",
        "methodNames": [
          "iconWithTemplateImageName_",
          "iconWithType_"
        ]
      },
      "NSLayoutYAxisAnchor": {
        "className": "NSLayoutYAxisAnchor",
        "methodNames": []
      },
      "UIImage": {
        "className": "UIImage",
        "methodNames": [
          "imageNamed_",
          "stretchableImageWithLeftCapWidth_topCapHeight_"
        ]
      },
      "NSValue": {
        "className": "NSValue",
        "methodNames": [
          "valueWithCGPoint_"
        ]
      },
      "UIMenuController": {
        "className": "UIMenuController",
        "methodNames": [
          "sharedMenuController"
        ]
      },
      "UIPopoverController": {
        "className": "UIPopoverController",
        "methodNames": [
          "initWithContentViewController_"
        ]
      },
      "NSBundle": {
        "className": "NSBundle",
        "methodNames": [
          "loadNibNamed_owner_options_"
        ]
      },
      "UIFocusGuide": {
        "className": "UIFocusGuide",
        "methodNames": []
      },
      "CIColor": {
        "className": "CIColor",
        "methodNames": [
          "initWithColor_"
        ]
      },
      "UICollectionViewLayoutAttributes": {
        "className": "UICollectionViewLayoutAttributes",
        "methodNames": []
      },
      "UICollectionViewTransitionLayout": {
        "className": "UICollectionViewTransitionLayout",
        "methodNames": []
      },
      "UIFont": {
        "className": "UIFont",
        "methodNames": [
          "labelFontSize",
          "preferredFontForTextStyle_"
        ]
      },
      "NSTextTab": {
        "className": "NSTextTab",
        "methodNames": [
          "columnTerminatorsForLocale_",
          "initWithTextAlignment_location_options_"
        ]
      },
      "UIManagedDocument": {
        "className": "UIManagedDocument",
        "methodNames": [
          "persistentStoreTypeForFileType_",
          "readAdditionalContentFromURL_error_",
          "additionalContentForURL_error_",
          "persistentStoreName",
          "writeAdditionalContent_toURL_originalContentsURL_error_",
          "configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error_"
        ]
      },
      "UIFocusUpdateContext": {
        "className": "UIFocusUpdateContext",
        "methodNames": []
      },
      "UICollectionViewFlowLayout": {
        "className": "UICollectionViewFlowLayout",
        "methodNames": []
      },
      "UIInterpolatingMotionEffect": {
        "className": "UIInterpolatingMotionEffect",
        "methodNames": [
          "initWithKeyPath_type_",
          "initWithCoder_"
        ]
      },
      "UIPreviewActionGroup": {
        "className": "UIPreviewActionGroup",
        "methodNames": [
          "actionGroupWithTitle_style_actions_"
        ]
      },
      "UIUserNotificationAction": {
        "className": "UIUserNotificationAction",
        "methodNames": [
          "init"
        ]
      },
      "UIStackView": {
        "className": "UIStackView",
        "methodNames": [
          "initWithArrangedSubviews_"
        ]
      },
      "UITextPosition": {
        "className": "UITextPosition",
        "methodNames": []
      },
      "UIUserNotificationSettings": {
        "className": "UIUserNotificationSettings",
        "methodNames": [
          "settingsForTypes_categories_"
        ]
      },
      "UIStoryboardSegue": {
        "className": "UIStoryboardSegue",
        "methodNames": [
          "segueWithIdentifier_source_destination_performHandler_"
        ]
      },
      "UICollectionViewUpdateItem": {
        "className": "UICollectionViewUpdateItem",
        "methodNames": []
      },
      "UIActivityItemProvider": {
        "className": "UIActivityItemProvider",
        "methodNames": [
          "init",
          "item",
          "initWithPlaceholderItem_"
        ]
      },
      "UITextChecker": {
        "className": "UITextChecker",
        "methodNames": [
          "ignoreWord_",
          "setIgnoredWords_",
          "learnWord_",
          "unlearnWord_",
          "completionsForPartialWordRange_inString_language_",
          "availableLanguages",
          "rangeOfMisspelledWordInString_range_startingAt_wrap_language_",
          "hasLearnedWord_",
          "ignoredWords",
          "guessesForWordRange_inString_language_"
        ]
      },
      "UIButton": {
        "className": "UIButton",
        "methodNames": [
          "buttonWithType_"
        ]
      },
      "UIImageAsset": {
        "className": "UIImageAsset",
        "methodNames": [
          "init",
          "registerImage_withTraitCollection_",
          "unregisterImageWithTraitCollection_",
          "initWithCoder_",
          "imageWithTraitCollection_"
        ]
      },
      "UIPreviewAction": {
        "className": "UIPreviewAction",
        "methodNames": [
          "actionWithTitle_style_handler_"
        ]
      },
      "UIView": {
        "className": "UIView",
        "methodNames": [
          "beginAnimations_context_",
          "drawRect_forViewPrintFormatter_",
          "NSArray",
          "updateConstraintsIfNeeded",
          "endEditing_",
          "animateWithDuration_delay_options_animations_completion_",
          "viewPrintFormatter",
          "animateKeyframesWithDuration_delay_options_animations_completion_",
          "alignmentRectForFrame_",
          "systemLayoutSizeFittingSize_",
          "snapshotViewAfterScreenUpdates_",
          "addMotionEffect_",
          "drawRect_",
          "layerClass"
        ]
      },
      "UIAlertController": {
        "className": "UIAlertController",
        "methodNames": [
          "alertControllerWithTitle_message_preferredStyle_"
        ]
      },
      "UIMutableUserNotificationAction": {
        "className": "UIMutableUserNotificationAction",
        "methodNames": []
      },
      "UITextInputAssistantItem": {
        "className": "UITextInputAssistantItem",
        "methodNames": []
      },
      "UITextRange": {
        "className": "UITextRange",
        "methodNames": []
      },
      "NSLayoutManager": {
        "className": "NSLayoutManager",
        "methodNames": [
          "ensureLayoutForBoundingRect_inTextContainer_",
          "characterIndexForGlyphAtIndex_",
          "rangeOfNominallySpacedGlyphsContainingIndex_",
          "initWithCoder_",
          "removeTextContainerAtIndex_",
          "locationForGlyphAtIndex_",
          "insertTextContainer_atIndex_",
          "characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints_",
          "glyphAtIndex_isValidIndex_",
          "drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin_",
          "notShownAttributeForGlyphAtIndex_",
          "setTextContainer_forGlyphRange_",
          "setLocation_forStartOfGlyphRange_",
          "lineFragmentRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_",
          "strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin_",
          "invalidateLayoutForCharacterRange_actualCharacterRange_",
          "setLineFragmentRect_forGlyphRange_usedRect_",
          "init",
          "fillBackgroundRectArray_count_forCharacterRange_color_",
          "setGlyphs_properties_characterIndexes_font_forGlyphRange_",
          "CGGlyphAtIndex_",
          "lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_",
          "invalidateDisplayForCharacterRange_",
          "invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange_",
          "drawGlyphsForGlyphRange_atPoint_",
          "glyphRangeForCharacterRange_actualCharacterRange_",
          "getGlyphsInRange_glyphs_properties_characterIndexes_bidiLevels_",
          "ensureLayoutForCharacterRange_",
          "glyphIndexForPoint_inTextContainer_",
          "boundingRectForGlyphRange_inTextContainer_",
          "underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin_",
          "setAttachmentSize_forGlyphRange_",
          "drawsOutsideLineFragmentForGlyphAtIndex_",
          "enumerateLineFragmentsForGlyphRange_usingBlock_",
          "showCGGlyphs_positions_count_font_matrix_attributes_inContext_",
          "attachmentSizeForGlyphAtIndex_",
          "textContainerForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_",
          "glyphRangeForBoundingRect_inTextContainer_",
          "ensureLayoutForTextContainer_",
          "ensureLayoutForGlyphRange_",
          "getFirstUnlaidCharacterIndex_glyphIndex_",
          "setNotShownAttribute_forGlyphAtIndex_",
          "lineFragmentRectForGlyphAtIndex_effectiveRange_",
          "getLineFragmentInsertionPointsForCharacterAtIndex_alternatePositions_inDisplayOrder_positions_characterIndexes_",
          "isValidGlyphIndex_",
          "glyphAtIndex_",
          "firstUnlaidCharacterIndex",
          "setDrawsOutsideLineFragment_forGlyphAtIndex_",
          "usedRectForTextContainer_",
          "lineFragmentUsedRectForGlyphAtIndex_effectiveRange_",
          "glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph_",
          "drawBackgroundForGlyphRange_atPoint_",
          "textContainerChangedGeometry_",
          "drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin_",
          "characterRangeForGlyphRange_actualGlyphRange_",
          "processEditingForTextStorage_edited_range_changeInLength_invalidatedRange_",
          "glyphRangeForTextContainer_",
          "setExtraLineFragmentRect_usedRect_textContainer_",
          "propertyForGlyphAtIndex_",
          "addTextContainer_",
          "ensureGlyphsForCharacterRange_",
          "enumerateEnclosingRectsForGlyphRange_withinSelectedGlyphRange_inTextContainer_usingBlock_",
          "CGGlyphAtIndex_isValidIndex_",
          "fractionOfDistanceThroughGlyphForPoint_inTextContainer_",
          "glyphIndexForCharacterAtIndex_",
          "truncatedGlyphRangeInLineFragmentForGlyphAtIndex_",
          "firstUnlaidGlyphIndex",
          "glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer_",
          "textContainerForGlyphAtIndex_effectiveRange_",
          "ensureGlyphsForGlyphRange_",
          "invalidateDisplayForGlyphRange_"
        ]
      },
      "NSLayoutConstraint": {
        "className": "NSLayoutConstraint",
        "methodNames": [
          "NSArray"
        ]
      },
      "UIDatePicker": {
        "className": "UIDatePicker",
        "methodNames": [
          "setDate_animated_"
        ]
      },
      "UIBlurEffect": {
        "className": "UIBlurEffect",
        "methodNames": [
          "effectWithStyle_"
        ]
      },
      "UIFontDescriptor": {
        "className": "UIFontDescriptor",
        "methodNames": [
          "init",
          "matchingFontDescriptorsWithMandatoryKeys_",
          "fontDescriptorWithMatrix_",
          "fontAttributes",
          "fontDescriptorWithSymbolicTraits_",
          "fontDescriptorWithSize_",
          "fontDescriptorWithName_matrix_",
          "initWithCoder_",
          "fontDescriptorWithName_size_",
          "fontDescriptorWithFontAttributes_",
          "preferredFontDescriptorWithTextStyle_",
          "objectForKey_",
          "fontDescriptorWithFamily_",
          "fontDescriptorByAddingAttributes_",
          "initWithFontAttributes_",
          "fontDescriptorWithFace_"
        ]
      },
      "UIRotationGestureRecognizer": {
        "className": "UIRotationGestureRecognizer",
        "methodNames": []
      },
      "UIStoryboardPopoverSegue": {
        "className": "UIStoryboardPopoverSegue",
        "methodNames": []
      },
      "UIMenuItem": {
        "className": "UIMenuItem",
        "methodNames": [
          "initWithTitle_action_"
        ]
      },
      "UIPrintPageRenderer": {
        "className": "UIPrintPageRenderer",
        "methodNames": [
          "printFormattersForPageAtIndex_",
          "addPrintFormatter_startingAtPageAtIndex_",
          "numberOfPages",
          "drawPageAtIndex_inRect_",
          "drawContentForPageAtIndex_inRect_",
          "drawPrintFormatter_forPageAtIndex_",
          "prepareForDrawingPages_",
          "drawFooterForPageAtIndex_inRect_",
          "drawHeaderForPageAtIndex_inRect_"
        ]
      },
      "UITextInputMode": {
        "className": "UITextInputMode",
        "methodNames": []
      },
      "UICollectionReusableView": {
        "className": "UICollectionReusableView",
        "methodNames": []
      },
      "UISnapBehavior": {
        "className": "UISnapBehavior",
        "methodNames": [
          "initWithItem_snapToPoint_"
        ]
      },
      "UIVideoEditorController": {
        "className": "UIVideoEditorController",
        "methodNames": [
          "canEditVideoAtPath_"
        ]
      },
      "UIMarkupTextPrintFormatter": {
        "className": "UIMarkupTextPrintFormatter",
        "methodNames": [
          "initWithMarkupText_"
        ]
      },
      "UIBarButtonItemGroup": {
        "className": "UIBarButtonItemGroup",
        "methodNames": [
          "initWithCoder_",
          "initWithBarButtonItems_representativeItem_"
        ]
      },
      "UISimpleTextPrintFormatter": {
        "className": "UISimpleTextPrintFormatter",
        "methodNames": [
          "initWithText_"
        ]
      },
      "UIWindow": {
        "className": "UIWindow",
        "methodNames": []
      },
      "NSDataAsset": {
        "className": "NSDataAsset",
        "methodNames": [
          "init",
          "initWithName_",
          "initWithName_bundle_"
        ]
      },
      "UIPrinter": {
        "className": "UIPrinter",
        "methodNames": [
          "printerWithURL_",
          "contactPrinter_"
        ]
      },
      "UIReferenceLibraryViewController": {
        "className": "UIReferenceLibraryViewController",
        "methodNames": [
          "dictionaryHasDefinitionForTerm_"
        ]
      },
      "UILexicon": {
        "className": "UILexicon",
        "methodNames": []
      },
      "UISearchDisplayController": {
        "className": "UISearchDisplayController",
        "methodNames": [
          "initWithSearchBar_contentsController_"
        ]
      },
      "UILocalNotification": {
        "className": "UILocalNotification",
        "methodNames": [
          "init"
        ]
      },
      "UITextField": {
        "className": "UITextField",
        "methodNames": []
      },
      "NSAttributedString": {
        "className": "NSAttributedString",
        "methodNames": [
          "dataFromRange_documentAttributes_error_",
          "initWithFileURL_options_documentAttributes_error_",
          "drawInRect_",
          "size",
          "boundingRectWithSize_options_context_",
          "drawAtPoint_",
          "containsAttachmentsInRange_",
          "initWithData_options_documentAttributes_error_",
          "drawWithRect_options_context_",
          "initWithURL_options_documentAttributes_error_",
          "fileWrapperFromRange_documentAttributes_error_",
          "attributedStringWithAttachment_"
        ]
      },
      "UITabBarItem": {
        "className": "UITabBarItem",
        "methodNames": [
          "init"
        ]
      },
      "UITableView": {
        "className": "UITableView",
        "methodNames": [
          "initWithFrame_style_"
        ]
      },
      "UIScreen": {
        "className": "UIScreen",
        "methodNames": [
          "snapshotViewAfterScreenUpdates_",
          "screens"
        ]
      },
      "NSParagraphStyle": {
        "className": "NSParagraphStyle",
        "methodNames": [
          "defaultParagraphStyle",
          "defaultWritingDirectionForLanguage_"
        ]
      },
      "UIFieldBehavior": {
        "className": "UIFieldBehavior",
        "methodNames": [
          "init"
        ]
      },
      "UISwipeGestureRecognizer": {
        "className": "UISwipeGestureRecognizer",
        "methodNames": []
      },
      "UIViewController": {
        "className": "UIViewController",
        "methodNames": [
          "updateViewConstraints",
          "registerForPreviewingWithDelegate_sourceView_",
          "NSArray",
          "editButtonItem",
          "setEditing_animated_",
          "attemptRotationToDeviceOrientation",
          "transitionCoordinator",
          "addKeyCommand_",
          "initWithNibName_bundle_",
          "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers"
        ]
      },
      "UIKeyCommand": {
        "className": "UIKeyCommand",
        "methodNames": [
          "init"
        ]
      },
      "UIUserNotificationCategory": {
        "className": "UIUserNotificationCategory",
        "methodNames": [
          "init",
          "initWithCoder_",
          "actionsForContext_"
        ]
      },
      "UINavigationBar": {
        "className": "UINavigationBar",
        "methodNames": []
      },
      "UIVisualEffectView": {
        "className": "UIVisualEffectView",
        "methodNames": [
          "initWithCoder_",
          "initWithEffect_"
        ]
      },
      "UIResponder": {
        "className": "UIResponder",
        "methodNames": [
          "nextResponder"
        ]
      },
      "UIApplicationShortcutItem": {
        "className": "UIApplicationShortcutItem",
        "methodNames": [
          "init"
        ]
      },
      "UIDocumentPickerViewController": {
        "className": "UIDocumentPickerViewController",
        "methodNames": [
          "initWithURL_inMode_",
          "initWithCoder_",
          "initWithDocumentTypes_inMode_"
        ]
      },
      "NSObject": {
        "className": "NSObject",
        "methodNames": [
          "accessibilityElementCount",
          "cut_",
          "accessibilityElementDidBecomeFocused",
          "awakeFromNib",
          "accessibilityActivate"
        ]
      },
      "UIScreenMode": {
        "className": "UIScreenMode",
        "methodNames": []
      },
      "UIAlertView": {
        "className": "UIAlertView",
        "methodNames": [
          "initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles_"
        ]
      },
      "UIRefreshControl": {
        "className": "UIRefreshControl",
        "methodNames": [
          "init"
        ]
      },
      "NSCoder": {
        "className": "NSCoder",
        "methodNames": [
          "encodeCGPoint_forKey_"
        ]
      },
      "UIActivity": {
        "className": "UIActivity",
        "methodNames": [
          "activityCategory"
        ]
      },
      "UIPrintInteractionController": {
        "className": "UIPrintInteractionController",
        "methodNames": [
          "isPrintingAvailable"
        ]
      },
      "UIDocument": {
        "className": "UIDocument",
        "methodNames": [
          "initWithFileURL_"
        ]
      },
      "UISearchContainerViewController": {
        "className": "UISearchContainerViewController",
        "methodNames": [
          "initWithSearchController_"
        ]
      },
      "UISegmentedControl": {
        "className": "UISegmentedControl",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "UITableViewHeaderFooterView": {
        "className": "UITableViewHeaderFooterView",
        "methodNames": [
          "initWithReuseIdentifier_",
          "initWithCoder_",
          "prepareForReuse"
        ]
      },
      "UIFocusAnimationCoordinator": {
        "className": "UIFocusAnimationCoordinator",
        "methodNames": [
          "addCoordinatedAnimations_completion_"
        ]
      },
      "UIActivityIndicatorView": {
        "className": "UIActivityIndicatorView",
        "methodNames": [
          "initWithActivityIndicatorStyle_"
        ]
      },
      "UITouch": {
        "className": "UITouch",
        "methodNames": []
      },
      "UITableViewFocusUpdateContext": {
        "className": "UITableViewFocusUpdateContext",
        "methodNames": []
      },
      "NSFileProviderExtension": {
        "className": "NSFileProviderExtension",
        "methodNames": [
          "itemChangedAtURL_",
          "persistentIdentifierForItemAtURL_",
          "startProvidingItemAtURL_completionHandler_",
          "providerIdentifier",
          "documentStorageURL",
          "providePlaceholderAtURL_completionHandler_",
          "stopProvidingItemAtURL_",
          "placeholderURLForURL_",
          "writePlaceholderAtURL_withMetadata_error_",
          "URLForItemWithPersistentIdentifier_"
        ]
      },
      "NSTextAttachment": {
        "className": "NSTextAttachment",
        "methodNames": [
          "initWithData_ofType_"
        ]
      },
      "UIAcceleration": {
        "className": "UIAcceleration",
        "methodNames": []
      },
      "UIActivityViewController": {
        "className": "UIActivityViewController",
        "methodNames": [
          "init"
        ]
      },
      "NSMutableParagraphStyle": {
        "className": "NSMutableParagraphStyle",
        "methodNames": [
          "removeTabStop_",
          "setParagraphStyle_",
          "addTabStop_"
        ]
      },
      "UICollisionBehavior": {
        "className": "UICollisionBehavior",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "UIDynamicItemBehavior": {
        "className": "UIDynamicItemBehavior",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "UIWebView": {
        "className": "UIWebView",
        "methodNames": []
      },
      "UISplitViewController": {
        "className": "UISplitViewController",
        "methodNames": []
      },
      "UIDynamicItemGroup": {
        "className": "UIDynamicItemGroup",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "UIBezierPath": {
        "className": "UIBezierPath",
        "methodNames": [
          "bezierPath"
        ]
      },
      "UITapGestureRecognizer": {
        "className": "UITapGestureRecognizer",
        "methodNames": []
      },
      "UIPushBehavior": {
        "className": "UIPushBehavior",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "NSLayoutDimension": {
        "className": "NSLayoutDimension",
        "methodNames": [
          "constraintEqualToConstant_",
          "constraintEqualToAnchor_multiplier_",
          "constraintEqualToAnchor_multiplier_constant_",
          "constraintGreaterThanOrEqualToAnchor_multiplier_constant_",
          "constraintGreaterThanOrEqualToConstant_",
          "constraintLessThanOrEqualToConstant_",
          "constraintLessThanOrEqualToAnchor_multiplier_constant_",
          "constraintGreaterThanOrEqualToAnchor_multiplier_",
          "constraintLessThanOrEqualToAnchor_multiplier_"
        ]
      },
      "UIDictationPhrase": {
        "className": "UIDictationPhrase",
        "methodNames": []
      },
      "NSStringDrawingContext": {
        "className": "NSStringDrawingContext",
        "methodNames": []
      },
      "UIPopoverPresentationController": {
        "className": "UIPopoverPresentationController",
        "methodNames": []
      },
      "UIGestureRecognizer": {
        "className": "UIGestureRecognizer",
        "methodNames": [
          "initWithTarget_action_"
        ]
      },
      "UIVisualEffect": {
        "className": "UIVisualEffect",
        "methodNames": []
      },
      "UIAlertAction": {
        "className": "UIAlertAction",
        "methodNames": [
          "actionWithTitle_style_handler_"
        ]
      },
      "NSIndexPath": {
        "className": "NSIndexPath",
        "methodNames": [
          "indexPathForItem_inSection_",
          "indexPathForRow_inSection_"
        ]
      },
      "UIPresentationController": {
        "className": "UIPresentationController",
        "methodNames": []
      },
      "UICollectionViewLayout": {
        "className": "UICollectionViewLayout",
        "methodNames": [
          "targetIndexPathForInteractivelyMovingItem_withPosition_",
          "init",
          "layoutAttributesClass",
          "prepareForCollectionViewUpdates_"
        ]
      },
      "UISwitch": {
        "className": "UISwitch",
        "methodNames": []
      },
      "UICollectionViewFocusUpdateContext": {
        "className": "UICollectionViewFocusUpdateContext",
        "methodNames": []
      },
      "UIAccessibilityElement": {
        "className": "UIAccessibilityElement",
        "methodNames": [
          "initWithAccessibilityContainer_"
        ]
      },
      "UIApplication": {
        "className": "UIApplication",
        "methodNames": [
          "sharedApplication",
          "registerUserNotificationSettings_",
          "setNewsstandIconImage_",
          "registerForRemoteNotifications",
          "beginReceivingRemoteControlEvents",
          "extendStateRestoration",
          "presentLocalNotificationNow_"
        ]
      },
      "UIPrintFormatter": {
        "className": "UIPrintFormatter",
        "methodNames": []
      },
      "UIDevice": {
        "className": "UIDevice",
        "methodNames": [
          "currentDevice"
        ]
      },
      "UIDynamicAnimator": {
        "className": "UIDynamicAnimator",
        "methodNames": [
          "initWithCollectionViewLayout_",
          "initWithReferenceView_",
          "layoutAttributesForCellAtIndexPath_",
          "layoutAttributesForSupplementaryViewOfKind_atIndexPath_",
          "layoutAttributesForDecorationViewOfKind_atIndexPath_"
        ]
      },
      "UIStoryboardUnwindSegueSource": {
        "className": "UIStoryboardUnwindSegueSource",
        "methodNames": [
          "init"
        ]
      },
      "UIPercentDrivenInteractiveTransition": {
        "className": "UIPercentDrivenInteractiveTransition",
        "methodNames": [
          "finishInteractiveTransition",
          "cancelInteractiveTransition",
          "updateInteractiveTransition_"
        ]
      },
      "UIScrollView": {
        "className": "UIScrollView",
        "methodNames": []
      },
      "UIDocumentMenuViewController": {
        "className": "UIDocumentMenuViewController",
        "methodNames": [
          "initWithURL_inMode_",
          "addOptionWithTitle_image_order_handler_",
          "initWithCoder_",
          "initWithDocumentTypes_inMode_"
        ]
      },
      "UIInputViewController": {
        "className": "UIInputViewController",
        "methodNames": [
          "dismissKeyboard",
          "requestSupplementaryLexiconWithCompletion_",
          "advanceToNextInputMode"
        ]
      },
      "UIPickerView": {
        "className": "UIPickerView",
        "methodNames": [
          "selectedRowInComponent_",
          "rowSizeForComponent_",
          "viewForRow_forComponent_",
          "numberOfRowsInComponent_",
          "selectRow_inComponent_animated_",
          "reloadComponent_",
          "reloadAllComponents"
        ]
      },
      "NSTextContainer": {
        "className": "NSTextContainer",
        "methodNames": [
          "lineFragmentRectForProposedRect_atIndex_writingDirection_remainingRect_",
          "replaceLayoutManager_",
          "initWithCoder_",
          "initWithSize_"
        ]
      },
      "UIInputView": {
        "className": "UIInputView",
        "methodNames": []
      },
      "UIAccelerometer": {
        "className": "UIAccelerometer",
        "methodNames": [
          "sharedAccelerometer"
        ]
      },
      "NSString": {
        "className": "NSString",
        "methodNames": [
          "drawAtPoint_withAttributes_",
          "sizeWithAttributes_",
          "drawWithRect_options_attributes_context_",
          "drawInRect_withAttributes_",
          "boundingRectWithSize_options_attributes_context_",
          "sizeWithFont_"
        ]
      },
      "UITextSelectionRect": {
        "className": "UITextSelectionRect",
        "methodNames": []
      },
      "UIImagePickerController": {
        "className": "UIImagePickerController",
        "methodNames": [
          "isSourceTypeAvailable_"
        ]
      },
      "UILocalizedIndexedCollation": {
        "className": "UILocalizedIndexedCollation",
        "methodNames": [
          "sortedArrayFromArray_collationStringSelector_",
          "currentCollation",
          "sectionForSectionIndexTitleAtIndex_",
          "sectionForObject_collationStringSelector_"
        ]
      },
      "UISearchBar": {
        "className": "UISearchBar",
        "methodNames": [
          "init"
        ]
      },
      "UICollectionViewController": {
        "className": "UICollectionViewController",
        "methodNames": [
          "initWithCollectionViewLayout_"
        ]
      },
      "UIPanGestureRecognizer": {
        "className": "UIPanGestureRecognizer",
        "methodNames": [
          "velocityInView_",
          "setTranslation_inView_",
          "translationInView_"
        ]
      },
      "UIPageControl": {
        "className": "UIPageControl",
        "methodNames": []
      },
      "UIViewPrintFormatter": {
        "className": "UIViewPrintFormatter",
        "methodNames": []
      },
      "UIEvent": {
        "className": "UIEvent",
        "methodNames": []
      },
      "UIPasteboard": {
        "className": "UIPasteboard",
        "methodNames": [
          "generalPasteboard"
        ]
      },
      "UITableViewCell": {
        "className": "UITableViewCell",
        "methodNames": [
          "initWithStyle_reuseIdentifier_",
          "initWithFrame_reuseIdentifier_"
        ]
      },
      "UICollectionViewLayoutInvalidationContext": {
        "className": "UICollectionViewLayoutInvalidationContext",
        "methodNames": []
      },
      "UIToolbar": {
        "className": "UIToolbar",
        "methodNames": []
      },
      "UINavigationController": {
        "className": "UINavigationController",
        "methodNames": [
          "initWithNavigationBarClass_toolbarClass_"
        ]
      },
      "UIMotionEffectGroup": {
        "className": "UIMotionEffectGroup",
        "methodNames": []
      },
      "UIStoryboard": {
        "className": "UIStoryboard",
        "methodNames": [
          "storyboardWithName_bundle_",
          "instantiateInitialViewController",
          "instantiateViewControllerWithIdentifier_"
        ]
      },
      "UIPopoverBackgroundView": {
        "className": "UIPopoverBackgroundView",
        "methodNames": []
      },
      "NSShadow": {
        "className": "NSShadow",
        "methodNames": [
          "init",
          "initWithCoder_"
        ]
      },
      "UINavigationItem": {
        "className": "UINavigationItem",
        "methodNames": [
          "initWithTitle_"
        ]
      },
      "UISearchController": {
        "className": "UISearchController",
        "methodNames": [
          "initWithSearchResultsController_"
        ]
      },
      "UIDocumentInteractionController": {
        "className": "UIDocumentInteractionController",
        "methodNames": [
          "interactionControllerWithURL_"
        ]
      },
      "UIMutableUserNotificationCategory": {
        "className": "UIMutableUserNotificationCategory",
        "methodNames": [
          "setActions_forContext_"
        ]
      },
      "UICollectionViewFlowLayoutInvalidationContext": {
        "className": "UICollectionViewFlowLayoutInvalidationContext",
        "methodNames": []
      },
      "UIMotionEffect": {
        "className": "UIMotionEffect",
        "methodNames": [
          "init",
          "keyPathsAndRelativeValuesForViewerOffset_",
          "initWithCoder_"
        ]
      },
      "UIBarButtonItem": {
        "className": "UIBarButtonItem",
        "methodNames": [
          "init"
        ]
      },
      "UIImageView": {
        "className": "UIImageView",
        "methodNames": [
          "initWithImage_"
        ]
      },
      "UILayoutGuide": {
        "className": "UILayoutGuide",
        "methodNames": []
      },
      "UIMutableApplicationShortcutItem": {
        "className": "UIMutableApplicationShortcutItem",
        "methodNames": []
      },
      "CIImage": {
        "className": "CIImage",
        "methodNames": [
          "initWithImage_"
        ]
      },
      "UILabel": {
        "className": "UILabel",
        "methodNames": []
      },
      "UIAttachmentBehavior": {
        "className": "UIAttachmentBehavior",
        "methodNames": [
          "initWithItem_attachedToAnchor_"
        ]
      },
      "UIPinchGestureRecognizer": {
        "className": "UIPinchGestureRecognizer",
        "methodNames": []
      },
      "UISlider": {
        "className": "UISlider",
        "methodNames": []
      },
      "UITabBarController": {
        "className": "UITabBarController",
        "methodNames": []
      },
      "UIBarItem": {
        "className": "UIBarItem",
        "methodNames": [
          "init"
        ]
      },
      "UIPress": {
        "className": "UIPress",
        "methodNames": []
      },
      "UIScreenEdgePanGestureRecognizer": {
        "className": "UIScreenEdgePanGestureRecognizer",
        "methodNames": []
      },
      "UIProgressView": {
        "className": "UIProgressView",
        "methodNames": [
          "initWithFrame_"
        ]
      },
      "UITabBar": {
        "className": "UITabBar",
        "methodNames": []
      },
      "UIPageViewController": {
        "className": "UIPageViewController",
        "methodNames": [
          "initWithTransitionStyle_navigationOrientation_options_"
        ]
      },
      "UIRegion": {
        "className": "UIRegion",
        "methodNames": [
          "containsPoint_",
          "initWithRadius_",
          "regionByUnionWithRegion_",
          "initWithSize_",
          "infiniteRegion",
          "inverseRegion",
          "regionByDifferenceFromRegion_",
          "regionByIntersectionWithRegion_"
        ]
      },
      "UIPrinterPickerController": {
        "className": "UIPrinterPickerController",
        "methodNames": [
          "printerPickerControllerWithInitiallySelectedPrinter_",
          "presentFromBarButtonItem_animated_completionHandler_",
          "presentFromRect_inView_animated_completionHandler_",
          "presentAnimated_completionHandler_",
          "dismissAnimated_"
        ]
      },
      "UICollectionView": {
        "className": "UICollectionView",
        "methodNames": [
          "initWithFrame_collectionViewLayout_"
        ]
      },
      "UIColor": {
        "className": "UIColor",
        "methodNames": [
          "colorWithWhite_alpha_",
          "lightTextColor"
        ]
      },
      "UITextView": {
        "className": "UITextView",
        "methodNames": []
      },
      "UILongPressGestureRecognizer": {
        "className": "UILongPressGestureRecognizer",
        "methodNames": []
      },
      "NSMutableAttributedString": {
        "className": "NSMutableAttributedString",
        "methodNames": [
          "readFromURL_options_documentAttributes_error_",
          "readFromFileURL_options_documentAttributes_error_",
          "fixAttributesInRange_",
          "readFromData_options_documentAttributes_error_"
        ]
      },
      "UIPressesEvent": {
        "className": "UIPressesEvent",
        "methodNames": [
          "allPresses",
          "pressesForGestureRecognizer_"
        ]
      },
      "UITableViewRowAction": {
        "className": "UITableViewRowAction",
        "methodNames": [
          "rowActionWithStyle_title_handler_"
        ]
      },
      "UIVibrancyEffect": {
        "className": "UIVibrancyEffect",
        "methodNames": [
          "effectForBlurEffect_"
        ]
      },
      "UIStepper": {
        "className": "UIStepper",
        "methodNames": []
      },
      "UITextInputStringTokenizer": {
        "className": "UITextInputStringTokenizer",
        "methodNames": [
          "initWithTextInput_"
        ]
      },
      "NSLayoutAnchor": {
        "className": "NSLayoutAnchor",
        "methodNames": [
          "constraintGreaterThanOrEqualToAnchor_",
          "constraintGreaterThanOrEqualToAnchor_constant_",
          "constraintLessThanOrEqualToAnchor_",
          "constraintLessThanOrEqualToAnchor_constant_",
          "constraintEqualToAnchor_",
          "constraintEqualToAnchor_constant_"
        ]
      },
      "UIActionSheet": {
        "className": "UIActionSheet",
        "methodNames": [
          "initWithTitle_delegate_cancelButtonTitle_destructiveButtonTitle_otherButtonTitles_"
        ]
      },
      "UIDocumentPickerExtensionViewController": {
        "className": "UIDocumentPickerExtensionViewController",
        "methodNames": [
          "dismissGrantingAccessToURL_",
          "prepareForPresentationInMode_"
        ]
      },
      "UIDynamicBehavior": {
        "className": "UIDynamicBehavior",
        "methodNames": [
          "addChildBehavior_"
        ]
      },
      "UITableViewController": {
        "className": "UITableViewController",
        "methodNames": [
          "initWithStyle_"
        ]
      },
      "UITraitCollection": {
        "className": "UITraitCollection",
        "methodNames": [
          "init"
        ]
      },
      "UIPrintInfo": {
        "className": "UIPrintInfo",
        "methodNames": [
          "printInfo",
          "initWithCoder_",
          "dictionaryRepresentation",
          "printInfoWithDictionary_"
        ]
      },
      "UIControl": {
        "className": "UIControl",
        "methodNames": [
          "addTarget_action_forControlEvents_",
          "cancelTrackingWithEvent_",
          "continueTrackingWithTouch_withEvent_",
          "actionsForTarget_forControlEvent_",
          "endTrackingWithTouch_withEvent_",
          "removeTarget_action_forControlEvents_",
          "beginTrackingWithTouch_withEvent_",
          "sendActionsForControlEvents_",
          "allTargets",
          "allControlEvents",
          "sendAction_to_forEvent_"
        ]
      },
      "UIGravityBehavior": {
        "className": "UIGravityBehavior",
        "methodNames": [
          "initWithItems_"
        ]
      },
      "UILexiconEntry": {
        "className": "UILexiconEntry",
        "methodNames": []
      },
      "UIAccessibilityCustomAction": {
        "className": "UIAccessibilityCustomAction",
        "methodNames": [
          "initWithName_target_selector_"
        ]
      },
      "UIPrintPaper": {
        "className": "UIPrintPaper",
        "methodNames": [
          "printRect",
          "bestPaperForPageSize_withPapersFromArray_"
        ]
      }
    }
  },
  "QuartzCore.framework": {
    "frameworkName": "QuartzCore.framework",
    "classes": {
      "CAShapeLayer": {
        "className": "CAShapeLayer",
        "methodNames": []
      },
      "NSObject": {
        "className": "NSObject",
        "methodNames": [
          "animationDidStop_finished_",
          "drawLayer_inContext_",
          "animationDidStart_",
          "layoutSublayersOfLayer_",
          "actionForLayer_forKey_",
          "displayLayer_"
        ]
      },
      "CAEmitterCell": {
        "className": "CAEmitterCell",
        "methodNames": [
          "shouldArchiveValueForKey_",
          "defaultValueForKey_",
          "emitterCell"
        ]
      },
      "CAAnimationGroup": {
        "className": "CAAnimationGroup",
        "methodNames": []
      },
      "CATransition": {
        "className": "CATransition",
        "methodNames": []
      },
      "CATransaction": {
        "className": "CATransaction",
        "methodNames": [
          "begin"
        ]
      },
      "CAScrollLayer": {
        "className": "CAScrollLayer",
        "methodNames": [
          "scrollToPoint_",
          "scrollToRect_"
        ]
      },
      "CALayer": {
        "className": "CALayer",
        "methodNames": [
          "scrollRectToVisible_",
          "scrollPoint_",
          "layer"
        ]
      },
      "CAAnimation": {
        "className": "CAAnimation",
        "methodNames": [
          "shouldArchiveValueForKey_",
          "defaultValueForKey_",
          "animation"
        ]
      },
      "CAMetalLayer": {
        "className": "CAMetalLayer",
        "methodNames": [
          "nextDrawable"
        ]
      },
      "CAReplicatorLayer": {
        "className": "CAReplicatorLayer",
        "methodNames": []
      },
      "CAKeyframeAnimation": {
        "className": "CAKeyframeAnimation",
        "methodNames": []
      },
      "NSValue": {
        "className": "NSValue",
        "methodNames": [
          "valueWithCATransform3D_"
        ]
      },
      "CATransformLayer": {
        "className": "CATransformLayer",
        "methodNames": []
      },
      "CATextLayer": {
        "className": "CATextLayer",
        "methodNames": []
      },
      "CABasicAnimation": {
        "className": "CABasicAnimation",
        "methodNames": []
      },
      "CADisplayLink": {
        "className": "CADisplayLink",
        "methodNames": [
          "addToRunLoop_forMode_",
          "removeFromRunLoop_forMode_",
          "displayLinkWithTarget_selector_",
          "invalidate"
        ]
      },
      "CAPropertyAnimation": {
        "className": "CAPropertyAnimation",
        "methodNames": [
          "animationWithKeyPath_"
        ]
      },
      "CAEmitterBehavior": {
        "className": "CAEmitterBehavior",
        "methodNames": [
          "behaviorTypes",
          "initWithType_",
          "behaviorWithType_"
        ]
      },
      "CATiledLayer": {
        "className": "CATiledLayer",
        "methodNames": [
          "fadeDuration"
        ]
      },
      "CAValueFunction": {
        "className": "CAValueFunction",
        "methodNames": [
          "functionWithName_"
        ]
      },
      "CAGradientLayer": {
        "className": "CAGradientLayer",
        "methodNames": []
      },
      "CAEAGLLayer": {
        "className": "CAEAGLLayer",
        "methodNames": []
      },
      "CASpringAnimation": {
        "className": "CASpringAnimation",
        "methodNames": []
      },
      "CAEmitterLayer": {
        "className": "CAEmitterLayer",
        "methodNames": []
      },
      "NSNull": {
        "className": "NSNull",
        "methodNames": []
      },
      "CAMediaTimingFunction": {
        "className": "CAMediaTimingFunction",
        "methodNames": [
          "functionWithControlPoints____",
          "getControlPointAtIndex_values_",
          "initWithControlPoints____",
          "functionWithName_"
        ]
      }
    }
  },
  "Foundation.framework": {
    "frameworkName": "Foundation.framework",
    "classes": {
      "NSMutableString": {
        "className": "NSMutableString",
        "methodNames": [
          "appendFormat_",
          "replaceCharactersInRange_withString_",
          "replaceOccurrencesOfString_withString_options_range_",
          "stringWithCapacity_",
          "appendString_",
          "deleteCharactersInRange_",
          "setString_",
          "applyTransform_reverse_range_updatedRange_",
          "insertString_atIndex_",
          "initWithCapacity_"
        ]
      },
      "NSRegularExpression": {
        "className": "NSRegularExpression",
        "methodNames": [
          "escapedPatternForString_",
          "firstMatchInString_options_range_",
          "initWithPattern_options_error_",
          "escapedTemplateForString_",
          "replaceMatchesInString_options_range_withTemplate_",
          "rangeOfFirstMatchInString_options_range_",
          "matchesInString_options_range_",
          "regularExpressionWithPattern_options_error_",
          "enumerateMatchesInString_options_range_usingBlock_",
          "numberOfMatchesInString_options_range_",
          "stringByReplacingMatchesInString_options_range_withTemplate_",
          "replacementStringForResult_inString_offset_template_"
        ]
      },
      "NSNotification": {
        "className": "NSNotification",
        "methodNames": [
          "init",
          "initWithCoder_",
          "notificationWithName_object_",
          "initWithName_object_userInfo_",
          "notificationWithName_object_userInfo_"
        ]
      },
      "NSURLSessionConfiguration": {
        "className": "NSURLSessionConfiguration",
        "methodNames": [
          "defaultSessionConfiguration",
          "backgroundSessionConfigurationWithIdentifier_",
          "ephemeralSessionConfiguration",
          "backgroundSessionConfiguration_"
        ]
      },
      "NSArray": {
        "className": "NSArray",
        "methodNames": [
          "addObserver_toObjectsAtIndexes_forKeyPath_options_context_",
          "pathsMatchingExtensions_",
          "arrayByAddingObject_",
          "removeObserver_forKeyPath_context_",
          "filteredArrayUsingPredicate_",
          "removeObserver_fromObjectsAtIndexes_forKeyPath_",
          "setValue_forKey_",
          "sortedArrayUsingDescriptors_",
          "addObserver_forKeyPath_options_context_",
          "valueForKey_",
          "array",
          "getObjects_",
          "removeObserver_fromObjectsAtIndexes_forKeyPath_context_",
          "removeObserver_forKeyPath_"
        ]
      },
      "NSCharacterSet": {
        "className": "NSCharacterSet",
        "methodNames": [
          "URLPasswordAllowedCharacterSet",
          "punctuationCharacterSet",
          "characterSetWithCharactersInString_",
          "URLQueryAllowedCharacterSet",
          "initWithCoder_",
          "letterCharacterSet",
          "illegalCharacterSet",
          "decimalDigitCharacterSet",
          "controlCharacterSet",
          "URLUserAllowedCharacterSet",
          "symbolCharacterSet",
          "alphanumericCharacterSet",
          "hasMemberInPlane_",
          "URLHostAllowedCharacterSet",
          "characterSetWithBitmapRepresentation_",
          "nonBaseCharacterSet",
          "decomposableCharacterSet",
          "whitespaceCharacterSet",
          "whitespaceAndNewlineCharacterSet",
          "characterIsMember_",
          "newlineCharacterSet",
          "capitalizedLetterCharacterSet",
          "characterSetWithContentsOfFile_",
          "URLFragmentAllowedCharacterSet",
          "characterSetWithRange_",
          "uppercaseLetterCharacterSet",
          "isSupersetOfSet_",
          "lowercaseLetterCharacterSet",
          "URLPathAllowedCharacterSet",
          "longCharacterIsMember_"
        ]
      },
      "NSIndexSet": {
        "className": "NSIndexSet",
        "methodNames": [
          "intersectsIndexesInRange_",
          "enumerateIndexesUsingBlock_",
          "containsIndexesInRange_",
          "indexSet",
          "countOfIndexesInRange_",
          "indexesWithOptions_passingTest_",
          "indexWithOptions_passingTest_",
          "initWithIndex_",
          "enumerateRangesWithOptions_usingBlock_",
          "indexesPassingTest_",
          "getIndexes_maxCount_inIndexRange_",
          "initWithIndexesInRange_",
          "initWithIndexSet_",
          "isEqualToIndexSet_",
          "indexLessThanIndex_",
          "indexLessThanOrEqualToIndex_",
          "containsIndex_",
          "indexInRange_options_passingTest_",
          "enumerateRangesInRange_options_usingBlock_",
          "indexGreaterThanIndex_",
          "indexGreaterThanOrEqualToIndex_",
          "enumerateIndexesWithOptions_usingBlock_",
          "indexSetWithIndex_",
          "containsIndexes_",
          "indexPassingTest_",
          "indexSetWithIndexesInRange_",
          "enumerateIndexesInRange_options_usingBlock_",
          "indexesInRange_options_passingTest_",
          "enumerateRangesUsingBlock_"
        ]
      },
      "NSConditionLock": {
        "className": "NSConditionLock",
        "methodNames": [
          "initWithCondition_",
          "lockWhenCondition_",
          "unlockWithCondition_",
          "lockWhenCondition_beforeDate_",
          "tryLockWhenCondition_",
          "tryLock",
          "lockBeforeDate_"
        ]
      },
      "NSMethodSignature": {
        "className": "NSMethodSignature",
        "methodNames": [
          "getArgumentTypeAtIndex_",
          "isOneway",
          "signatureWithObjCTypes_"
        ]
      },
      "NSDateFormatter": {
        "className": "NSDateFormatter",
        "methodNames": [
          "localizedStringFromDate_dateStyle_timeStyle_",
          "stringFromDate_",
          "initWithDateFormat_allowNaturalLanguage_",
          "setLocalizedDateFormatFromTemplate_",
          "setDefaultFormatterBehavior_",
          "getObjectValue_forString_range_error_",
          "dateFromString_",
          "dateFormatFromTemplate_options_locale_",
          "defaultFormatterBehavior"
        ]
      },
      "NSURLProtocol": {
        "className": "NSURLProtocol",
        "methodNames": [
          "canInitWithTask_",
          "stopLoading",
          "removePropertyForKey_inRequest_",
          "registerClass_",
          "propertyForKey_inRequest_",
          "setProperty_forKey_inRequest_",
          "initWithRequest_cachedResponse_client_",
          "canonicalRequestForRequest_",
          "startLoading",
          "initWithTask_cachedResponse_client_",
          "requestIsCacheEquivalent_toRequest_",
          "unregisterClass_",
          "canInitWithRequest_"
        ]
      },
      "NSLinguisticTagger": {
        "className": "NSLinguisticTagger",
        "methodNames": [
          "tagAtIndex_scheme_tokenRange_sentenceRange_",
          "sentenceRangeForRange_",
          "tagsInRange_scheme_options_tokenRanges_",
          "possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores_",
          "enumerateTagsInRange_scheme_options_usingBlock_",
          "initWithTagSchemes_options_",
          "availableTagSchemesForLanguage_",
          "setOrthography_range_",
          "orthographyAtIndex_effectiveRange_",
          "stringEditedInRange_changeInLength_"
        ]
      },
      "NSAutoreleasePool": {
        "className": "NSAutoreleasePool",
        "methodNames": [
          "addObject_",
          "drain"
        ]
      },
      "NSURLComponents": {
        "className": "NSURLComponents",
        "methodNames": [
          "init",
          "initWithURL_resolvingAgainstBaseURL_",
          "componentsWithString_",
          "initWithString_",
          "URLRelativeToURL_",
          "componentsWithURL_resolvingAgainstBaseURL_"
        ]
      },
      "NSURLResponse": {
        "className": "NSURLResponse",
        "methodNames": [
          "initWithURL_MIMEType_expectedContentLength_textEncodingName_"
        ]
      },
      "NSURL": {
        "className": "NSURL",
        "methodNames": [
          "URLByAppendingPathComponent_",
          "resourceDataUsingCache_",
          "setProperty_forKey_",
          "propertyForKey_",
          "getPromisedItemResourceValue_forKey_error_",
          "URLHandleUsingCache_",
          "promisedItemResourceValuesForKeys_error_",
          "URLByAppendingPathComponent_isDirectory_",
          "setResourceData_",
          "checkPromisedItemIsReachableAndReturnError_",
          "fileURLWithPathComponents_",
          "loadResourceDataNotifyingClient_usingCache_",
          "URLByAppendingPathExtension_"
        ]
      },
      "NSTimer": {
        "className": "NSTimer",
        "methodNames": [
          "timerWithTimeInterval_invocation_repeats_",
          "scheduledTimerWithTimeInterval_invocation_repeats_",
          "initWithFireDate_interval_target_selector_userInfo_repeats_",
          "scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_",
          "fire",
          "timerWithTimeInterval_target_selector_userInfo_repeats_",
          "invalidate"
        ]
      },
      "NSCache": {
        "className": "NSCache",
        "methodNames": [
          "setObject_forKey_cost_",
          "removeObjectForKey_",
          "removeAllObjects",
          "setObject_forKey_",
          "objectForKey_"
        ]
      },
      "NSValue": {
        "className": "NSValue",
        "methodNames": [
          "valueWithRange_",
          "value_withObjCType_",
          "valueWithNonretainedObject_",
          "isEqualToValue_",
          "getValue_",
          "initWithCoder_",
          "valueWithPointer_",
          "valueWithBytes_objCType_",
          "initWithBytes_objCType_"
        ]
      },
      "NSIndexPath": {
        "className": "NSIndexPath",
        "methodNames": [
          "indexAtPosition_",
          "getIndexes_range_",
          "indexPathByAddingIndex_",
          "indexPathWithIndexes_length_",
          "initWithIndexes_length_",
          "compare_",
          "getIndexes_",
          "initWithIndex_",
          "indexPathWithIndex_",
          "indexPathByRemovingLastIndex"
        ]
      },
      "NSKeyedArchiver": {
        "className": "NSKeyedArchiver",
        "methodNames": [
          "encodeInt_forKey_",
          "archivedDataWithRootObject_",
          "encodeFloat_forKey_",
          "setClassName_forClass_",
          "finishEncoding",
          "encodeInt64_forKey_",
          "initForWritingWithMutableData_",
          "encodeObject_forKey_",
          "encodeBytes_length_forKey_",
          "encodeDouble_forKey_",
          "encodeConditionalObject_forKey_",
          "encodeBool_forKey_",
          "archiveRootObject_toFile_",
          "classNameForClass_",
          "encodeInt32_forKey_"
        ]
      },
      "NSPersonNameComponentsFormatter": {
        "className": "NSPersonNameComponentsFormatter",
        "methodNames": [
          "stringFromPersonNameComponents_",
          "getObjectValue_forString_errorDescription_",
          "localizedStringFromPersonNameComponents_style_options_",
          "annotatedStringFromPersonNameComponents_"
        ]
      },
      "NSOrderedSet": {
        "className": "NSOrderedSet",
        "methodNames": [
          "indexesOfObjectsPassingTest_",
          "descriptionWithLocale_indent_",
          "indexesOfObjectsWithOptions_passingTest_",
          "getObjects_range_",
          "filteredOrderedSetUsingPredicate_",
          "isSubsetOfSet_",
          "reverseObjectEnumerator",
          "indexesOfObjectsAtIndexes_options_passingTest_",
          "sortedArrayUsingComparator_",
          "objectsAtIndexes_",
          "enumerateObjectsWithOptions_usingBlock_",
          "addObserver_forKeyPath_options_context_",
          "indexOfObject_inSortedRange_options_usingComparator_",
          "containsObject_",
          "orderedSet",
          "descriptionWithLocale_",
          "indexOfObjectWithOptions_passingTest_",
          "indexOfObjectAtIndexes_options_passingTest_",
          "sortedArrayWithOptions_usingComparator_",
          "enumerateObjectsAtIndexes_options_usingBlock_",
          "objectEnumerator",
          "indexOfObjectPassingTest_",
          "removeObserver_forKeyPath_context_",
          "objectAtIndexedSubscript_",
          "setValue_forKey_",
          "intersectsSet_",
          "intersectsOrderedSet_",
          "enumerateObjectsUsingBlock_",
          "sortedArrayUsingDescriptors_",
          "valueForKey_",
          "isSubsetOfOrderedSet_",
          "isEqualToOrderedSet_",
          "removeObserver_forKeyPath_"
        ]
      },
      "NSNotificationQueue": {
        "className": "NSNotificationQueue",
        "methodNames": [
          "enqueueNotification_postingStyle_",
          "initWithNotificationCenter_",
          "defaultQueue",
          "enqueueNotification_postingStyle_coalesceMask_forModes_",
          "dequeueNotificationsMatching_coalesceMask_"
        ]
      },
      "NSPropertyListSerialization": {
        "className": "NSPropertyListSerialization",
        "methodNames": [
          "dataWithPropertyList_format_options_error_",
          "propertyListWithData_options_format_error_",
          "dataFromPropertyList_format_errorDescription_",
          "propertyList_isValidForFormat_",
          "writePropertyList_toStream_format_options_error_",
          "propertyListFromData_mutabilityOption_format_errorDescription_",
          "propertyListWithStream_options_format_error_"
        ]
      },
      "NSBundle": {
        "className": "NSBundle",
        "methodNames": [
          "setPreservationPriority_forTags_",
          "preservationPriorityForTag_",
          "mainBundle"
        ]
      },
      "NSMetadataQueryAttributeValueTuple": {
        "className": "NSMetadataQueryAttributeValueTuple",
        "methodNames": []
      },
      "NSOperation": {
        "className": "NSOperation",
        "methodNames": [
          "cancel",
          "addDependency_",
          "start",
          "removeDependency_",
          "main",
          "waitUntilFinished"
        ]
      },
      "NSTextCheckingResult": {
        "className": "NSTextCheckingResult",
        "methodNames": [
          "quoteCheckingResultWithRange_replacementString_",
          "dashCheckingResultWithRange_replacementString_",
          "replacementCheckingResultWithRange_replacementString_",
          "regularExpressionCheckingResultWithRanges_count_regularExpression_",
          "grammarCheckingResultWithRange_details_",
          "dateCheckingResultWithRange_date_",
          "linkCheckingResultWithRange_URL_",
          "transitInformationCheckingResultWithRange_components_",
          "correctionCheckingResultWithRange_replacementString_",
          "spellCheckingResultWithRange_",
          "orthographyCheckingResultWithRange_orthography_",
          "correctionCheckingResultWithRange_replacementString_alternativeStrings_",
          "dateCheckingResultWithRange_date_timeZone_duration_",
          "addressCheckingResultWithRange_components_",
          "rangeAtIndex_",
          "phoneNumberCheckingResultWithRange_phoneNumber_",
          "resultByAdjustingRangesWithOffset_"
        ]
      },
      "NSMutableDictionary": {
        "className": "NSMutableDictionary",
        "methodNames": [
          "removeObjectForKey_",
          "init",
          "setDictionary_",
          "removeAllObjects",
          "initWithContentsOfURL_",
          "initWithCoder_",
          "dictionaryWithContentsOfURL_",
          "setValue_forKey_",
          "initWithContentsOfFile_",
          "dictionaryWithCapacity_",
          "removeObjectsForKeys_",
          "dictionaryWithSharedKeySet_",
          "setObject_forKey_",
          "addEntriesFromDictionary_",
          "setObject_forKeyedSubscript_",
          "dictionaryWithContentsOfFile_",
          "initWithCapacity_"
        ]
      },
      "NSExpression": {
        "className": "NSExpression",
        "methodNames": [
          "expressionForConstantValue_",
          "expressionForFunction_arguments_",
          "expressionForUnionSet_with_",
          "initWithExpressionType_",
          "expressionForVariable_",
          "expressionForFunction_selectorName_arguments_",
          "initWithCoder_",
          "expressionForKeyPath_",
          "allowEvaluation",
          "expressionForSubquery_usingIteratorVariable_predicate_",
          "expressionForAnyKey",
          "expressionWithFormat_",
          "expressionForIntersectSet_with_",
          "expressionForBlock_arguments_",
          "expressionForAggregate_",
          "expressionValueWithObject_context_",
          "expressionWithFormat_arguments_",
          "expressionForEvaluatedObject",
          "expressionForConditional_trueExpression_falseExpression_",
          "expressionWithFormat_argumentArray_",
          "expressionForMinusSet_with_"
        ]
      },
      "NSSet": {
        "className": "NSSet",
        "methodNames": [
          "sortedArrayUsingDescriptors_",
          "addObserver_forKeyPath_options_context_",
          "valueForKey_",
          "set",
          "removeObserver_forKeyPath_context_",
          "setValue_forKey_",
          "filteredSetUsingPredicate_",
          "removeObserver_forKeyPath_"
        ]
      },
      "NSPersonNameComponents": {
        "className": "NSPersonNameComponents",
        "methodNames": []
      },
      "NSURLRequest": {
        "className": "NSURLRequest",
        "methodNames": [
          "requestWithURL_cachePolicy_timeoutInterval_",
          "valueForHTTPHeaderField_",
          "supportsSecureCoding",
          "initWithURL_cachePolicy_timeoutInterval_",
          "requestWithURL_",
          "initWithURL_"
        ]
      },
      "NSDateIntervalFormatter": {
        "className": "NSDateIntervalFormatter",
        "methodNames": [
          "stringFromDate_toDate_"
        ]
      },
      "NSURLSessionUploadTask": {
        "className": "NSURLSessionUploadTask",
        "methodNames": []
      },
      "NSPort": {
        "className": "NSPort",
        "methodNames": [
          "port"
        ]
      },
      "NSRunLoop": {
        "className": "NSRunLoop",
        "methodNames": [
          "performSelector_target_argument_order_modes_",
          "runMode_beforeDate_",
          "cancelPerformSelector_target_argument_",
          "cancelPerformSelectorsWithTarget_",
          "runUntilDate_",
          "currentRunLoop",
          "run",
          "configureAsServer"
        ]
      },
      "NSExtensionContext": {
        "className": "NSExtensionContext",
        "methodNames": [
          "openURL_completionHandler_",
          "completeRequestReturningItems_completionHandler_",
          "cancelRequestWithError_"
        ]
      },
      "NSURLSession": {
        "className": "NSURLSession",
        "methodNames": [
          "sharedSession",
          "dataTaskWithURL_completionHandler_",
          "uploadTaskWithRequest_fromData_completionHandler_",
          "downloadTaskWithURL_completionHandler_",
          "dataTaskWithRequest_completionHandler_",
          "uploadTaskWithRequest_fromFile_completionHandler_",
          "downloadTaskWithRequest_completionHandler_",
          "downloadTaskWithResumeData_completionHandler_"
        ]
      },
      "NSNull": {
        "className": "NSNull",
        "methodNames": [
          "null"
        ]
      },
      "NSUserActivity": {
        "className": "NSUserActivity",
        "methodNames": [
          "resignCurrent",
          "init",
          "becomeCurrent",
          "addUserInfoEntriesFromDictionary_",
          "getContinuationStreamsWithCompletionHandler_",
          "invalidate",
          "initWithActivityType_"
        ]
      },
      "NSProcessInfo": {
        "className": "NSProcessInfo",
        "methodNames": [
          "processInfo",
          "beginActivityWithOptions_reason_",
          "isOperatingSystemAtLeastVersion_",
          "disableSuddenTermination",
          "disableAutomaticTermination_",
          "enableSuddenTermination",
          "operatingSystem",
          "operatingSystemName",
          "enableAutomaticTermination_"
        ]
      },
      "NSLocale": {
        "className": "NSLocale",
        "methodNames": [
          "characterDirectionForLanguage_",
          "lineDirectionForLanguage_",
          "displayNameForKey_value_",
          "initWithLocaleIdentifier_",
          "canonicalLanguageIdentifierFromString_",
          "windowsLocaleCodeFromLocaleIdentifier_",
          "ISOCountryCodes",
          "commonISOCurrencyCodes",
          "canonicalLocaleIdentifierFromString_",
          "ISOLanguageCodes",
          "initWithCoder_",
          "ISOCurrencyCodes",
          "objectForKey_",
          "componentsFromLocaleIdentifier_",
          "autoupdatingCurrentLocale",
          "availableLocaleIdentifiers",
          "preferredLanguages",
          "localeIdentifierFromComponents_",
          "localeIdentifierFromWindowsLocaleCode_"
        ]
      },
      "NSURLCredential": {
        "className": "NSURLCredential",
        "methodNames": [
          "initWithUser_password_persistence_",
          "initWithTrust_",
          "credentialForTrust_",
          "credentialWithUser_password_persistence_",
          "initWithIdentity_certificates_persistence_",
          "credentialWithIdentity_certificates_persistence_"
        ]
      },
      "NSMutableSet": {
        "className": "NSMutableSet",
        "methodNames": [
          "init",
          "intersectSet_",
          "minusSet_",
          "removeAllObjects",
          "removeObject_",
          "initWithCoder_",
          "setWithCapacity_",
          "filterUsingPredicate_",
          "addObject_",
          "setSet_",
          "unionSet_",
          "addObjectsFromArray_",
          "initWithCapacity_"
        ]
      },
      "NSFileWrapper": {
        "className": "NSFileWrapper",
        "methodNames": [
          "initWithPath_",
          "initDirectoryWithFileWrappers_",
          "initWithCoder_",
          "writeToURL_options_originalContentsURL_error_",
          "addFileWrapper_",
          "initSymbolicLinkWithDestinationURL_",
          "keyForFileWrapper_",
          "addRegularFileWithContents_preferredFilename_",
          "readFromURL_options_error_",
          "initWithSerializedRepresentation_",
          "initWithURL_options_error_",
          "matchesContentsOfURL_",
          "initRegularFileWithContents_",
          "removeFileWrapper_"
        ]
      },
      "NSUndoManager": {
        "className": "NSUndoManager",
        "methodNames": [
          "undoMenuTitleForUndoActionName_",
          "disableUndoRegistration",
          "registerUndoWithTarget_selector_object_",
          "redo",
          "undoNestedGroup",
          "removeAllActionsWithTarget_",
          "enableUndoRegistration",
          "endUndoGrouping",
          "undo",
          "beginUndoGrouping",
          "setActionName_",
          "redoMenuTitleForUndoActionName_",
          "registerUndoWithTarget_handler_",
          "setActionIsDiscardable_",
          "prepareWithInvocationTarget_",
          "removeAllActions"
        ]
      },
      "NSURLProtectionSpace": {
        "className": "NSURLProtectionSpace",
        "methodNames": [
          "initWithHost_port_protocol_realm_authenticationMethod_",
          "initWithProxyHost_port_type_realm_authenticationMethod_"
        ]
      },
      "NSJSONSerialization": {
        "className": "NSJSONSerialization",
        "methodNames": [
          "dataWithJSONObject_options_error_",
          "JSONObjectWithStream_options_error_",
          "writeJSONObject_toStream_options_error_",
          "isValidJSONObject_",
          "JSONObjectWithData_options_error_"
        ]
      },
      "NSRecursiveLock": {
        "className": "NSRecursiveLock",
        "methodNames": [
          "tryLock",
          "lockBeforeDate_"
        ]
      },
      "NSException": {
        "className": "NSException",
        "methodNames": [
          "raise_format_",
          "raise",
          "raise_format_arguments_",
          "exceptionWithName_reason_userInfo_",
          "initWithName_reason_userInfo_"
        ]
      },
      "NSString": {
        "className": "NSString",
        "methodNames": [
          "getCString_maxLength_",
          "getBytes_maxLength_usedLength_encoding_options_range_remainingRange_",
          "initWithCharactersNoCopy_length_freeWhenDone_",
          "compare_options_range_",
          "localizedCompare_",
          "writeToFile_atomically_encoding_error_",
          "variantFittingPresentationWidth_",
          "initWithCString_",
          "componentsSeparatedByString_",
          "dataUsingEncoding_allowLossyConversion_",
          "cString",
          "localizedStandardCompare_",
          "stringWithContentsOfURL_",
          "init",
          "stringByAppendingString_",
          "getLineStart_end_contentsEnd_forRange_",
          "enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_",
          "initWithData_encoding_",
          "getParagraphStart_end_contentsEnd_forRange_",
          "initWithContentsOfURL_usedEncoding_error_",
          "initWithContentsOfFile_",
          "hasSuffix_",
          "initWithContentsOfFile_usedEncoding_error_",
          "stringByReplacingOccurrencesOfString_withString_",
          "componentsSeparatedByCharactersInSet_",
          "hasPrefix_",
          "uppercaseStringWithLocale_",
          "maximumLengthOfBytesUsingEncoding_",
          "stringByPaddingToLength_withString_startingAtIndex_",
          "rangeOfCharacterFromSet_options_",
          "localizedCaseInsensitiveCompare_",
          "substringWithRange_",
          "initWithFormat_arguments_",
          "getCString_maxLength_range_remainingRange_",
          "rangeOfString_options_range_locale_",
          "stringWithContentsOfFile_encoding_error_",
          "initWithContentsOfURL_",
          "linguisticTagsInRange_scheme_options_orthography_tokenRanges_",
          "stringByApplyingTransform_reverse_",
          "localizedCaseInsensitiveContainsString_",
          "cStringUsingEncoding_",
          "stringWithContentsOfURL_encoding_error_",
          "rangeOfString_options_",
          "commonPrefixWithString_options_",
          "stringsByAppendingPaths_",
          "stringWithUTF8String_",
          "substringFromIndex_",
          "compare_",
          "getFileSystemRepresentation_maxLength_",
          "propertyList",
          "rangeOfComposedCharacterSequenceAtIndex_",
          "compare_options_range_locale_",
          "writeToFile_atomically_",
          "stringWithContentsOfURL_usedEncoding_error_",
          "stringByReplacingCharactersInRange_withString_",
          "capitalizedStringWithLocale_",
          "initWithString_",
          "getCString_maxLength_encoding_",
          "completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_",
          "containsString_",
          "stringWithContentsOfFile_",
          "rangeOfString_",
          "rangeOfCharacterFromSet_",
          "lowercaseStringWithLocale_",
          "enumerateSubstringsInRange_options_usingBlock_",
          "lossyCString",
          "stringByAddingPercentEscapesUsingEncoding_",
          "compare_options_",
          "initWithCString_encoding_",
          "initWithCoder_",
          "dataUsingEncoding_",
          "caseInsensitiveCompare_",
          "initWithBytes_length_encoding_",
          "lineRangeForRange_",
          "stringByAppendingPathComponent_",
          "isEqualToString_",
          "stringWithCString_",
          "rangeOfString_options_range_",
          "initWithUTF8String_",
          "stringWithCString_encoding_",
          "canBeConvertedToEncoding_",
          "stringByReplacingOccurrencesOfString_withString_options_range_",
          "initWithCStringNoCopy_length_freeWhenDone_",
          "getCharacters_range_",
          "availableStringEncodings",
          "stringByFoldingWithOptions_locale_",
          "initWithCString_length_",
          "initWithContentsOfURL_encoding_error_",
          "writeToURL_atomically_",
          "writeToURL_atomically_encoding_error_",
          "initWithFormat_locale_",
          "enumerateLinesUsingBlock_",
          "stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_",
          "pathWithComponents_",
          "lengthOfBytesUsingEncoding_",
          "characterAtIndex_",
          "localizedStandardContainsString_",
          "stringByTrimmingCharactersInSet_",
          "stringWithContentsOfFile_usedEncoding_error_",
          "paragraphRangeForRange_",
          "string",
          "initWithFormat_",
          "stringWithString_",
          "initWithContentsOfFile_encoding_error_",
          "stringByAppendingFormat_",
          "stringWithCharacters_length_",
          "localizedNameOfStringEncoding_",
          "stringWithFormat_",
          "defaultCStringEncoding",
          "initWithBytesNoCopy_length_encoding_freeWhenDone_",
          "localizedStringWithFormat_",
          "cStringLength",
          "stringByAppendingPathExtension_",
          "substringToIndex_",
          "propertyListFromStringsFileFormat",
          "initWithCharacters_length_",
          "stringByAddingPercentEncodingWithAllowedCharacters_",
          "localizedStandardRangeOfString_",
          "getCharacters_",
          "rangeOfComposedCharacterSequencesForRange_",
          "initWithFormat_locale_arguments_",
          "rangeOfCharacterFromSet_options_range_",
          "stringWithCString_length_",
          "getCString_",
          "stringByReplacingPercentEscapesUsingEncoding_"
        ]
      },
      "NSHTTPCookie": {
        "className": "NSHTTPCookie",
        "methodNames": [
          "initWithProperties_",
          "requestHeaderFieldsWithCookies_",
          "cookieWithProperties_",
          "cookiesWithResponseHeaderFields_forURL_"
        ]
      },
      "NSKeyedUnarchiver": {
        "className": "NSKeyedUnarchiver",
        "methodNames": [
          "unarchiveObjectWithData_"
        ]
      },
      "NSURLConnection": {
        "className": "NSURLConnection",
        "methodNames": [
          "sendAsynchronousRequest_queue_completionHandler_",
          "initWithRequest_delegate_startImmediately_",
          "sendSynchronousRequest_returningResponse_error_"
        ]
      },
      "NSCondition": {
        "className": "NSCondition",
        "methodNames": [
          "broadcast",
          "wait",
          "waitUntilDate_",
          "signal"
        ]
      },
      "NSEnumerator": {
        "className": "NSEnumerator",
        "methodNames": [
          "nextObject"
        ]
      },
      "NSOutputStream": {
        "className": "NSOutputStream",
        "methodNames": [
          "initToFileAtPath_append_",
          "outputStreamWithURL_append_",
          "outputStreamToMemory",
          "outputStreamToFileAtPath_append_",
          "write_maxLength_",
          "initWithURL_append_",
          "initToMemory",
          "initToBuffer_capacity_",
          "outputStreamToBuffer_capacity_"
        ]
      },
      "NSInputStream": {
        "className": "NSInputStream",
        "methodNames": [
          "inputStreamWithData_",
          "getBuffer_length_",
          "initWithData_",
          "inputStreamWithURL_",
          "initWithFileAtPath_",
          "initWithURL_",
          "inputStreamWithFileAtPath_",
          "read_maxLength_"
        ]
      },
      "NSCachedURLResponse": {
        "className": "NSCachedURLResponse",
        "methodNames": [
          "initWithResponse_data_",
          "initWithResponse_data_userInfo_storagePolicy_"
        ]
      },
      "NSMetadataQuery": {
        "className": "NSMetadataQuery",
        "methodNames": []
      },
      "NSLock": {
        "className": "NSLock",
        "methodNames": [
          "tryLock",
          "lockBeforeDate_"
        ]
      },
      "NSURLQueryItem": {
        "className": "NSURLQueryItem",
        "methodNames": [
          "initWithName_value_",
          "queryItemWithName_value_"
        ]
      },
      "NSTimeZone": {
        "className": "NSTimeZone",
        "methodNames": [
          "timeZoneForSecondsFromGMT_",
          "timeZoneDataVersion",
          "abbreviationForDate_",
          "knownTimeZoneNames",
          "systemTimeZone",
          "localizedName_locale_",
          "initWithName_data_",
          "secondsFromGMTForDate_",
          "defaultTimeZone",
          "resetSystemTimeZone",
          "setAbbreviationDictionary_",
          "initWithName_",
          "setDefaultTimeZone_",
          "localTimeZone",
          "timeZoneWithName_data_",
          "abbreviationDictionary",
          "timeZoneWithName_",
          "daylightSavingTimeOffsetForDate_",
          "isDaylightSavingTimeForDate_",
          "isEqualToTimeZone_",
          "timeZoneWithAbbreviation_",
          "nextDaylightSavingTimeTransitionAfterDate_"
        ]
      },
      "NSFileManager": {
        "className": "NSFileManager",
        "methodNames": [
          "defaultManager"
        ]
      },
      "NSByteCountFormatter": {
        "className": "NSByteCountFormatter",
        "methodNames": [
          "stringFromByteCount_",
          "stringFromByteCount_countStyle_"
        ]
      },
      "NSCompoundPredicate": {
        "className": "NSCompoundPredicate",
        "methodNames": [
          "initWithType_subpredicates_"
        ]
      },
      "NSURLAuthenticationChallenge": {
        "className": "NSURLAuthenticationChallenge",
        "methodNames": [
          "initWithAuthenticationChallenge_sender_",
          "initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_"
        ]
      },
      "NSFormatter": {
        "className": "NSFormatter",
        "methodNames": [
          "attributedStringForObjectValue_withDefaultAttributes_",
          "getObjectValue_forString_errorDescription_",
          "isPartialStringValid_newEditingString_errorDescription_",
          "editingStringForObjectValue_",
          "isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_",
          "stringForObjectValue_"
        ]
      },
      "NSURLSessionTask": {
        "className": "NSURLSessionTask",
        "methodNames": [
          "cancel",
          "suspend",
          "resume"
        ]
      },
      "NSURLSessionStreamTask": {
        "className": "NSURLSessionStreamTask",
        "methodNames": [
          "readDataOfMinLength_maxLength_timeout_completionHandler_",
          "writeData_timeout_completionHandler_",
          "closeRead",
          "closeWrite",
          "captureStreams",
          "startSecureConnection",
          "stopSecureConnection"
        ]
      },
      "NSDecimalNumberHandler": {
        "className": "NSDecimalNumberHandler",
        "methodNames": [
          "defaultDecimalNumberHandler",
          "decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_",
          "initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_"
        ]
      },
      "NSScanner": {
        "className": "NSScanner",
        "methodNames": [
          "scanDecimal_",
          "scanHexInt_",
          "scanLongLong_",
          "scanString_intoString_",
          "scanUpToString_intoString_",
          "localizedScannerWithString_",
          "scannerWithString_",
          "scanInt_",
          "scanFloat_",
          "scanCharactersFromSet_intoString_",
          "scanUnsignedLongLong_",
          "scanInteger_",
          "initWithString_",
          "scanDouble_",
          "scanHexLongLong_",
          "scanHexDouble_",
          "scanUpToCharactersFromSet_intoString_",
          "scanHexFloat_"
        ]
      },
      "NSDataDetector": {
        "className": "NSDataDetector",
        "methodNames": [
          "initWithTypes_error_",
          "dataDetectorWithTypes_error_"
        ]
      },
      "NSDictionary": {
        "className": "NSDictionary",
        "methodNames": [
          "descriptionWithLocale_indent_",
          "fileIsAppendOnly",
          "objectForKeyedSubscript_",
          "fileIsImmutable",
          "keysOfEntriesPassingTest_",
          "isEqualToDictionary_",
          "keysSortedByValueUsingComparator_",
          "fileSystemFileNumber",
          "fileModificationDate",
          "fileOwnerAccountName",
          "getObjects_andKeys_count_",
          "sharedKeySetForKeys_",
          "fileSystemNumber",
          "fileExtensionHidden",
          "fileHFSCreatorCode",
          "enumerateKeysAndObjectsUsingBlock_",
          "filePosixPermissions",
          "fileHFSTypeCode",
          "getObjects_andKeys_",
          "descriptionWithLocale_",
          "fileCreationDate",
          "allKeysForObject_",
          "keysSortedByValueWithOptions_usingComparator_",
          "objectsForKeys_notFoundMarker_",
          "fileGroupOwnerAccountName",
          "keysOfEntriesWithOptions_passingTest_",
          "objectEnumerator",
          "keysSortedByValueUsingSelector_",
          "writeToFile_atomically_",
          "writeToURL_atomically_",
          "dictionary",
          "valueForKey_",
          "fileSize",
          "fileGroupOwnerAccountID",
          "enumerateKeysAndObjectsWithOptions_usingBlock_",
          "fileType",
          "fileOwnerAccountID"
        ]
      },
      "NSError": {
        "className": "NSError",
        "methodNames": [
          "initWithDomain_code_userInfo_"
        ]
      },
      "NSDateComponents": {
        "className": "NSDateComponents",
        "methodNames": []
      },
      "NSCountedSet": {
        "className": "NSCountedSet",
        "methodNames": [
          "initWithSet_",
          "countForObject_",
          "objectEnumerator",
          "removeObject_",
          "initWithArray_",
          "initWithCapacity_",
          "addObject_"
        ]
      },
      "NSAssertionHandler": {
        "className": "NSAssertionHandler",
        "methodNames": [
          "handleFailureInMethod_object_file_lineNumber_description_",
          "handleFailureInFunction_file_lineNumber_description_",
          "currentHandler"
        ]
      },
      "NSAttributedString": {
        "className": "NSAttributedString",
        "methodNames": [
          "enumerateAttributesInRange_options_usingBlock_",
          "isEqualToAttributedString_",
          "initWithString_",
          "attribute_atIndex_effectiveRange_",
          "enumerateAttribute_inRange_options_usingBlock_",
          "initWithAttributedString_",
          "attribute_atIndex_longestEffectiveRange_inRange_",
          "attributesAtIndex_effectiveRange_",
          "initWithString_attributes_",
          "attributedSubstringFromRange_",
          "attributesAtIndex_longestEffectiveRange_inRange_"
        ]
      },
      "NSHTTPCookieStorage": {
        "className": "NSHTTPCookieStorage",
        "methodNames": [
          "sharedCookieStorageForGroupContainerIdentifier_",
          "storeCookies_forTask_",
          "setCookie_",
          "removeCookiesSinceDate_",
          "sharedHTTPCookieStorage",
          "deleteCookie_",
          "sortedCookiesUsingDescriptors_",
          "getCookiesForTask_completionHandler_",
          "cookiesForURL_",
          "setCookies_forURL_mainDocumentURL_"
        ]
      },
      "NSInvocation": {
        "className": "NSInvocation",
        "methodNames": [
          "getReturnValue_",
          "invocationWithMethodSignature_",
          "setArgument_atIndex_",
          "invoke",
          "getArgument_atIndex_",
          "setReturnValue_",
          "invokeWithTarget_",
          "retainArguments"
        ]
      },
      "NSNumber": {
        "className": "NSNumber",
        "methodNames": [
          "initWithChar_",
          "initWithLongLong_",
          "initWithCoder_",
          "numberWithInt_",
          "initWithUnsignedChar_",
          "initWithShort_",
          "numberWithUnsignedInteger_",
          "numberWithShort_",
          "initWithDouble_",
          "isEqualToNumber_",
          "numberWithUnsignedShort_",
          "compare_",
          "numberWithBool_",
          "numberWithLongLong_",
          "numberWithLong_",
          "initWithInt_",
          "numberWithUnsignedLong_",
          "descriptionWithLocale_",
          "initWithUnsignedLongLong_",
          "numberWithUnsignedInt_",
          "initWithUnsignedLong_",
          "initWithFloat_",
          "numberWithInteger_",
          "numberWithDouble_",
          "initWithUnsignedInteger_",
          "initWithUnsignedShort_",
          "numberWithUnsignedChar_",
          "numberWithFloat_",
          "initWithBool_",
          "numberWithUnsignedLongLong_",
          "numberWithChar_",
          "initWithUnsignedInt_",
          "initWithLong_",
          "initWithInteger_"
        ]
      },
      "NSSortDescriptor": {
        "className": "NSSortDescriptor",
        "methodNames": [
          "sortDescriptorWithKey_ascending_",
          "initWithKey_ascending_selector_",
          "sortDescriptorWithKey_ascending_comparator_",
          "initWithKey_ascending_",
          "compareObject_toObject_",
          "initWithCoder_",
          "sortDescriptorWithKey_ascending_selector_",
          "allowEvaluation",
          "initWithKey_ascending_comparator_"
        ]
      },
      "NSNumberFormatter": {
        "className": "NSNumberFormatter",
        "methodNames": [
          "stringFromNumber_",
          "localizedStringFromNumber_numberStyle_",
          "setDefaultFormatterBehavior_",
          "getObjectValue_forString_range_error_",
          "numberFromString_",
          "defaultFormatterBehavior"
        ]
      },
      "NSFileSecurity": {
        "className": "NSFileSecurity",
        "methodNames": [
          "initWithCoder_"
        ]
      },
      "NSMutableArray": {
        "className": "NSMutableArray",
        "methodNames": [
          "replaceObjectAtIndex_withObject_",
          "removeObjectIdenticalTo_inRange_",
          "insertObject_atIndex_",
          "initWithContentsOfURL_",
          "initWithCoder_",
          "removeObject_",
          "insertObjects_atIndexes_",
          "removeObject_inRange_",
          "addObject_",
          "filterUsingPredicate_",
          "sortUsingComparator_",
          "sortUsingSelector_",
          "removeObjectAtIndex_",
          "initWithCapacity_",
          "removeObjectIdenticalTo_",
          "exchangeObjectAtIndex_withObjectAtIndex_",
          "init",
          "replaceObjectsInRange_withObjectsFromArray_",
          "sortUsingFunction_context_",
          "removeLastObject",
          "setArray_",
          "removeAllObjects",
          "arrayWithContentsOfURL_",
          "removeObjectsInArray_",
          "replaceObjectsAtIndexes_withObjects_",
          "initWithContentsOfFile_",
          "removeObjectsFromIndices_numIndices_",
          "arrayWithContentsOfFile_",
          "replaceObjectsInRange_withObjectsFromArray_range_",
          "arrayWithCapacity_",
          "sortUsingDescriptors_",
          "removeObjectsAtIndexes_",
          "removeObjectsInRange_",
          "setObject_atIndexedSubscript_",
          "sortWithOptions_usingComparator_",
          "addObjectsFromArray_"
        ]
      },
      "NSURLCache": {
        "className": "NSURLCache",
        "methodNames": [
          "sharedURLCache",
          "storeCachedResponse_forRequest_",
          "removeCachedResponseForRequest_",
          "removeCachedResponseForDataTask_",
          "getCachedResponseForDataTask_completionHandler_",
          "storeCachedResponse_forDataTask_",
          "initWithMemoryCapacity_diskCapacity_diskPath_",
          "cachedResponseForRequest_",
          "removeAllCachedResponses",
          "removeCachedResponsesSinceDate_",
          "setSharedURLCache_"
        ]
      },
      "NSValueTransformer": {
        "className": "NSValueTransformer",
        "methodNames": [
          "valueTransformerNames",
          "transformedValueClass",
          "reverseTransformedValue_",
          "setValueTransformer_forName_",
          "transformedValue_",
          "allowsReverseTransformation",
          "valueTransformerForName_"
        ]
      },
      "NSHTTPURLResponse": {
        "className": "NSHTTPURLResponse",
        "methodNames": [
          "localizedStringForStatusCode_",
          "initWithURL_statusCode_HTTPVersion_headerFields_"
        ]
      },
      "NSOperationQueue": {
        "className": "NSOperationQueue",
        "methodNames": [
          "addOperation_"
        ]
      },
      "NSLengthFormatter": {
        "className": "NSLengthFormatter",
        "methodNames": [
          "stringFromMeters_",
          "unitStringFromValue_unit_",
          "getObjectValue_forString_errorDescription_",
          "stringFromValue_unit_",
          "unitStringFromMeters_usedUnit_"
        ]
      },
      "NSExtensionItem": {
        "className": "NSExtensionItem",
        "methodNames": []
      },
      "NSMetadataQueryResultGroup": {
        "className": "NSMetadataQueryResultGroup",
        "methodNames": [
          "resultAtIndex_"
        ]
      },
      "NSFileAccessIntent": {
        "className": "NSFileAccessIntent",
        "methodNames": [
          "readingIntentWithURL_options_",
          "writingIntentWithURL_options_"
        ]
      },
      "NSDirectoryEnumerator": {
        "className": "NSDirectoryEnumerator",
        "methodNames": [
          "skipDescendents",
          "skipDescendants"
        ]
      },
      "NSFileVersion": {
        "className": "NSFileVersion",
        "methodNames": [
          "currentVersionOfItemAtURL_"
        ]
      },
      "NSMachPort": {
        "className": "NSMachPort",
        "methodNames": [
          "delegate",
          "removeFromRunLoop_forMode_",
          "scheduleInRunLoop_forMode_",
          "portWithMachPort_options_",
          "initWithMachPort_options_",
          "initWithMachPort_",
          "portWithMachPort_",
          "setDelegate_"
        ]
      },
      "NSThread": {
        "className": "NSThread",
        "methodNames": [
          "isMainThread",
          "cancel",
          "detachNewThreadSelector_toTarget_withObject_",
          "mainThread",
          "init",
          "currentThread",
          "callStackSymbols",
          "isMultiThreaded",
          "start",
          "main",
          "threadPriority",
          "callStackReturnAddresses",
          "initWithTarget_selector_object_",
          "exit",
          "setThreadPriority_",
          "sleepUntilDate_",
          "sleepForTimeInterval_"
        ]
      },
      "NSProgress": {
        "className": "NSProgress",
        "methodNames": [
          "currentProgress",
          "cancel",
          "resume",
          "becomeCurrentWithPendingUnitCount_",
          "initWithParent_userInfo_",
          "setUserInfoObject_forKey_",
          "addSubscriberForFileURL_withPublishingHandler_",
          "removeSubscriber_",
          "pause",
          "resignCurrent",
          "unpublish",
          "publish",
          "progressWithTotalUnitCount_",
          "discreteProgressWithTotalUnitCount_",
          "addChild_withPendingUnitCount_",
          "progressWithTotalUnitCount_parent_pendingUnitCount_"
        ]
      },
      "NSSimpleCString": {
        "className": "NSSimpleCString",
        "methodNames": []
      },
      "NSURLSessionDataTask": {
        "className": "NSURLSessionDataTask",
        "methodNames": []
      },
      "NSPurgeableData": {
        "className": "NSPurgeableData",
        "methodNames": []
      },
      "NSMutableData": {
        "className": "NSMutableData",
        "methodNames": [
          "appendBytes_length_",
          "replaceBytesInRange_withBytes_length_",
          "appendData_",
          "resetBytesInRange_",
          "increaseLengthBy_",
          "setData_",
          "dataWithCapacity_",
          "dataWithLength_",
          "replaceBytesInRange_withBytes_",
          "initWithLength_",
          "initWithCapacity_"
        ]
      },
      "NSDecimalNumber": {
        "className": "NSDecimalNumber",
        "methodNames": [
          "notANumber",
          "decimalNumberByRoundingAccordingToBehavior_",
          "initWithDecimal_",
          "decimalNumberBySubtracting_withBehavior_",
          "initWithString_locale_",
          "minimumDecimalNumber",
          "decimalNumberByAdding_",
          "decimalNumberWithString_locale_",
          "zero",
          "decimalNumberByMultiplyingByPowerOf10_",
          "defaultBehavior",
          "decimalNumberWithMantissa_exponent_isNegative_",
          "compare_",
          "decimalNumberByMultiplyingBy_",
          "decimalNumberBySubtracting_",
          "decimalNumberWithDecimal_",
          "setDefaultBehavior_",
          "descriptionWithLocale_",
          "decimalNumberByMultiplyingBy_withBehavior_",
          "maximumDecimalNumber",
          "decimalNumberByDividingBy_",
          "decimalNumberByRaisingToPower_withBehavior_",
          "one",
          "initWithMantissa_exponent_isNegative_",
          "decimalNumberByMultiplyingByPowerOf10_withBehavior_",
          "initWithString_",
          "decimalNumberByAdding_withBehavior_",
          "decimalNumberWithString_",
          "decimalNumberByRaisingToPower_",
          "decimalNumberByDividingBy_withBehavior_"
        ]
      },
      "NSBlockOperation": {
        "className": "NSBlockOperation",
        "methodNames": [
          "blockOperationWithBlock_"
        ]
      },
      "NSUbiquitousKeyValueStore": {
        "className": "NSUbiquitousKeyValueStore",
        "methodNames": [
          "removeObjectForKey_",
          "stringForKey_",
          "setDouble_forKey_",
          "dictionaryForKey_",
          "setLongLong_forKey_",
          "boolForKey_",
          "setData_forKey_",
          "setBool_forKey_",
          "objectForKey_",
          "doubleForKey_",
          "arrayForKey_",
          "setString_forKey_",
          "defaultStore",
          "longLongForKey_",
          "setDictionary_forKey_",
          "setObject_forKey_",
          "dataForKey_",
          "setArray_forKey_",
          "synchronize"
        ]
      },
      "NSFileHandle": {
        "className": "NSFileHandle",
        "methodNames": [
          "writeData_",
          "fileHandleForUpdatingAtPath_",
          "initWithCoder_",
          "fileHandleWithNullDevice",
          "seekToEndOfFile",
          "fileHandleForReadingFromURL_error_",
          "synchronizeFile",
          "seekToFileOffset_",
          "fileHandleForReadingAtPath_",
          "initWithFileDescriptor_",
          "fileHandleForWritingAtPath_",
          "truncateFileAtOffset_",
          "fileHandleForWritingToURL_error_",
          "waitForDataInBackgroundAndNotify",
          "fileHandleWithStandardInput",
          "readToEndOfFileInBackgroundAndNotifyForModes_",
          "fileHandleForUpdatingURL_error_",
          "closeFile",
          "initWithFileDescriptor_closeOnDealloc_",
          "readDataToEndOfFile",
          "fileHandleWithStandardError",
          "readDataOfLength_",
          "acceptConnectionInBackgroundAndNotifyForModes_",
          "readToEndOfFileInBackgroundAndNotify",
          "acceptConnectionInBackgroundAndNotify",
          "waitForDataInBackgroundAndNotifyForModes_",
          "readInBackgroundAndNotifyForModes_",
          "readInBackgroundAndNotify",
          "fileHandleWithStandardOutput"
        ]
      },
      "NSMutableOrderedSet": {
        "className": "NSMutableOrderedSet",
        "methodNames": [
          "replaceObjectAtIndex_withObject_",
          "minusSet_",
          "insertObject_atIndex_",
          "initWithCoder_",
          "removeObject_",
          "insertObjects_atIndexes_",
          "replaceObjectsInRange_withObjects_count_",
          "unionOrderedSet_",
          "orderedSetWithCapacity_",
          "minusOrderedSet_",
          "addObject_",
          "filterUsingPredicate_",
          "addObjects_count_",
          "sortUsingComparator_",
          "removeObjectAtIndex_",
          "initWithCapacity_",
          "exchangeObjectAtIndex_withObjectAtIndex_",
          "init",
          "intersectSet_",
          "intersectOrderedSet_",
          "moveObjectsAtIndexes_toIndex_",
          "sortRange_options_usingComparator_",
          "removeAllObjects",
          "removeObjectsInArray_",
          "replaceObjectsAtIndexes_withObjects_",
          "setObject_atIndex_",
          "sortUsingDescriptors_",
          "removeObjectsAtIndexes_",
          "removeObjectsInRange_",
          "setObject_atIndexedSubscript_",
          "sortWithOptions_usingComparator_",
          "unionSet_",
          "addObjectsFromArray_"
        ]
      },
      "NSObject": {
        "className": "NSObject",
        "methodNames": [
          "storedValueForKey_",
          "takeStoredValue_forKey_",
          "poseAsClass_",
          "setValue_forUndefinedKey_",
          "handleTakeValue_forUnboundKey_",
          "useStoredAccessor",
          "dictionaryWithValuesForKeys_",
          "mutableSetValueForKey_",
          "performSelector_onThread_withObject_waitUntilDone_modes_",
          "validateValue_forKeyPath_error_",
          "mutableOrderedSetValueForKeyPath_",
          "URLResourceDidCancelLoading_",
          "takeValue_forKeyPath_",
          "performSelector_withObject_afterDelay_inModes_",
          "classForKeyedUnarchiver",
          "setValue_forKeyPath_",
          "fileManager_willProcessPath_",
          "setKeys_triggerChangeNotificationsForDependentKey_",
          "awakeAfterUsingCoder_",
          "handleQueryWithUnboundKey_",
          "performSelectorOnMainThread_withObject_waitUntilDone_",
          "valuesForKeys_",
          "removeObserver_forKeyPath_context_",
          "setValue_forKey_",
          "version",
          "cancelPreviousPerformRequestsWithTarget_selector_object_",
          "accessInstanceVariablesDirectly",
          "mutableArrayValueForKey_",
          "willChangeValueForKey_",
          "automaticallyNotifiesObserversForKey_",
          "fileManager_shouldProceedAfterError_",
          "mutableSetValueForKeyPath_",
          "mutableArrayValueForKeyPath_",
          "removeObserver_forKeyPath_",
          "URLResourceDidFinishLoading_",
          "performSelectorInBackground_withObject_",
          "performSelector_onThread_withObject_waitUntilDone_",
          "takeValue_forKey_",
          "URL_resourceDataDidBecomeAvailable_",
          "setVersion_",
          "didChangeValueForKey_withSetMutation_usingObjects_",
          "setValuesForKeysWithDictionary_",
          "attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_",
          "didChange_valuesAtIndexes_forKey_",
          "performSelectorOnMainThread_withObject_waitUntilDone_modes_",
          "addObserver_forKeyPath_options_context_",
          "valueForKeyPath_",
          "observeValueForKeyPath_ofObject_change_context_",
          "replacementObjectForKeyedArchiver_",
          "didChangeValueForKey_",
          "classFallbacksForKeyedArchiver",
          "attemptRecoveryFromError_optionIndex_",
          "takeValuesFromDictionary_",
          "performSelector_withObject_afterDelay_",
          "cancelPreviousPerformRequestsWithTarget_",
          "keyPathsForValuesAffectingValueForKey_",
          "replacementObjectForCoder_",
          "unableToSetNilForKey_",
          "mutableOrderedSetValueForKey_",
          "willChangeValueForKey_withSetMutation_usingObjects_",
          "setNilValueForKey_",
          "valueForKey_",
          "validateValue_forKey_error_",
          "valueForUndefinedKey_",
          "willChange_valuesAtIndexes_forKey_",
          "URL_resourceDidFailLoadingWithReason_"
        ]
      },
      "NSPipe": {
        "className": "NSPipe",
        "methodNames": [
          "pipe"
        ]
      },
      "NSPointerFunctions": {
        "className": "NSPointerFunctions",
        "methodNames": [
          "initWithOptions_",
          "pointerFunctionsWithOptions_"
        ]
      },
      "NSMessagePort": {
        "className": "NSMessagePort",
        "methodNames": []
      },
      "NSData": {
        "className": "NSData",
        "methodNames": [
          "initWithBase64EncodedData_options_",
          "initWithBase64Encoding_",
          "data",
          "dataWithContentsOfMappedFile_",
          "subdataWithRange_",
          "writeToFile_options_error_",
          "rangeOfData_options_range_",
          "enumerateByteRangesUsingBlock_",
          "initWithBase64EncodedString_options_",
          "writeToFile_atomically_",
          "base64EncodedDataWithOptions_",
          "getBytes_length_",
          "writeToURL_options_error_",
          "base64EncodedStringWithOptions_",
          "base64Encoding",
          "getBytes_range_",
          "writeToURL_atomically_",
          "initWithContentsOfMappedFile_",
          "isEqualToData_",
          "getBytes_"
        ]
      },
      "NSMapTable": {
        "className": "NSMapTable",
        "methodNames": [
          "initWithKeyOptions_valueOptions_capacity_"
        ]
      },
      "NSSocketPort": {
        "className": "NSSocketPort",
        "methodNames": [
          "init",
          "initWithProtocolFamily_socketType_protocol_address_",
          "initWithTCPPort_",
          "initWithProtocolFamily_socketType_protocol_socket_",
          "initRemoteWithTCPPort_host_",
          "initRemoteWithProtocolFamily_socketType_protocol_address_"
        ]
      },
      "NSCoder": {
        "className": "NSCoder",
        "methodNames": [
          "decodeValueOfObjCType_at_",
          "decodeNXObject",
          "encodeObject_",
          "versionForClassName_",
          "encodeNXObject_",
          "encodeValueOfObjCType_at_",
          "decodeDataObject",
          "encodeDataObject_"
        ]
      },
      "NSMetadataItem": {
        "className": "NSMetadataItem",
        "methodNames": [
          "initWithURL_"
        ]
      },
      "NSProxy": {
        "className": "NSProxy",
        "methodNames": [
          "alloc"
        ]
      },
      "NSMutableAttributedString": {
        "className": "NSMutableAttributedString",
        "methodNames": [
          "appendAttributedString_",
          "setAttributedString_",
          "beginEditing",
          "replaceCharactersInRange_withString_",
          "addAttributes_range_",
          "replaceCharactersInRange_withAttributedString_",
          "insertAttributedString_atIndex_",
          "deleteCharactersInRange_",
          "endEditing",
          "removeAttribute_range_",
          "setAttributes_range_",
          "addAttribute_value_range_"
        ]
      },
      "NSOrthography": {
        "className": "NSOrthography",
        "methodNames": [
          "languagesForScript_",
          "orthographyWithDominantScript_languageMap_",
          "dominantLanguageForScript_"
        ]
      },
      "NSMutableURLRequest": {
        "className": "NSMutableURLRequest",
        "methodNames": [
          "addValue_forHTTPHeaderField_",
          "setValue_forHTTPHeaderField_"
        ]
      },
      "NSFileCoordinator": {
        "className": "NSFileCoordinator",
        "methodNames": [
          "addFilePresenter_"
        ]
      },
      "NSMassFormatter": {
        "className": "NSMassFormatter",
        "methodNames": [
          "unitStringFromValue_unit_",
          "getObjectValue_forString_errorDescription_",
          "stringFromValue_unit_",
          "stringFromKilograms_",
          "unitStringFromKilograms_usedUnit_"
        ]
      },
      "NSUUID": {
        "className": "NSUUID",
        "methodNames": [
          "initWithUUIDString_",
          "init",
          "getUUIDBytes_",
          "initWithUUIDBytes_",
          "UUID"
        ]
      },
      "NSNetService": {
        "className": "NSNetService",
        "methodNames": [
          "initWithDomain_type_name_",
          "stopMonitoring",
          "startMonitoring",
          "resolve",
          "dataFromTXTRecordDictionary_",
          "dictionaryFromTXTRecordData_",
          "removeFromRunLoop_forMode_",
          "scheduleInRunLoop_forMode_",
          "stop",
          "getInputStream_outputStream_",
          "initWithDomain_type_name_port_",
          "publish",
          "TXTRecordData",
          "setTXTRecordData_",
          "publishWithOptions_",
          "resolveWithTimeout_"
        ]
      },
      "NSUserDefaults": {
        "className": "NSUserDefaults",
        "methodNames": [
          "setURL_forKey_",
          "setDouble_forKey_",
          "dictionaryForKey_",
          "setInteger_forKey_",
          "setBool_forKey_",
          "persistentDomainNames",
          "objectForKey_",
          "registerDefaults_",
          "removeVolatileDomainForName_",
          "floatForKey_",
          "volatileDomainForName_",
          "objectIsForcedForKey_",
          "URLForKey_",
          "removePersistentDomainForName_",
          "addSuiteNamed_",
          "initWithSuiteName_",
          "setFloat_forKey_",
          "persistentDomainForName_",
          "synchronize",
          "init",
          "removeObjectForKey_",
          "stringForKey_",
          "stringArrayForKey_",
          "boolForKey_",
          "initWithUser_",
          "resetStandardUserDefaults",
          "doubleForKey_",
          "arrayForKey_",
          "setPersistentDomain_forName_",
          "standardUserDefaults",
          "integerForKey_",
          "setVolatileDomain_forName_",
          "removeSuiteNamed_",
          "setObject_forKey_",
          "dataForKey_",
          "dictionaryRepresentation",
          "objectIsForcedForKey_inDomain_"
        ]
      },
      "NSHashTable": {
        "className": "NSHashTable",
        "methodNames": [
          "initWithOptions_capacity_"
        ]
      },
      "NSNetServiceBrowser": {
        "className": "NSNetServiceBrowser",
        "methodNames": [
          "removeFromRunLoop_forMode_",
          "searchForRegistrationDomains",
          "init",
          "scheduleInRunLoop_forMode_",
          "stop",
          "searchForServicesOfType_inDomain_",
          "searchForBrowsableDomains"
        ]
      },
      "NSStream": {
        "className": "NSStream",
        "methodNames": [
          "removeFromRunLoop_forMode_",
          "getStreamsToHostWithName_port_inputStream_outputStream_",
          "getBoundStreamsWithBufferSize_inputStream_outputStream_",
          "setProperty_forKey_",
          "scheduleInRunLoop_forMode_",
          "propertyForKey_",
          "close",
          "open"
        ]
      },
      "NSDate": {
        "className": "NSDate",
        "methodNames": [
          "date",
          "initWithTimeIntervalSinceNow_",
          "init",
          "descriptionWithLocale_",
          "initWithTimeIntervalSince1970_",
          "initWithTimeIntervalSinceReferenceDate_",
          "distantPast",
          "earlierDate_",
          "initWithCoder_",
          "isEqualToDate_",
          "initWithTimeInterval_sinceDate_",
          "addTimeInterval_",
          "distantFuture",
          "timeIntervalSinceDate_",
          "dateByAddingTimeInterval_",
          "dateWithTimeIntervalSinceNow_",
          "dateWithTimeIntervalSinceReferenceDate_",
          "dateWithTimeInterval_sinceDate_",
          "timeIntervalSinceReferenceDate",
          "laterDate_",
          "compare_",
          "dateWithTimeIntervalSince1970_"
        ]
      },
      "NSMutableIndexSet": {
        "className": "NSMutableIndexSet",
        "methodNames": [
          "addIndexes_",
          "removeAllIndexes",
          "addIndexesInRange_",
          "removeIndexesInRange_",
          "removeIndex_",
          "removeIndexes_",
          "addIndex_",
          "shiftIndexesStartingAtIndex_by_"
        ]
      },
      "NSPredicate": {
        "className": "NSPredicate",
        "methodNames": [
          "predicateWithFormat_argumentArray_"
        ]
      },
      "NSURLSessionDownloadTask": {
        "className": "NSURLSessionDownloadTask",
        "methodNames": [
          "cancelByProducingResumeData_"
        ]
      },
      "NSCalendar": {
        "className": "NSCalendar",
        "methodNames": [
          "currentCalendar"
        ]
      },
      "NSEnergyFormatter": {
        "className": "NSEnergyFormatter",
        "methodNames": [
          "stringFromJoules_",
          "unitStringFromJoules_usedUnit_",
          "unitStringFromValue_unit_",
          "getObjectValue_forString_errorDescription_",
          "stringFromValue_unit_"
        ]
      },
      "NSNotificationCenter": {
        "className": "NSNotificationCenter",
        "methodNames": [
          "postNotification_",
          "postNotificationName_object_userInfo_",
          "addObserverForName_object_queue_usingBlock_",
          "postNotificationName_object_",
          "removeObserver_",
          "addObserver_selector_name_object_",
          "defaultCenter",
          "removeObserver_name_object_"
        ]
      },
      "NSPointerArray": {
        "className": "NSPointerArray",
        "methodNames": [
          "initWithOptions_",
          "pointerAtIndex_",
          "compact",
          "pointerArrayWithStrongObjects",
          "addPointer_",
          "removePointerAtIndex_",
          "pointerArrayWithPointerFunctions_",
          "insertPointer_atIndex_",
          "initWithPointerFunctions_",
          "pointerArrayWithOptions_",
          "replacePointerAtIndex_withPointer_"
        ]
      },
      "NSURLCredentialStorage": {
        "className": "NSURLCredentialStorage",
        "methodNames": [
          "getCredentialsForProtectionSpace_task_completionHandler_",
          "setCredential_forProtectionSpace_task_",
          "setDefaultCredential_forProtectionSpace_task_",
          "getDefaultCredentialForProtectionSpace_task_completionHandler_",
          "sharedCredentialStorage",
          "removeCredential_forProtectionSpace_options_task_"
        ]
      },
      "NSDateComponentsFormatter": {
        "className": "NSDateComponentsFormatter",
        "methodNames": [
          "stringFromDate_toDate_",
          "stringFromTimeInterval_",
          "getObjectValue_forString_errorDescription_",
          "stringFromDateComponents_",
          "localizedStringFromDateComponents_unitsStyle_",
          "stringForObjectValue_"
        ]
      },
      "NSMutableCharacterSet": {
        "className": "NSMutableCharacterSet",
        "methodNames": [
          "punctuationCharacterSet",
          "characterSetWithCharactersInString_",
          "removeCharactersInRange_",
          "addCharactersInString_",
          "letterCharacterSet",
          "illegalCharacterSet",
          "decimalDigitCharacterSet",
          "controlCharacterSet",
          "formIntersectionWithCharacterSet_",
          "symbolCharacterSet",
          "removeCharactersInString_",
          "alphanumericCharacterSet",
          "characterSetWithBitmapRepresentation_",
          "formUnionWithCharacterSet_",
          "nonBaseCharacterSet",
          "decomposableCharacterSet",
          "invert",
          "whitespaceCharacterSet",
          "whitespaceAndNewlineCharacterSet",
          "newlineCharacterSet",
          "capitalizedLetterCharacterSet",
          "characterSetWithContentsOfFile_",
          "characterSetWithRange_",
          "addCharactersInRange_",
          "uppercaseLetterCharacterSet",
          "lowercaseLetterCharacterSet"
        ]
      },
      "NSXMLParser": {
        "className": "NSXMLParser",
        "methodNames": [
          "initWithStream_",
          "initWithData_",
          "initWithContentsOfURL_",
          "abortParsing",
          "parse"
        ]
      },
      "NSComparisonPredicate": {
        "className": "NSComparisonPredicate",
        "methodNames": [
          "predicateWithLeftExpression_rightExpression_customSelector_",
          "initWithLeftExpression_rightExpression_modifier_type_options_",
          "predicateWithLeftExpression_rightExpression_modifier_type_options_",
          "initWithCoder_",
          "initWithLeftExpression_rightExpression_customSelector_"
        ]
      },
      "NSItemProvider": {
        "className": "NSItemProvider",
        "methodNames": [
          "registerItemForTypeIdentifier_loadHandler_",
          "loadItemForTypeIdentifier_options_completionHandler_",
          "initWithItem_typeIdentifier_",
          "initWithContentsOfURL_",
          "hasItemConformingToTypeIdentifier_",
          "loadPreviewImageWithOptions_completionHandler_"
        ]
      },
      "NSInvocationOperation": {
        "className": "NSInvocationOperation",
        "methodNames": [
          "initWithTarget_selector_object_",
          "initWithInvocation_"
        ]
      },
      "NSBundleResourceRequest": {
        "className": "NSBundleResourceRequest",
        "methodNames": [
          "init",
          "endAccessingResources",
          "beginAccessingResourcesWithCompletionHandler_",
          "conditionallyBeginAccessingResourcesWithCompletionHandler_",
          "initWithTags_",
          "initWithTags_bundle_"
        ]
      },
      "NSConstantString": {
        "className": "NSConstantString",
        "methodNames": []
      }
    }
  },
  "iAd.framework": {
    "frameworkName": "iAd.framework",
    "classes": {
      "UIViewController": {
        "className": "UIViewController",
        "methodNames": [
          "prepareInterstitialAds"
        ]
      },
      "ADClient": {
        "className": "ADClient",
        "methodNames": [
          "sharedClient"
        ]
      },
      "ADInterstitialAd": {
        "className": "ADInterstitialAd",
        "methodNames": []
      },
      "AVPlayerViewController": {
        "className": "AVPlayerViewController",
        "methodNames": [
          "preparePrerollAds"
        ]
      },
      "MPMoviePlayerController": {
        "className": "MPMoviePlayerController",
        "methodNames": [
          "preparePrerollAds"
        ]
      },
      "ADBannerView": {
        "className": "ADBannerView",
        "methodNames": [
          "initWithAdType_"
        ]
      }
    }
  },
  "MetalPerformanceShaders.framework": {
    "frameworkName": "MetalPerformanceShaders.framework",
    "classes": {
      "MPSImageThresholdBinaryInverse": {
        "className": "MPSImageThresholdBinaryInverse",
        "methodNames": [
          "initWithDevice_thresholdValue_maximumValue_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      },
      "MPSImageErode": {
        "className": "MPSImageErode",
        "methodNames": []
      },
      "MPSImageTent": {
        "className": "MPSImageTent",
        "methodNames": []
      },
      "MPSImageAreaMax": {
        "className": "MPSImageAreaMax",
        "methodNames": [
          "initWithDevice_kernelWidth_kernelHeight_",
          "initWithDevice_"
        ]
      },
      "MPSImageGaussianBlur": {
        "className": "MPSImageGaussianBlur",
        "methodNames": [
          "initWithDevice_sigma_",
          "initWithDevice_"
        ]
      },
      "MPSImageHistogram": {
        "className": "MPSImageHistogram",
        "methodNames": [
          "histogramSizeForSourceFormat_",
          "encodeToCommandBuffer_sourceTexture_histogram_histogramOffset_",
          "initWithDevice_histogramInfo_"
        ]
      },
      "MPSImageIntegral": {
        "className": "MPSImageIntegral",
        "methodNames": []
      },
      "MPSImageTranspose": {
        "className": "MPSImageTranspose",
        "methodNames": []
      },
      "MPSBinaryImageKernel": {
        "className": "MPSBinaryImageKernel",
        "methodNames": [
          "encodeToCommandBuffer_primaryTexture_inPlaceSecondaryTexture_fallbackCopyAllocator_",
          "encodeToCommandBuffer_primaryTexture_secondaryTexture_destinationTexture_",
          "encodeToCommandBuffer_inPlacePrimaryTexture_secondaryTexture_fallbackCopyAllocator_",
          "secondarySourceRegionForDestinationSize_",
          "primarySourceRegionForDestinationSize_"
        ]
      },
      "MPSImageThresholdBinary": {
        "className": "MPSImageThresholdBinary",
        "methodNames": [
          "initWithDevice_thresholdValue_maximumValue_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      },
      "MPSImageConvolution": {
        "className": "MPSImageConvolution",
        "methodNames": [
          "initWithDevice_kernelWidth_kernelHeight_weights_"
        ]
      },
      "MPSImageLanczosScale": {
        "className": "MPSImageLanczosScale",
        "methodNames": []
      },
      "MPSImageIntegralOfSquares": {
        "className": "MPSImageIntegralOfSquares",
        "methodNames": []
      },
      "MPSImageThresholdToZero": {
        "className": "MPSImageThresholdToZero",
        "methodNames": [
          "initWithDevice_thresholdValue_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      },
      "MPSImageAreaMin": {
        "className": "MPSImageAreaMin",
        "methodNames": []
      },
      "MPSImageThresholdToZeroInverse": {
        "className": "MPSImageThresholdToZeroInverse",
        "methodNames": [
          "initWithDevice_thresholdValue_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      },
      "MPSImageHistogramEqualization": {
        "className": "MPSImageHistogramEqualization",
        "methodNames": [
          "encodeTransformToCommandBuffer_sourceTexture_histogram_histogramOffset_",
          "initWithDevice_histogramInfo_"
        ]
      },
      "MPSUnaryImageKernel": {
        "className": "MPSUnaryImageKernel",
        "methodNames": [
          "sourceRegionForDestinationSize_",
          "encodeToCommandBuffer_inPlaceTexture_fallbackCopyAllocator_",
          "encodeToCommandBuffer_sourceTexture_destinationTexture_"
        ]
      },
      "MPSImageMedian": {
        "className": "MPSImageMedian",
        "methodNames": [
          "initWithDevice_kernelDiameter_",
          "maxKernelDiameter",
          "minKernelDiameter",
          "initWithDevice_"
        ]
      },
      "MPSImageBox": {
        "className": "MPSImageBox",
        "methodNames": [
          "initWithDevice_kernelWidth_kernelHeight_",
          "initWithDevice_"
        ]
      },
      "MPSImageDilate": {
        "className": "MPSImageDilate",
        "methodNames": [
          "initWithDevice_kernelWidth_kernelHeight_values_",
          "initWithDevice_"
        ]
      },
      "MPSImageThresholdTruncate": {
        "className": "MPSImageThresholdTruncate",
        "methodNames": [
          "initWithDevice_thresholdValue_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      },
      "MPSKernel": {
        "className": "MPSKernel",
        "methodNames": [
          "copyWithZone_device_",
          "initWithDevice_"
        ]
      },
      "MPSImageHistogramSpecification": {
        "className": "MPSImageHistogramSpecification",
        "methodNames": [
          "encodeTransformToCommandBuffer_sourceTexture_sourceHistogram_sourceHistogramOffset_desiredHistogram_desiredHistogramOffset_",
          "initWithDevice_histogramInfo_"
        ]
      },
      "MPSImageSobel": {
        "className": "MPSImageSobel",
        "methodNames": [
          "initWithDevice_linearGrayColorTransform_",
          "initWithDevice_"
        ]
      }
    }
  },
  "SpriteKit.framework": {
    "frameworkName": "SpriteKit.framework",
    "classes": {
      "SKConstraint": {
        "className": "SKConstraint",
        "methodNames": [
          "positionX_",
          "distance_toPoint_",
          "orientToPoint_offset_",
          "orientToPoint_inNode_offset_",
          "distance_toNode_",
          "distance_toPoint_inNode_",
          "orientToNode_offset_",
          "zRotation_",
          "positionY_",
          "positionX_Y_"
        ]
      },
      "SKCameraNode": {
        "className": "SKCameraNode",
        "methodNames": [
          "containedNodeSet",
          "containsNode_"
        ]
      },
      "SKEffectNode": {
        "className": "SKEffectNode",
        "methodNames": []
      },
      "SKPhysicsWorld": {
        "className": "SKPhysicsWorld",
        "methodNames": [
          "addJoint_",
          "bodyAlongRayStart_end_",
          "removeJoint_",
          "enumerateBodiesAtPoint_usingBlock_",
          "sampleFieldsAt_",
          "enumerateBodiesAlongRayStart_end_usingBlock_",
          "bodyAtPoint_",
          "removeAllJoints",
          "bodyInRect_",
          "enumerateBodiesInRect_usingBlock_"
        ]
      },
      "SKRegion": {
        "className": "SKRegion",
        "methodNames": [
          "initWithPath_",
          "containsPoint_",
          "initWithRadius_",
          "regionByUnionWithRegion_",
          "initWithSize_",
          "infiniteRegion",
          "inverseRegion",
          "regionByDifferenceFromRegion_",
          "regionByIntersectionWithRegion_"
        ]
      },
      "SKAudioNode": {
        "className": "SKAudioNode",
        "methodNames": [
          "initWithCoder_",
          "initWithAVAudioNode_",
          "initWithURL_",
          "initWithFileNamed_"
        ]
      },
      "SKNode": {
        "className": "SKNode",
        "methodNames": [
          "obstaclesFromSpriteTextures_accuracy_",
          "obstaclesFromNodePhysicsBodies_",
          "nodesAtPoint_",
          "isEqualToNode_",
          "objectForKeyedSubscript_",
          "convertPoint_fromNode_",
          "initWithCoder_",
          "removeChildrenInArray_",
          "enumerateChildNodesWithName_usingBlock_",
          "insertChild_atIndex_",
          "inParentHierarchy_",
          "moveToParent_",
          "convertPoint_toNode_",
          "addChild_",
          "runAction_completion_",
          "removeAllActions",
          "removeActionForKey_",
          "runAction_withKey_",
          "init",
          "containsPoint_",
          "calculateAccumulatedFrame",
          "childNodeWithName_",
          "hasActions",
          "obstaclesFromNodeBounds_",
          "runAction_",
          "nodeWithFileNamed_",
          "removeAllChildren",
          "intersectsNode_",
          "node",
          "removeFromParent",
          "nodeAtPoint_",
          "setScale_",
          "actionForKey_"
        ]
      },
      "SKReferenceNode": {
        "className": "SKReferenceNode",
        "methodNames": [
          "didLoadReferenceNode_",
          "referenceNodeWithFileNamed_",
          "initWithCoder_",
          "referenceNodeWithURL_",
          "initWithURL_",
          "initWithFileNamed_",
          "resolveReferenceNode"
        ]
      },
      "SKRange": {
        "className": "SKRange",
        "methodNames": [
          "rangeWithLowerLimit_upperLimit_",
          "rangeWithUpperLimit_",
          "initWithLowerLimit_upperLimit_",
          "rangeWithValue_variance_",
          "rangeWithNoLimits",
          "rangeWithConstantValue_",
          "rangeWithLowerLimit_"
        ]
      },
      "SKMutableTexture": {
        "className": "SKMutableTexture",
        "methodNames": [
          "mutableTextureWithSize_",
          "modifyPixelDataWithBlock_",
          "initWithSize_",
          "initWithSize_pixelFormat_"
        ]
      },
      "SKPhysicsJointPin": {
        "className": "SKPhysicsJointPin",
        "methodNames": [
          "jointWithBodyA_bodyB_anchor_"
        ]
      },
      "SKPhysicsJointLimit": {
        "className": "SKPhysicsJointLimit",
        "methodNames": [
          "jointWithBodyA_bodyB_anchorA_anchorB_"
        ]
      },
      "UITouch": {
        "className": "UITouch",
        "methodNames": [
          "locationInNode_",
          "previousLocationInNode_"
        ]
      },
      "NSEvent": {
        "className": "NSEvent",
        "methodNames": [
          "locationInNode_"
        ]
      },
      "SKPhysicsJointSliding": {
        "className": "SKPhysicsJointSliding",
        "methodNames": [
          "jointWithBodyA_bodyB_anchor_axis_"
        ]
      },
      "SKCropNode": {
        "className": "SKCropNode",
        "methodNames": []
      },
      "SKPhysicsJointSpring": {
        "className": "SKPhysicsJointSpring",
        "methodNames": [
          "jointWithBodyA_bodyB_anchorA_anchorB_"
        ]
      },
      "SKShader": {
        "className": "SKShader",
        "methodNames": [
          "initWithSource_uniforms_",
          "shader",
          "removeUniformNamed_",
          "shaderWithSource_",
          "shaderWithSource_uniforms_",
          "shaderWithFileNamed_",
          "uniformNamed_",
          "initWithSource_",
          "addUniform_"
        ]
      },
      "SKReachConstraints": {
        "className": "SKReachConstraints",
        "methodNames": [
          "initWithLowerAngleLimit_upperAngleLimit_"
        ]
      },
      "SKFieldNode": {
        "className": "SKFieldNode",
        "methodNames": [
          "springField",
          "linearGravityFieldWithVector_",
          "vortexField",
          "radialGravityField",
          "velocityFieldWithVector_",
          "turbulenceFieldWithSmoothness_animationSpeed_",
          "dragField",
          "customFieldWithEvaluationBlock_",
          "electricField",
          "magneticField",
          "noiseFieldWithSmoothness_animationSpeed_",
          "velocityFieldWithTexture_"
        ]
      },
      "SKAction": {
        "className": "SKAction",
        "methodNames": [
          "play",
          "colorizeWithColor_colorBlendFactor_duration_",
          "speedBy_duration_",
          "changeVolumeTo_duration_",
          "animateWithTextures_timePerFrame_resize_restore_",
          "reachToNode_rootNode_velocity_",
          "changePlaybackRateTo_duration_",
          "scaleXTo_y_duration_",
          "resizeToWidth_duration_",
          "applyImpulse_atPoint_duration_",
          "rotateToAngle_duration_",
          "animateWithTextures_timePerFrame_",
          "reachTo_rootNode_velocity_",
          "waitForDuration_withRange_",
          "sequence_",
          "followPath_speed_",
          "changeChargeTo_duration_",
          "moveToX_duration_",
          "repeatActionForever_",
          "actionNamed_duration_",
          "changeReverbTo_duration_",
          "fadeAlphaTo_duration_",
          "resizeToHeight_duration_",
          "scaleXBy_y_duration_",
          "pause",
          "removeFromParent",
          "changeObstructionTo_duration_",
          "stop",
          "moveByX_y_duration_",
          "falloffTo_duration_",
          "reachTo_rootNode_duration_",
          "speedTo_duration_",
          "repeatAction_count_",
          "rotateToAngle_duration_shortestUnitArc_",
          "strengthBy_duration_",
          "runAction_onChildWithName_",
          "unhide",
          "followPath_asOffset_orientToPath_duration_",
          "performSelector_onTarget_",
          "changeOcclusionTo_duration_",
          "moveBy_duration_",
          "changeMassBy_duration_",
          "scaleBy_duration_",
          "applyImpulse_duration_",
          "reversedAction",
          "actionNamed_fromURL_duration_",
          "customActionWithDuration_actionBlock_",
          "actionNamed_fromURL_",
          "applyTorque_duration_",
          "resizeToWidth_height_duration_",
          "runBlock_",
          "stereoPanTo_duration_",
          "rotateByAngle_duration_",
          "actionNamed_",
          "resizeByWidth_height_duration_",
          "changeOcclusionBy_duration_",
          "stereoPanBy_duration_",
          "moveTo_duration_",
          "setNormalTexture_",
          "animateWithNormalTextures_timePerFrame_resize_restore_",
          "scaleXTo_duration_",
          "scaleYTo_duration_",
          "animateWithNormalTextures_timePerFrame_",
          "followPath_asOffset_orientToPath_speed_",
          "strengthTo_duration_",
          "changePlaybackRateBy_duration_",
          "changeObstructionBy_duration_",
          "fadeInWithDuration_",
          "applyForce_atPoint_duration_",
          "scaleTo_duration_",
          "waitForDuration_",
          "applyForce_duration_",
          "setTexture_",
          "falloffBy_duration_",
          "applyAngularImpulse_duration_",
          "changeVolumeBy_duration_",
          "fadeAlphaBy_duration_",
          "hide",
          "followPath_duration_",
          "runBlock_queue_",
          "changeChargeBy_duration_",
          "moveToY_duration_",
          "reachToNode_rootNode_duration_",
          "changeReverbBy_duration_",
          "fadeOutWithDuration_",
          "setTexture_resize_",
          "playSoundFileNamed_waitForCompletion_",
          "group_",
          "colorizeWithColorBlendFactor_duration_",
          "setNormalTexture_resize_",
          "changeMassTo_duration_"
        ]
      },
      "SKShapeNode": {
        "className": "SKShapeNode",
        "methodNames": [
          "shapeNodeWithRectOfSize_cornerRadius_",
          "shapeNodeWithEllipseInRect_",
          "shapeNodeWithRect_cornerRadius_",
          "shapeNodeWithCircleOfRadius_",
          "shapeNodeWithPoints_count_",
          "shapeNodeWithPath_centered_",
          "shapeNodeWithSplinePoints_count_",
          "shapeNodeWithRect_",
          "shapeNodeWithRectOfSize_",
          "shapeNodeWithEllipseOfSize_",
          "shapeNodeWithPath_"
        ]
      },
      "SKVideoNode": {
        "className": "SKVideoNode",
        "methodNames": [
          "play",
          "videoNodeWithVideoURL_",
          "initWithVideoURL_",
          "videoNodeWithVideoFileNamed_",
          "initWithCoder_",
          "initWithURL_",
          "initWithFileNamed_",
          "pause",
          "videoNodeWithAVPlayer_",
          "initWithVideoFileNamed_",
          "initWithAVPlayer_",
          "videoNodeWithURL_",
          "videoNodeWithFileNamed_"
        ]
      },
      "SKSpriteNode": {
        "className": "SKSpriteNode",
        "methodNames": [
          "spriteNodeWithTexture_",
          "initWithTexture_",
          "spriteNodeWithTexture_size_",
          "initWithColor_size_",
          "initWithCoder_",
          "spriteNodeWithImageNamed_normalMapped_",
          "spriteNodeWithTexture_normalMap_",
          "initWithTexture_color_size_",
          "spriteNodeWithColor_size_",
          "initWithImageNamed_",
          "spriteNodeWithImageNamed_"
        ]
      },
      "SKTransition": {
        "className": "SKTransition",
        "methodNames": [
          "doorsOpenHorizontalWithDuration_",
          "doorsOpenVerticalWithDuration_",
          "flipHorizontalWithDuration_",
          "doorsCloseVerticalWithDuration_",
          "moveInWithDirection_duration_",
          "revealWithDirection_duration_",
          "fadeWithColor_duration_",
          "flipVerticalWithDuration_",
          "doorwayWithDuration_",
          "fadeWithDuration_",
          "doorsCloseHorizontalWithDuration_",
          "transitionWithCIFilter_duration_",
          "crossFadeWithDuration_",
          "pushWithDirection_duration_"
        ]
      },
      "SKPhysicsContact": {
        "className": "SKPhysicsContact",
        "methodNames": []
      },
      "SKPhysicsJoint": {
        "className": "SKPhysicsJoint",
        "methodNames": []
      },
      "SK3DNode": {
        "className": "SK3DNode",
        "methodNames": [
          "projectPoint_",
          "unprojectPoint_",
          "nodeWithViewportSize_",
          "initWithViewportSize_",
          "initWithCoder_",
          "hitTest_options_"
        ]
      },
      "SKScene": {
        "className": "SKScene",
        "methodNames": [
          "sceneWithSize_",
          "update_",
          "willMoveFromView_",
          "didEvaluateActions",
          "convertPointFromView_",
          "convertPointToView_",
          "didMoveToView_",
          "didApplyConstraints",
          "initWithSize_",
          "didFinishUpdate",
          "didChangeSize_",
          "didSimulatePhysics"
        ]
      },
      "SKView": {
        "className": "SKView",
        "methodNames": [
          "presentScene_",
          "convertPoint_fromScene_",
          "textureFromNode_",
          "convertPoint_toScene_",
          "presentScene_transition_",
          "textureFromNode_crop_"
        ]
      },
      "SKPhysicsBody": {
        "className": "SKPhysicsBody",
        "methodNames": [
          "applyAngularImpulse_",
          "allContactedBodies",
          "bodyWithEdgeFromPoint_toPoint_",
          "bodyWithRectangleOfSize_",
          "bodyWithEdgeChainFromPath_",
          "applyImpulse_",
          "bodyWithRectangleOfSize_center_",
          "bodyWithBodies_",
          "applyForce_atPoint_",
          "applyForce_",
          "bodyWithPolygonFromPath_",
          "applyImpulse_atPoint_",
          "bodyWithEdgeLoopFromRect_",
          "bodyWithTexture_alphaThreshold_size_",
          "bodyWithTexture_size_",
          "applyTorque_",
          "bodyWithEdgeLoopFromPath_",
          "bodyWithCircleOfRadius_",
          "bodyWithCircleOfRadius_center_"
        ]
      },
      "SKLightNode": {
        "className": "SKLightNode",
        "methodNames": []
      },
      "SKEmitterNode": {
        "className": "SKEmitterNode",
        "methodNames": [
          "advanceSimulationTime_",
          "resetSimulation"
        ]
      },
      "SKPhysicsJointFixed": {
        "className": "SKPhysicsJointFixed",
        "methodNames": [
          "jointWithBodyA_bodyB_anchor_"
        ]
      },
      "SKUniform": {
        "className": "SKUniform",
        "methodNames": [
          "uniformWithName_"
        ]
      },
      "SKTextureAtlas": {
        "className": "SKTextureAtlas",
        "methodNames": [
          "preloadWithCompletionHandler_",
          "atlasNamed_",
          "atlasWithDictionary_",
          "preloadTextureAtlasesNamed_withCompletionHandler_",
          "textureNamed_",
          "preloadTextureAtlases_withCompletionHandler_"
        ]
      },
      "SKTexture": {
        "className": "SKTexture",
        "methodNames": [
          "textureWithImageNamed_"
        ]
      },
      "SKKeyframeSequence": {
        "className": "SKKeyframeSequence",
        "methodNames": [
          "initWithKeyframeValues_times_",
          "setKeyframeTime_forIndex_",
          "setKeyframeValue_time_forIndex_",
          "count",
          "initWithCoder_",
          "addKeyframeValue_time_",
          "removeLastKeyframe",
          "sampleAtTime_",
          "removeKeyframeAtIndex_",
          "getKeyframeTimeForIndex_",
          "setKeyframeValue_forIndex_",
          "getKeyframeValueForIndex_",
          "initWithCapacity_"
        ]
      },
      "SKLabelNode": {
        "className": "SKLabelNode",
        "methodNames": [
          "labelNodeWithFontNamed_",
          "initWithFontNamed_",
          "labelNodeWithText_"
        ]
      }
    }
  },
  "LocalAuthentication.framework": {
    "frameworkName": "LocalAuthentication.framework",
    "classes": {
      "LAContext": {
        "className": "LAContext",
        "methodNames": [
          "canEvaluatePolicy_error_"
        ]
      }
    }
  },
  "PassKit.framework": {
    "frameworkName": "PassKit.framework",
    "classes": {
      "PKPassLibrary": {
        "className": "PKPassLibrary",
        "methodNames": [
          "isPassLibraryAvailable"
        ]
      },
      "PKPaymentAuthorizationViewController": {
        "className": "PKPaymentAuthorizationViewController",
        "methodNames": [
          "canMakePayments"
        ]
      },
      "PKPayment": {
        "className": "PKPayment",
        "methodNames": []
      },
      "PKPaymentMethod": {
        "className": "PKPaymentMethod",
        "methodNames": []
      },
      "PKPass": {
        "className": "PKPass",
        "methodNames": [
          "initWithData_error_"
        ]
      },
      "PKShippingMethod": {
        "className": "PKShippingMethod",
        "methodNames": []
      },
      "PKPaymentPass": {
        "className": "PKPaymentPass",
        "methodNames": []
      },
      "PKPaymentSummaryItem": {
        "className": "PKPaymentSummaryItem",
        "methodNames": [
          "summaryItemWithLabel_amount_",
          "summaryItemWithLabel_amount_type_"
        ]
      },
      "PKAddPassesViewController": {
        "className": "PKAddPassesViewController",
        "methodNames": [
          "initWithPass_"
        ]
      },
      "PKObject": {
        "className": "PKObject",
        "methodNames": []
      },
      "PKAddPaymentPassRequestConfiguration": {
        "className": "PKAddPaymentPassRequestConfiguration",
        "methodNames": [
          "initWithEncryptionScheme_"
        ]
      },
      "PKAddPassButton": {
        "className": "PKAddPassButton",
        "methodNames": [
          "addPassButtonWithStyle_",
          "initWithAddPassButtonStyle_"
        ]
      },
      "PKContact": {
        "className": "PKContact",
        "methodNames": []
      },
      "PKPaymentToken": {
        "className": "PKPaymentToken",
        "methodNames": []
      },
      "PKAddPaymentPassViewController": {
        "className": "PKAddPaymentPassViewController",
        "methodNames": [
          "initWithRequestConfiguration_delegate_",
          "canAddPaymentPass"
        ]
      },
      "PKPaymentButton": {
        "className": "PKPaymentButton",
        "methodNames": [
          "buttonWithType_style_"
        ]
      },
      "PKAddPaymentPassRequest": {
        "className": "PKAddPaymentPassRequest",
        "methodNames": [
          "init"
        ]
      },
      "PKPaymentRequest": {
        "className": "PKPaymentRequest",
        "methodNames": []
      }
    }
  },
  "GameKit.framework": {
    "frameworkName": "GameKit.framework",
    "classes": {
      "GKScoreChallenge": {
        "className": "GKScoreChallenge",
        "methodNames": []
      },
      "GKFriendRequestComposeViewController": {
        "className": "GKFriendRequestComposeViewController",
        "methodNames": [
          "addRecipientsWithEmailAddresses_",
          "maxNumberOfRecipients",
          "addRecipientPlayers_",
          "addRecipientsWithPlayerIDs_",
          "setMessage_"
        ]
      },
      "GKMatch": {
        "className": "GKMatch",
        "methodNames": [
          "disconnect",
          "sendData_toPlayers_withDataMode_error_",
          "sendData_toPlayers_dataMode_error_",
          "rematchWithCompletionHandler_",
          "sendDataToAllPlayers_withDataMode_error_",
          "voiceChatWithName_",
          "chooseBestHostingPlayerWithCompletionHandler_",
          "chooseBestHostPlayerWithCompletionHandler_"
        ]
      },
      "GKAchievementChallenge": {
        "className": "GKAchievementChallenge",
        "methodNames": []
      },
      "GKTurnBasedExchangeReply": {
        "className": "GKTurnBasedExchangeReply",
        "methodNames": []
      },
      "GKLocalPlayer": {
        "className": "GKLocalPlayer",
        "methodNames": [
          "registerListener_",
          "authenticateWithCompletionHandler_",
          "saveGameData_withName_completionHandler_",
          "unregisterAllListeners",
          "fetchSavedGamesWithCompletionHandler_",
          "unregisterListener_",
          "resolveConflictingSavedGames_withData_completionHandler_",
          "setDefaultLeaderboardCategoryID_completionHandler_",
          "localPlayer",
          "loadFriendsWithCompletionHandler_",
          "deleteSavedGamesWithName_completionHandler_",
          "loadDefaultLeaderboardCategoryIDWithCompletionHandler_"
        ]
      },
      "GKLeaderboardSet": {
        "className": "GKLeaderboardSet",
        "methodNames": [
          "loadLeaderboardSetsWithCompletionHandler_",
          "loadLeaderboardsWithCompletionHandler_",
          "loadImageWithCompletionHandler_"
        ]
      },
      "GKTurnBasedMatchmakerViewController": {
        "className": "GKTurnBasedMatchmakerViewController",
        "methodNames": [
          "initWithMatchRequest_"
        ]
      },
      "GKGameCenterViewController": {
        "className": "GKGameCenterViewController",
        "methodNames": []
      },
      "GKTurnBasedEventHandler": {
        "className": "GKTurnBasedEventHandler",
        "methodNames": [
          "sharedTurnBasedEventHandler"
        ]
      },
      "GKPeerPickerController": {
        "className": "GKPeerPickerController",
        "methodNames": [
          "show",
          "dismiss"
        ]
      },
      "GKTurnBasedParticipant": {
        "className": "GKTurnBasedParticipant",
        "methodNames": []
      },
      "GKTurnBasedExchange": {
        "className": "GKTurnBasedExchange",
        "methodNames": [
          "replyWithLocalizableMessageKey_arguments_data_completionHandler_",
          "cancelWithLocalizableMessageKey_arguments_completionHandler_"
        ]
      },
      "GKMatchmakerViewController": {
        "className": "GKMatchmakerViewController",
        "methodNames": [
          "initWithMatchRequest_",
          "setHostedPlayerReady_",
          "setHostedPlayer_connected_",
          "setHostedPlayer_didConnect_",
          "addPlayersToMatch_",
          "initWithInvite_"
        ]
      },
      "GKVoiceChatService": {
        "className": "GKVoiceChatService",
        "methodNames": [
          "isVoIPAllowed",
          "defaultVoiceChatService",
          "receivedData_fromParticipantID_",
          "stopVoiceChatWithParticipantID_",
          "acceptCallID_error_",
          "denyCallID_",
          "startVoiceChatWithParticipantID_error_",
          "receivedRealTimeData_fromParticipantID_"
        ]
      },
      "GKScore": {
        "className": "GKScore",
        "methodNames": [
          "reportScores_withCompletionHandler_",
          "challengeComposeControllerWithPlayers_message_completionHandler_",
          "initWithLeaderboardIdentifier_",
          "initWithLeaderboardIdentifier_forPlayer_",
          "challengeComposeControllerWithMessage_players_completionHandler_",
          "initWithLeaderboardIdentifier_player_"
        ]
      },
      "GKSavedGame": {
        "className": "GKSavedGame",
        "methodNames": [
          "loadDataWithCompletionHandler_"
        ]
      },
      "GKAchievement": {
        "className": "GKAchievement",
        "methodNames": [
          "initWithIdentifier_player_",
          "reportAchievementWithCompletionHandler_",
          "reportAchievements_withCompletionHandler_",
          "challengeComposeControllerWithMessage_players_completionHandler_",
          "resetAchievementsWithCompletionHandler_",
          "loadAchievementsWithCompletionHandler_",
          "selectChallengeablePlayerIDs_withCompletionHandler_",
          "initWithIdentifier_"
        ]
      },
      "GKTurnBasedMatch": {
        "className": "GKTurnBasedMatch",
        "methodNames": [
          "endTurnWithNextParticipants_turnTimeout_matchData_completionHandler_",
          "saveCurrentTurnWithMatchData_completionHandler_",
          "sendExchangeToParticipants_data_localizableMessageKey_arguments_timeout_completionHandler_",
          "endMatchInTurnWithMatchData_completionHandler_",
          "declineInviteWithCompletionHandler_",
          "findMatchForRequest_withCompletionHandler_",
          "endTurnWithNextParticipant_matchData_completionHandler_",
          "loadMatchWithID_withCompletionHandler_",
          "participantQuitOutOfTurnWithOutcome_withCompletionHandler_",
          "saveMergedMatchData_withResolvedExchanges_completionHandler_",
          "participantQuitInTurnWithOutcome_nextParticipant_matchData_completionHandler_",
          "loadMatchDataWithCompletionHandler_",
          "acceptInviteWithCompletionHandler_",
          "loadMatchesWithCompletionHandler_",
          "rematchWithCompletionHandler_",
          "sendReminderToParticipants_localizableMessageKey_arguments_completionHandler_",
          "participantQuitInTurnWithOutcome_nextParticipants_turnTimeout_matchData_completionHandler_",
          "endMatchInTurnWithMatchData_scores_achievements_completionHandler_",
          "removeWithCompletionHandler_",
          "setLocalizableMessageWithKey_arguments_"
        ]
      },
      "GKAchievementDescription": {
        "className": "GKAchievementDescription",
        "methodNames": [
          "loadImageWithCompletionHandler_",
          "loadAchievementDescriptionsWithCompletionHandler_",
          "placeholderCompletedAchievementImage",
          "incompleteAchievementImage"
        ]
      },
      "GKChallenge": {
        "className": "GKChallenge",
        "methodNames": [
          "decline",
          "loadReceivedChallengesWithCompletionHandler_"
        ]
      },
      "GKLeaderboard": {
        "className": "GKLeaderboard",
        "methodNames": [
          "init",
          "initWithPlayers_",
          "loadLeaderboardsWithCompletionHandler_",
          "setDefaultLeaderboard_withCompletionHandler_",
          "loadCategoriesWithCompletionHandler_",
          "loadImageWithCompletionHandler_",
          "initWithPlayerIDs_",
          "loadScoresWithCompletionHandler_"
        ]
      },
      "GKMatchmaker": {
        "className": "GKMatchmaker",
        "methodNames": [
          "cancel",
          "queryPlayerGroupActivity_withCompletionHandler_",
          "finishMatchmakingForMatch_",
          "findMatchForRequest_withCompletionHandler_",
          "startBrowsingForNearbyPlayersWithHandler_",
          "cancelInviteToPlayer_",
          "addPlayersToMatch_matchRequest_completionHandler_",
          "matchForInvite_completionHandler_",
          "sharedMatchmaker",
          "findPlayersForHostedMatchRequest_withCompletionHandler_",
          "queryActivityWithCompletionHandler_",
          "stopBrowsingForNearbyPlayers",
          "startBrowsingForNearbyPlayersWithReachableHandler_",
          "cancelPendingInviteToPlayer_",
          "findPlayersForHostedRequest_withCompletionHandler_"
        ]
      },
      "GKSession": {
        "className": "GKSession",
        "methodNames": [
          "sendData_toPeers_withDataMode_error_",
          "disconnectFromAllPeers",
          "connectToPeer_withTimeout_",
          "denyConnectionFromPeer_",
          "initWithSessionID_displayName_sessionMode_",
          "setDataReceiveHandler_withContext_",
          "acceptConnectionFromPeer_error_",
          "disconnectPeerFromAllPeers_",
          "peersWithConnectionState_",
          "cancelConnectToPeer_",
          "displayNameForPeer_",
          "sendDataToAllPeers_withDataMode_error_"
        ]
      },
      "GKPlayer": {
        "className": "GKPlayer",
        "methodNames": [
          "loadPhotoForSize_withCompletionHandler_",
          "anonymousGuestPlayerWithIdentifier_",
          "loadPlayersForIdentifiers_withCompletionHandler_"
        ]
      },
      "GKInvite": {
        "className": "GKInvite",
        "methodNames": []
      },
      "GKMatchRequest": {
        "className": "GKMatchRequest",
        "methodNames": [
          "maxPlayersAllowedForMatchOfType_"
        ]
      },
      "GKAchievementViewController": {
        "className": "GKAchievementViewController",
        "methodNames": []
      },
      "GKNotificationBanner": {
        "className": "GKNotificationBanner",
        "methodNames": [
          "showBannerWithTitle_message_completionHandler_",
          "showBannerWithTitle_message_duration_completionHandler_"
        ]
      },
      "GKVoiceChat": {
        "className": "GKVoiceChat",
        "methodNames": [
          "isVoIPAllowed",
          "stop",
          "setPlayer_muted_",
          "start",
          "setMute_forPlayer_"
        ]
      },
      "GKChallengeEventHandler": {
        "className": "GKChallengeEventHandler",
        "methodNames": [
          "challengeEventHandler"
        ]
      },
      "GKLeaderboardViewController": {
        "className": "GKLeaderboardViewController",
        "methodNames": []
      }
    }
  },
  "EventKit.framework": {
    "frameworkName": "EventKit.framework",
    "classes": {
      "EKRecurrenceDayOfWeek": {
        "className": "EKRecurrenceDayOfWeek",
        "methodNames": [
          "dayOfWeek_",
          "dayOfWeek_weekNumber_",
          "initWithDayOfTheWeek_weekNumber_"
        ]
      },
      "EKAlarm": {
        "className": "EKAlarm",
        "methodNames": [
          "alarmWithAbsoluteDate_",
          "alarmWithRelativeOffset_"
        ]
      },
      "EKParticipant": {
        "className": "EKParticipant",
        "methodNames": []
      },
      "EKObject": {
        "className": "EKObject",
        "methodNames": [
          "rollback",
          "reset",
          "refresh",
          "isNew"
        ]
      },
      "EKReminder": {
        "className": "EKReminder",
        "methodNames": [
          "reminderWithEventStore_"
        ]
      },
      "EKCalendar": {
        "className": "EKCalendar",
        "methodNames": [
          "calendarForEntityType_eventStore_",
          "calendarWithEventStore_"
        ]
      },
      "EKRecurrenceRule": {
        "className": "EKRecurrenceRule",
        "methodNames": [
          "initRecurrenceWithFrequency_interval_end_",
          "initRecurrenceWithFrequency_interval_daysOfTheWeek_daysOfTheMonth_monthsOfTheYear_weeksOfTheYear_daysOfTheYear_setPositions_end_"
        ]
      },
      "EKEvent": {
        "className": "EKEvent",
        "methodNames": [
          "eventWithEventStore_"
        ]
      },
      "EKSource": {
        "className": "EKSource",
        "methodNames": [
          "calendarsForEntityType_"
        ]
      },
      "EKStructuredLocation": {
        "className": "EKStructuredLocation",
        "methodNames": [
          "locationWithTitle_",
          "locationWithMapItem_"
        ]
      },
      "EKEventStore": {
        "className": "EKEventStore",
        "methodNames": [
          "authorizationStatusForEntityType_"
        ]
      },
      "EKCalendarItem": {
        "className": "EKCalendarItem",
        "methodNames": []
      },
      "EKRecurrenceEnd": {
        "className": "EKRecurrenceEnd",
        "methodNames": [
          "recurrenceEndWithEndDate_",
          "recurrenceEndWithOccurrenceCount_"
        ]
      }
    }
  },
  "SystemConfiguration.framework": {
    "frameworkName": "SystemConfiguration.framework",
    "classes": {}
  },
  "MapKit.framework": {
    "frameworkName": "MapKit.framework",
    "classes": {
      "MKPolyline": {
        "className": "MKPolyline",
        "methodNames": [
          "polylineWithPoints_count_",
          "polylineWithCoordinates_count_"
        ]
      },
      "MKTileOverlay": {
        "className": "MKTileOverlay",
        "methodNames": [
          "loadTileAtPath_result_",
          "initWithURLTemplate_",
          "URLForTilePath_"
        ]
      },
      "MKMapView": {
        "className": "MKMapView",
        "methodNames": [
          "addOverlay_level_"
        ]
      },
      "MKPointAnnotation": {
        "className": "MKPointAnnotation",
        "methodNames": []
      },
      "MKDistanceFormatter": {
        "className": "MKDistanceFormatter",
        "methodNames": [
          "distanceFromString_",
          "stringFromDistance_"
        ]
      },
      "MKMapSnapshotOptions": {
        "className": "MKMapSnapshotOptions",
        "methodNames": []
      },
      "MKMapSnapshotter": {
        "className": "MKMapSnapshotter",
        "methodNames": [
          "initWithOptions_",
          "cancel",
          "startWithQueue_completionHandler_",
          "startWithCompletionHandler_"
        ]
      },
      "MKTileOverlayRenderer": {
        "className": "MKTileOverlayRenderer",
        "methodNames": [
          "initWithTileOverlay_",
          "reloadData"
        ]
      },
      "MKPlacemark": {
        "className": "MKPlacemark",
        "methodNames": [
          "initWithCoordinate_addressDictionary_"
        ]
      },
      "MKRouteStep": {
        "className": "MKRouteStep",
        "methodNames": []
      },
      "MKLocalSearchRequest": {
        "className": "MKLocalSearchRequest",
        "methodNames": []
      },
      "MKUserTrackingBarButtonItem": {
        "className": "MKUserTrackingBarButtonItem",
        "methodNames": [
          "initWithMapView_"
        ]
      },
      "MKLocalSearch": {
        "className": "MKLocalSearch",
        "methodNames": [
          "cancel",
          "startWithCompletionHandler_",
          "initWithRequest_"
        ]
      },
      "MKPolygonView": {
        "className": "MKPolygonView",
        "methodNames": [
          "initWithPolygon_"
        ]
      },
      "MKMapSnapshot": {
        "className": "MKMapSnapshot",
        "methodNames": [
          "pointForCoordinate_"
        ]
      },
      "MKDirectionsRequest": {
        "className": "MKDirectionsRequest",
        "methodNames": [
          "initWithContentsOfURL_",
          "setSource_",
          "isDirectionsRequestURL_",
          "setDestination_"
        ]
      },
      "MKETAResponse": {
        "className": "MKETAResponse",
        "methodNames": []
      },
      "MKCircleView": {
        "className": "MKCircleView",
        "methodNames": [
          "initWithCircle_"
        ]
      },
      "MKLocalSearchResponse": {
        "className": "MKLocalSearchResponse",
        "methodNames": []
      },
      "MKGeodesicPolyline": {
        "className": "MKGeodesicPolyline",
        "methodNames": [
          "polylineWithPoints_count_",
          "polylineWithCoordinates_count_"
        ]
      },
      "MKShape": {
        "className": "MKShape",
        "methodNames": []
      },
      "MKOverlayRenderer": {
        "className": "MKOverlayRenderer",
        "methodNames": [
          "setNeedsDisplayInMapRect_zoomScale_",
          "setNeedsDisplay",
          "initWithOverlay_",
          "mapRectForRect_",
          "setNeedsDisplayInMapRect_",
          "rectForMapRect_",
          "mapPointForPoint_",
          "pointForMapPoint_",
          "canDrawMapRect_zoomScale_",
          "drawMapRect_zoomScale_inContext_"
        ]
      },
      "MKDirectionsResponse": {
        "className": "MKDirectionsResponse",
        "methodNames": []
      },
      "MKOverlayPathRenderer": {
        "className": "MKOverlayPathRenderer",
        "methodNames": [
          "applyStrokePropertiesToContext_atZoomScale_",
          "invalidatePath",
          "applyFillPropertiesToContext_atZoomScale_",
          "createPath",
          "strokePath_inContext_",
          "fillPath_inContext_"
        ]
      },
      "MKAnnotationView": {
        "className": "MKAnnotationView",
        "methodNames": [
          "setSelected_animated_",
          "prepareForReuse",
          "setDragState_animated_",
          "initWithAnnotation_reuseIdentifier_"
        ]
      },
      "MKCircleRenderer": {
        "className": "MKCircleRenderer",
        "methodNames": [
          "initWithCircle_"
        ]
      },
      "MKPolylineRenderer": {
        "className": "MKPolylineRenderer",
        "methodNames": [
          "initWithPolyline_"
        ]
      },
      "MKPolygon": {
        "className": "MKPolygon",
        "methodNames": [
          "polygonWithCoordinates_count_interiorPolygons_",
          "polygonWithPoints_count_",
          "polygonWithCoordinates_count_",
          "polygonWithPoints_count_interiorPolygons_"
        ]
      },
      "MKMapCamera": {
        "className": "MKMapCamera",
        "methodNames": [
          "cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_",
          "cameraLookingAtCenterCoordinate_fromEyeCoordinate_eyeAltitude_",
          "camera"
        ]
      },
      "MKCircle": {
        "className": "MKCircle",
        "methodNames": [
          "circleWithMapRect_",
          "circleWithCenterCoordinate_radius_"
        ]
      },
      "MKMapItem": {
        "className": "MKMapItem",
        "methodNames": [
          "mapItemForCurrentLocation",
          "openInMapsWithLaunchOptions_",
          "initWithPlacemark_",
          "openMapsWithItems_launchOptions_"
        ]
      },
      "MKDirections": {
        "className": "MKDirections",
        "methodNames": [
          "cancel",
          "calculateETAWithCompletionHandler_",
          "calculateDirectionsWithCompletionHandler_",
          "initWithRequest_"
        ]
      },
      "MKMultiPoint": {
        "className": "MKMultiPoint",
        "methodNames": [
          "getCoordinates_range_",
          "points"
        ]
      },
      "MKPolygonRenderer": {
        "className": "MKPolygonRenderer",
        "methodNames": [
          "initWithPolygon_"
        ]
      },
      "MKUserLocation": {
        "className": "MKUserLocation",
        "methodNames": []
      },
      "MKOverlayPathView": {
        "className": "MKOverlayPathView",
        "methodNames": []
      },
      "MKOverlayView": {
        "className": "MKOverlayView",
        "methodNames": [
          "initWithOverlay_"
        ]
      },
      "MKPolylineView": {
        "className": "MKPolylineView",
        "methodNames": [
          "initWithPolyline_"
        ]
      },
      "MKRoute": {
        "className": "MKRoute",
        "methodNames": []
      },
      "MKPinAnnotationView": {
        "className": "MKPinAnnotationView",
        "methodNames": [
          "greenPinColor",
          "redPinColor",
          "purplePinColor"
        ]
      },
      "MKReverseGeocoder": {
        "className": "MKReverseGeocoder",
        "methodNames": [
          "initWithCoordinate_"
        ]
      }
    }
  },
  "Social.framework": {
    "frameworkName": "Social.framework",
    "classes": {
      "SLComposeServiceViewController": {
        "className": "SLComposeServiceViewController",
        "methodNames": [
          "cancel",
          "isContentValid",
          "validateContent",
          "configurationItems",
          "pushConfigurationViewController_",
          "popConfigurationViewController",
          "didSelectCancel",
          "didSelectPost",
          "presentationAnimationDidFinish",
          "loadPreviewView",
          "reloadConfigurationItems"
        ]
      },
      "SLComposeViewController": {
        "className": "SLComposeViewController",
        "methodNames": [
          "setInitialText_",
          "removeAllURLs",
          "isAvailableForServiceType_",
          "addImage_",
          "composeViewControllerForServiceType_",
          "addURL_",
          "removeAllImages"
        ]
      },
      "SLRequest": {
        "className": "SLRequest",
        "methodNames": [
          "performRequestWithHandler_",
          "requestForServiceType_requestMethod_URL_parameters_",
          "addMultipartData_withName_type_",
          "preparedURLRequest",
          "addMultipartData_withName_type_filename_"
        ]
      },
      "SLComposeSheetConfigurationItem": {
        "className": "SLComposeSheetConfigurationItem",
        "methodNames": [
          "init"
        ]
      }
    }
  },
  "AddressBook.framework": {
    "frameworkName": "AddressBook.framework",
    "classes": {}
  },
  "CoreMotion.framework": {
    "frameworkName": "CoreMotion.framework",
    "classes": {
      "CMRecordedAccelerometerData": {
        "className": "CMRecordedAccelerometerData",
        "methodNames": []
      },
      "CMAttitude": {
        "className": "CMAttitude",
        "methodNames": [
          "multiplyByInverseOfAttitude_"
        ]
      },
      "CMMotionActivity": {
        "className": "CMMotionActivity",
        "methodNames": []
      },
      "CMMotionManager": {
        "className": "CMMotionManager",
        "methodNames": []
      },
      "CMPedometerData": {
        "className": "CMPedometerData",
        "methodNames": []
      },
      "CMPedometer": {
        "className": "CMPedometer",
        "methodNames": [
          "queryPedometerDataFromDate_toDate_withHandler_",
          "isFloorCountingAvailable",
          "isStepCountingAvailable",
          "isDistanceAvailable",
          "isPaceAvailable",
          "isCadenceAvailable",
          "startPedometerUpdatesFromDate_withHandler_",
          "stopPedometerUpdates"
        ]
      },
      "CMMotionActivityManager": {
        "className": "CMMotionActivityManager",
        "methodNames": [
          "startActivityUpdatesToQueue_withHandler_",
          "stopActivityUpdates",
          "isActivityAvailable",
          "queryActivityStartingFromDate_toDate_toQueue_withHandler_"
        ]
      },
      "CMSensorDataList": {
        "className": "CMSensorDataList",
        "methodNames": []
      },
      "CMAltitudeData": {
        "className": "CMAltitudeData",
        "methodNames": []
      },
      "CMMagnetometerData": {
        "className": "CMMagnetometerData",
        "methodNames": []
      },
      "CMAccelerometerData": {
        "className": "CMAccelerometerData",
        "methodNames": []
      },
      "CMLogItem": {
        "className": "CMLogItem",
        "methodNames": []
      },
      "CMDeviceMotion": {
        "className": "CMDeviceMotion",
        "methodNames": []
      },
      "CMGyroData": {
        "className": "CMGyroData",
        "methodNames": []
      },
      "CMStepCounter": {
        "className": "CMStepCounter",
        "methodNames": [
          "startStepCountingUpdatesToQueue_updateOn_withHandler_",
          "stopStepCountingUpdates",
          "queryStepCountStartingFrom_to_toQueue_withHandler_",
          "isStepCountingAvailable"
        ]
      },
      "CMSensorRecorder": {
        "className": "CMSensorRecorder",
        "methodNames": [
          "isAccelerometerRecordingAvailable",
          "recordAccelerometerFor_",
          "accelerometerDataFrom_to_",
          "isAuthorizedForRecording",
          "accelerometerDataSince_"
        ]
      },
      "CMAltimeter": {
        "className": "CMAltimeter",
        "methodNames": [
          "startRelativeAltitudeUpdatesToQueue_withHandler_",
          "isRelativeAltitudeAvailable",
          "stopRelativeAltitudeUpdates"
        ]
      }
    }
  },
  "SceneKit.framework": {
    "frameworkName": "SceneKit.framework",
    "classes": {
      "SCNSceneSource": {
        "className": "SCNSceneSource",
        "methodNames": [
          "entryWithIdentifier_withClass_",
          "identifiersOfEntriesWithClass_",
          "propertyForKey_",
          "sceneSourceWithURL_options_",
          "sceneSourceWithData_options_",
          "sceneWithOptions_statusHandler_",
          "sceneWithOptions_error_",
          "initWithData_options_",
          "initWithURL_options_",
          "entriesPassingTest_"
        ]
      },
      "SCNLight": {
        "className": "SCNLight",
        "methodNames": [
          "light",
          "lightWithMDLLight_"
        ]
      },
      "MDLAsset": {
        "className": "MDLAsset",
        "methodNames": [
          "assetWithSCNScene_"
        ]
      },
      "MDLCamera": {
        "className": "MDLCamera",
        "methodNames": [
          "cameraWithSCNCamera_"
        ]
      },
      "SCNPlane": {
        "className": "SCNPlane",
        "methodNames": [
          "planeWithWidth_height_"
        ]
      },
      "SCNGeometry": {
        "className": "SCNGeometry",
        "methodNames": [
          "geometryWithMDLMesh_",
          "removeMaterialAtIndex_",
          "geometrySourcesForSemantic_",
          "geometryElementAtIndex_",
          "materialWithName_",
          "geometry",
          "geometryWithSources_elements_",
          "insertMaterial_atIndex_",
          "replaceMaterialAtIndex_withMaterial_"
        ]
      },
      "SCNPhysicsBallSocketJoint": {
        "className": "SCNPhysicsBallSocketJoint",
        "methodNames": [
          "jointWithBody_anchor_",
          "jointWithBodyA_anchorA_bodyB_anchorB_"
        ]
      },
      "SCNLookAtConstraint": {
        "className": "SCNLookAtConstraint",
        "methodNames": [
          "lookAtConstraintWithTarget_"
        ]
      },
      "SCNHitTestResult": {
        "className": "SCNHitTestResult",
        "methodNames": [
          "textureCoordinatesWithMappingChannel_"
        ]
      },
      "SCNAction": {
        "className": "SCNAction",
        "methodNames": [
          "removeFromParentNode",
          "moveBy_duration_",
          "rotateToAxisAngle_duration_",
          "scaleBy_duration_",
          "reversedAction",
          "customActionWithDuration_actionBlock_",
          "runBlock_",
          "rotateByX_y_z_duration_",
          "fadeOpacityTo_duration_",
          "javaScriptActionWithScript_duration_",
          "moveTo_duration_",
          "waitForDuration_withRange_",
          "sequence_",
          "fadeInWithDuration_",
          "scaleTo_duration_",
          "repeatActionForever_",
          "waitForDuration_",
          "moveByX_y_z_duration_",
          "rotateToX_y_z_duration_",
          "rotateToX_y_z_duration_shortestUnitArc_",
          "hide",
          "playAudioSource_waitForCompletion_",
          "runBlock_queue_",
          "rotateByAngle_aroundAxis_duration_",
          "repeatAction_count_",
          "fadeOutWithDuration_",
          "group_",
          "fadeOpacityBy_duration_",
          "unhide"
        ]
      },
      "MDLObject": {
        "className": "MDLObject",
        "methodNames": [
          "objectWithSCNNode_"
        ]
      },
      "MDLMaterial": {
        "className": "MDLMaterial",
        "methodNames": [
          "materialWithSCNMaterial_"
        ]
      },
      "SCNBox": {
        "className": "SCNBox",
        "methodNames": [
          "boxWithWidth_height_length_chamferRadius_"
        ]
      },
      "NSValue": {
        "className": "NSValue",
        "methodNames": [
          "valueWithSCNVector3_",
          "valueWithSCNVector4_",
          "valueWithSCNMatrix4_"
        ]
      },
      "SCNMaterialProperty": {
        "className": "SCNMaterialProperty",
        "methodNames": [
          "materialPropertyWithContents_"
        ]
      },
      "SCNIKConstraint": {
        "className": "SCNIKConstraint",
        "methodNames": [
          "maxAllowedRotationAngleForJoint_",
          "initWithChainRootNode_",
          "inverseKinematicsConstraintWithChainRootNode_",
          "setMaxAllowedRotationAngle_forJoint_"
        ]
      },
      "SCNMaterial": {
        "className": "SCNMaterial",
        "methodNames": [
          "material",
          "materialWithMDLMaterial_"
        ]
      },
      "SCNCone": {
        "className": "SCNCone",
        "methodNames": [
          "coneWithTopRadius_bottomRadius_height_"
        ]
      },
      "SCNAnimationEvent": {
        "className": "SCNAnimationEvent",
        "methodNames": [
          "animationEventWithKeyTime_block_"
        ]
      },
      "SCNText": {
        "className": "SCNText",
        "methodNames": [
          "textWithString_extrusionDepth_"
        ]
      },
      "SCNSphere": {
        "className": "SCNSphere",
        "methodNames": [
          "sphereWithRadius_"
        ]
      },
      "SCNSkinner": {
        "className": "SCNSkinner",
        "methodNames": [
          "skinnerWithBaseGeometry_bones_boneInverseBindTransforms_boneWeights_boneIndices_"
        ]
      },
      "SCNTechnique": {
        "className": "SCNTechnique",
        "methodNames": [
          "handleBindingOfSymbol_usingBlock_",
          "objectForKeyedSubscript_",
          "techniqueWithDictionary_",
          "setObject_forKeyedSubscript_",
          "techniqueBySequencingTechniques_"
        ]
      },
      "SCNMorpher": {
        "className": "SCNMorpher",
        "methodNames": [
          "setWeight_forTargetAtIndex_",
          "weightForTargetAtIndex_"
        ]
      },
      "SCNView": {
        "className": "SCNView",
        "methodNames": [
          "initWithFrame_options_",
          "pause_",
          "play_",
          "stop_",
          "snapshot"
        ]
      },
      "SCNPhysicsBehavior": {
        "className": "SCNPhysicsBehavior",
        "methodNames": []
      },
      "SCNPhysicsVehicle": {
        "className": "SCNPhysicsVehicle",
        "methodNames": [
          "setSteeringAngle_forWheelAtIndex_",
          "applyEngineForce_forWheelAtIndex_",
          "applyBrakingForce_forWheelAtIndex_",
          "vehicleWithChassisBody_wheels_"
        ]
      },
      "SCNPhysicsWorld": {
        "className": "SCNPhysicsWorld",
        "methodNames": [
          "addBehavior_",
          "updateCollisionPairs",
          "removeAllBehaviors",
          "convexSweepTestWithShape_fromTransform_toTransform_options_",
          "rayTestWithSegmentFromPoint_toPoint_options_",
          "removeBehavior_",
          "contactTestWithBody_options_",
          "contactTestBetweenBody_andBody_options_"
        ]
      },
      "SCNScene": {
        "className": "SCNScene",
        "methodNames": [
          "sceneNamed_inDirectory_options_",
          "addParticleSystem_withTransform_",
          "removeParticleSystem_",
          "attributeForKey_",
          "removeAllParticleSystems",
          "sceneWithURL_options_error_",
          "sceneWithMDLAsset_",
          "scene",
          "setAttribute_forKey_",
          "sceneNamed_"
        ]
      },
      "SCNCapsule": {
        "className": "SCNCapsule",
        "methodNames": [
          "capsuleWithCapRadius_height_"
        ]
      },
      "SCNPhysicsSliderJoint": {
        "className": "SCNPhysicsSliderJoint",
        "methodNames": [
          "jointWithBodyA_axisA_anchorA_bodyB_axisB_anchorB_",
          "jointWithBody_axis_anchor_"
        ]
      },
      "SCNPhysicsField": {
        "className": "SCNPhysicsField",
        "methodNames": [
          "springField",
          "vortexField",
          "radialGravityField",
          "linearGravityField",
          "turbulenceFieldWithSmoothness_animationSpeed_",
          "dragField",
          "customFieldWithEvaluationBlock_",
          "electricField",
          "magneticField",
          "noiseFieldWithSmoothness_animationSpeed_"
        ]
      },
      "SCNProgram": {
        "className": "SCNProgram",
        "methodNames": [
          "setSemantic_forSymbol_options_",
          "program",
          "handleBindingOfBufferNamed_frequency_usingBlock_",
          "semanticForSymbol_"
        ]
      },
      "MDLMesh": {
        "className": "MDLMesh",
        "methodNames": [
          "meshWithSCNGeometry_"
        ]
      },
      "SCNTransformConstraint": {
        "className": "SCNTransformConstraint",
        "methodNames": [
          "transformConstraintInWorldSpace_withBlock_"
        ]
      },
      "SCNFloor": {
        "className": "SCNFloor",
        "methodNames": [
          "floor"
        ]
      },
      "SCNParticleSystem": {
        "className": "SCNParticleSystem",
        "methodNames": [
          "particleSystem",
          "removeAllModifiers",
          "particleSystemNamed_inDirectory_",
          "reset",
          "removeModifiersOfStage_",
          "handleEvent_forProperties_withBlock_",
          "addModifierForProperties_atStage_withBlock_"
        ]
      },
      "SCNPyramid": {
        "className": "SCNPyramid",
        "methodNames": [
          "pyramidWithWidth_height_length_"
        ]
      },
      "SCNNode": {
        "className": "SCNNode",
        "methodNames": [
          "flattenedClone",
          "removeFromParentNode",
          "hitTestWithSegmentFromPoint_toPoint_options_",
          "nodeWithMDLObject_",
          "convertTransform_toNode_",
          "removeParticleSystem_",
          "removeAllAudioPlayers",
          "addChildNode_",
          "convertPosition_fromNode_",
          "addParticleSystem_",
          "convertPosition_toNode_",
          "insertChildNode_atIndex_",
          "addAudioPlayer_",
          "node",
          "replaceChildNode_with_",
          "removeAudioPlayer_",
          "convertTransform_fromNode_",
          "clone",
          "removeAllParticleSystems",
          "enumerateChildNodesUsingBlock_",
          "nodeWithGeometry_",
          "childNodeWithName_recursively_",
          "childNodesPassingTest_"
        ]
      },
      "SCNGeometryElement": {
        "className": "SCNGeometryElement",
        "methodNames": [
          "geometryElementWithData_primitiveType_primitiveCount_bytesPerIndex_",
          "geometryElementWithMDLSubmesh_"
        ]
      },
      "SCNCylinder": {
        "className": "SCNCylinder",
        "methodNames": [
          "cylinderWithRadius_height_"
        ]
      },
      "SCNTube": {
        "className": "SCNTube",
        "methodNames": [
          "tubeWithInnerRadius_outerRadius_height_"
        ]
      },
      "SCNPhysicsBody": {
        "className": "SCNPhysicsBody",
        "methodNames": [
          "applyTorque_impulse_",
          "kinematicBody",
          "applyForce_atPosition_impulse_",
          "staticBody",
          "resetTransform",
          "applyForce_impulse_",
          "bodyWithType_shape_",
          "dynamicBody",
          "clearAllForces"
        ]
      },
      "MDLSubmesh": {
        "className": "MDLSubmesh",
        "methodNames": [
          "submeshWithSCNGeometryElement_"
        ]
      },
      "CAAnimation": {
        "className": "CAAnimation",
        "methodNames": []
      },
      "SCNConstraint": {
        "className": "SCNConstraint",
        "methodNames": []
      },
      "SCNReferenceNode": {
        "className": "SCNReferenceNode",
        "methodNames": [
          "load",
          "unload",
          "initWithCoder_",
          "referenceNodeWithURL_",
          "initWithURL_"
        ]
      },
      "SCNShape": {
        "className": "SCNShape",
        "methodNames": [
          "shapeWithPath_extrusionDepth_"
        ]
      },
      "SCNTransaction": {
        "className": "SCNTransaction",
        "methodNames": [
          "begin"
        ]
      },
      "SCNLevelOfDetail": {
        "className": "SCNLevelOfDetail",
        "methodNames": [
          "levelOfDetailWithGeometry_worldSpaceDistance_",
          "levelOfDetailWithGeometry_screenSpaceRadius_"
        ]
      },
      "SCNCamera": {
        "className": "SCNCamera",
        "methodNames": [
          "projectionTransform",
          "setProjectionTransform_",
          "cameraWithMDLCamera_",
          "camera"
        ]
      },
      "SCNAudioSource": {
        "className": "SCNAudioSource",
        "methodNames": [
          "load",
          "audioSourceNamed_",
          "initWithURL_",
          "initWithFileNamed_"
        ]
      },
      "SCNPhysicsVehicleWheel": {
        "className": "SCNPhysicsVehicleWheel",
        "methodNames": [
          "wheelWithNode_"
        ]
      },
      "SCNTorus": {
        "className": "SCNTorus",
        "methodNames": [
          "torusWithRingRadius_pipeRadius_"
        ]
      },
      "SCNPhysicsShape": {
        "className": "SCNPhysicsShape",
        "methodNames": [
          "shapeWithNode_options_",
          "shapeWithShapes_transforms_",
          "shapeWithGeometry_options_"
        ]
      },
      "SCNPhysicsHingeJoint": {
        "className": "SCNPhysicsHingeJoint",
        "methodNames": [
          "jointWithBodyA_axisA_anchorA_bodyB_axisB_anchorB_",
          "jointWithBody_axis_anchor_"
        ]
      },
      "MDLLight": {
        "className": "MDLLight",
        "methodNames": [
          "lightWithSCNLight_"
        ]
      },
      "SCNPhysicsContact": {
        "className": "SCNPhysicsContact",
        "methodNames": []
      },
      "SCNGeometrySource": {
        "className": "SCNGeometrySource",
        "methodNames": [
          "geometrySourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_",
          "geometrySourceWithNormals_count_",
          "geometrySourceWithBuffer_vertexFormat_semantic_vertexCount_dataOffset_dataStride_",
          "geometrySourceWithTextureCoordinates_count_",
          "geometrySourceWithVertices_count_"
        ]
      },
      "SCNRenderer": {
        "className": "SCNRenderer",
        "methodNames": [
          "renderAtTime_viewport_commandBuffer_passDescriptor_",
          "rendererWithContext_options_",
          "rendererWithDevice_options_",
          "renderAtTime_",
          "render"
        ]
      },
      "SCNAudioPlayer": {
        "className": "SCNAudioPlayer",
        "methodNames": [
          "init",
          "audioPlayerWithAVAudioNode_",
          "initWithAVAudioNode_",
          "audioPlayerWithSource_",
          "initWithSource_"
        ]
      },
      "SCNBillboardConstraint": {
        "className": "SCNBillboardConstraint",
        "methodNames": [
          "billboardConstraint"
        ]
      },
      "SCNParticlePropertyController": {
        "className": "SCNParticlePropertyController",
        "methodNames": [
          "controllerWithAnimation_"
        ]
      }
    }
  },
  "Accelerate.framework": {
    "frameworkName": "Accelerate.framework",
    "classes": {}
  },
  "Security.framework": {
    "frameworkName": "Security.framework",
    "classes": {}
  },
  "MessageUI.framework": {
    "frameworkName": "MessageUI.framework",
    "classes": {
      "MFMailComposeViewController": {
        "className": "MFMailComposeViewController",
        "methodNames": [
          "canSendMail",
          "setSubject_",
          "setCcRecipients_",
          "addAttachmentData_mimeType_fileName_",
          "setToRecipients_",
          "setMessageBody_isHTML_",
          "setBccRecipients_"
        ]
      },
      "MFMessageComposeViewController": {
        "className": "MFMessageComposeViewController",
        "methodNames": [
          "isSupportedAttachmentUTI_",
          "canSendText",
          "addAttachmentURL_withAlternateFilename_",
          "canSendSubject",
          "disableUserAttachments",
          "addAttachmentData_typeIdentifier_filename_",
          "canSendAttachments"
        ]
      }
    }
  },
  "CoreSpotlight.framework": {
    "frameworkName": "CoreSpotlight.framework",
    "classes": {
      "CSSearchableIndex": {
        "className": "CSSearchableIndex",
        "methodNames": [
          "initWithName_protectionClass_",
          "beginIndexBatch",
          "defaultSearchableIndex",
          "deleteSearchableItemsWithDomainIdentifiers_completionHandler_",
          "deleteSearchableItemsWithIdentifiers_completionHandler_",
          "fetchLastClientStateWithCompletionHandler_",
          "isIndexingAvailable",
          "initWithName_",
          "endIndexBatchWithClientState_completionHandler_",
          "indexSearchableItems_completionHandler_",
          "deleteAllSearchableItemsWithCompletionHandler_"
        ]
      },
      "CSSearchableItem": {
        "className": "CSSearchableItem",
        "methodNames": [
          "initWithUniqueIdentifier_domainIdentifier_attributeSet_"
        ]
      },
      "CSIndexExtensionRequestHandler": {
        "className": "CSIndexExtensionRequestHandler",
        "methodNames": []
      },
      "CSCustomAttributeKey": {
        "className": "CSCustomAttributeKey",
        "methodNames": [
          "initWithKeyName_searchable_searchableByDefault_unique_multiValued_",
          "initWithKeyName_"
        ]
      },
      "CSPerson": {
        "className": "CSPerson",
        "methodNames": [
          "initWithDisplayName_handles_handleIdentifier_"
        ]
      },
      "CSSearchableItemAttributeSet": {
        "className": "CSSearchableItemAttributeSet",
        "methodNames": [
          "initWithItemContentType_",
          "setValue_forCustomKey_",
          "valueForCustomKey_"
        ]
      },
      "CSLocalizedString": {
        "className": "CSLocalizedString",
        "methodNames": [
          "localizedString",
          "initWithLocalizedStrings_"
        ]
      },
      "NSUserActivity": {
        "className": "NSUserActivity",
        "methodNames": []
      }
    }
  },
  "SafariServices.framework": {
    "frameworkName": "SafariServices.framework",
    "classes": {
      "SFContentBlockerManager": {
        "className": "SFContentBlockerManager",
        "methodNames": [
          "reloadContentBlockerWithIdentifier_completionHandler_"
        ]
      },
      "SFSafariViewController": {
        "className": "SFSafariViewController",
        "methodNames": []
      },
      "SSReadingList": {
        "className": "SSReadingList",
        "methodNames": [
          "defaultReadingList"
        ]
      }
    }
  },
  "HomeKit.framework": {
    "frameworkName": "HomeKit.framework",
    "classes": {
      "HMRoom": {
        "className": "HMRoom",
        "methodNames": [
          "init"
        ]
      },
      "HMTimerTrigger": {
        "className": "HMTimerTrigger",
        "methodNames": [
          "init",
          "initWithName_fireDate_timeZone_recurrence_recurrenceCalendar_",
          "updateRecurrence_completionHandler_",
          "updateFireDate_completionHandler_",
          "updateTimeZone_completionHandler_"
        ]
      },
      "HMAccessoryBrowser": {
        "className": "HMAccessoryBrowser",
        "methodNames": [
          "stopSearchingForNewAccessories",
          "startSearchingForNewAccessories"
        ]
      },
      "HMCharacteristic": {
        "className": "HMCharacteristic",
        "methodNames": []
      },
      "HMHomeAccessControl": {
        "className": "HMHomeAccessControl",
        "methodNames": [
          "init"
        ]
      },
      "HMAccessoryCategory": {
        "className": "HMAccessoryCategory",
        "methodNames": []
      },
      "HMService": {
        "className": "HMService",
        "methodNames": []
      },
      "HMAccessory": {
        "className": "HMAccessory",
        "methodNames": []
      },
      "HMHomeManager": {
        "className": "HMHomeManager",
        "methodNames": [
          "updatePrimaryHome_completionHandler_",
          "removeHome_completionHandler_",
          "addHomeWithName_completionHandler_"
        ]
      },
      "HMLocationEvent": {
        "className": "HMLocationEvent",
        "methodNames": [
          "init",
          "updateRegion_completionHandler_",
          "initWithRegion_"
        ]
      },
      "HMEventTrigger": {
        "className": "HMEventTrigger",
        "methodNames": [
          "init",
          "predicateForEvaluatingTriggerOccurringBeforeDateWithComponents_",
          "updatePredicate_completionHandler_",
          "predicateForEvaluatingTriggerOccurringBeforeSignificantEvent_applyingOffset_",
          "initWithName_events_predicate_",
          "predicateForEvaluatingTriggerOccurringOnDateWithComponents_",
          "predicateForEvaluatingTriggerOccurringAfterDateWithComponents_",
          "addEvent_completionHandler_",
          "removeEvent_completionHandler_",
          "predicateForEvaluatingTriggerOccurringAfterSignificantEvent_applyingOffset_",
          "predicateForEvaluatingTriggerWithCharacteristic_relatedBy_toValue_"
        ]
      },
      "HMActionSet": {
        "className": "HMActionSet",
        "methodNames": [
          "init"
        ]
      },
      "HMCharacteristicMetadata": {
        "className": "HMCharacteristicMetadata",
        "methodNames": []
      },
      "HMUser": {
        "className": "HMUser",
        "methodNames": [
          "init"
        ]
      },
      "HMAction": {
        "className": "HMAction",
        "methodNames": []
      },
      "HMZone": {
        "className": "HMZone",
        "methodNames": [
          "init"
        ]
      },
      "HMTrigger": {
        "className": "HMTrigger",
        "methodNames": [
          "init"
        ]
      },
      "HMServiceGroup": {
        "className": "HMServiceGroup",
        "methodNames": [
          "init"
        ]
      },
      "HMHome": {
        "className": "HMHome",
        "methodNames": [
          "init",
          "removeRoom_completionHandler_",
          "addServiceGroupWithName_completionHandler_",
          "addRoomWithName_completionHandler_",
          "assignAccessory_toRoom_completionHandler_",
          "servicesWithTypes_",
          "roomForEntireHome",
          "unblockAccessory_completionHandler_",
          "removeZone_completionHandler_",
          "removeServiceGroup_completionHandler_",
          "addAccessory_completionHandler_",
          "addZoneWithName_completionHandler_",
          "removeAccessory_completionHandler_",
          "addTrigger_completionHandler_",
          "removeTrigger_completionHandler_"
        ]
      },
      "HMEvent": {
        "className": "HMEvent",
        "methodNames": []
      }
    }
  },
  "MobileCoreServices.framework": {
    "frameworkName": "MobileCoreServices.framework",
    "classes": {}
  },
  "Photos.framework": {
    "frameworkName": "Photos.framework",
    "classes": {
      "PHAsset": {
        "className": "PHAsset",
        "methodNames": [
          "requestContentEditingInputWithOptions_completionHandler_"
        ]
      },
      "PHCollectionListChangeRequest": {
        "className": "PHCollectionListChangeRequest",
        "methodNames": [
          "changeRequestForCollectionList_childCollections_",
          "removeChildCollections_",
          "removeChildCollectionsAtIndexes_",
          "changeRequestForCollectionList_",
          "addChildCollections_",
          "replaceChildCollectionsAtIndexes_withChildCollections_",
          "moveChildCollectionsAtIndexes_toIndex_",
          "creationRequestForCollectionListWithTitle_",
          "deleteCollectionLists_",
          "insertChildCollections_atIndexes_"
        ]
      },
      "PHObjectPlaceholder": {
        "className": "PHObjectPlaceholder",
        "methodNames": []
      },
      "PHAdjustmentData": {
        "className": "PHAdjustmentData",
        "methodNames": [
          "initWithFormatIdentifier_formatVersion_data_"
        ]
      },
      "PHAssetResource": {
        "className": "PHAssetResource",
        "methodNames": []
      },
      "PHAssetCreationRequest": {
        "className": "PHAssetCreationRequest",
        "methodNames": [
          "creationRequestForAsset",
          "addResourceWithType_data_options_",
          "addResourceWithType_fileURL_options_",
          "supportsAssetResourceTypes_"
        ]
      },
      "PHAssetChangeRequest": {
        "className": "PHAssetChangeRequest",
        "methodNames": [
          "changeRequestForAsset_",
          "creationRequestForAssetFromImage_",
          "revertAssetContentToOriginal",
          "deleteAssets_",
          "creationRequestForAssetFromImageAtFileURL_",
          "creationRequestForAssetFromVideoAtFileURL_"
        ]
      },
      "PHContentEditingInput": {
        "className": "PHContentEditingInput",
        "methodNames": []
      },
      "PHVideoRequestOptions": {
        "className": "PHVideoRequestOptions",
        "methodNames": []
      },
      "PHAssetResourceRequestOptions": {
        "className": "PHAssetResourceRequestOptions",
        "methodNames": []
      },
      "PHAssetResourceManager": {
        "className": "PHAssetResourceManager",
        "methodNames": [
          "defaultManager",
          "requestDataForAssetResource_options_dataReceivedHandler_completionHandler_",
          "writeDataForAssetResource_toFile_options_completionHandler_",
          "cancelDataRequest_"
        ]
      },
      "PHObjectChangeDetails": {
        "className": "PHObjectChangeDetails",
        "methodNames": []
      },
      "PHAssetCollectionChangeRequest": {
        "className": "PHAssetCollectionChangeRequest",
        "methodNames": [
          "addAssets_",
          "moveAssetsAtIndexes_toIndex_",
          "deleteAssetCollections_",
          "insertAssets_atIndexes_",
          "creationRequestForAssetCollectionWithTitle_",
          "changeRequestForAssetCollection_assets_",
          "replaceAssetsAtIndexes_withAssets_",
          "removeAssets_",
          "removeAssetsAtIndexes_",
          "changeRequestForAssetCollection_"
        ]
      },
      "PHImageManager": {
        "className": "PHImageManager",
        "methodNames": [
          "defaultManager"
        ]
      },
      "PHAssetResourceCreationOptions": {
        "className": "PHAssetResourceCreationOptions",
        "methodNames": []
      },
      "PHChange": {
        "className": "PHChange",
        "methodNames": [
          "changeDetailsForObject_",
          "changeDetailsForFetchResult_"
        ]
      },
      "PHLivePhoto": {
        "className": "PHLivePhoto",
        "methodNames": [
          "cancelLivePhotoRequestWithRequestID_",
          "requestLivePhotoWithResourceFileURLs_placeholderImage_targetSize_contentMode_resultHandler_"
        ]
      },
      "PHObject": {
        "className": "PHObject",
        "methodNames": []
      },
      "PHFetchResultChangeDetails": {
        "className": "PHFetchResultChangeDetails",
        "methodNames": []
      },
      "PHAssetCollection": {
        "className": "PHAssetCollection",
        "methodNames": [
          "transientAssetCollectionWithAssetFetchResult_title_",
          "fetchAssetCollectionsWithType_subtype_options_",
          "transientAssetCollectionWithAssets_title_",
          "fetchMomentsWithOptions_",
          "fetchMomentsInMomentList_options_",
          "fetchAssetCollectionsWithLocalIdentifiers_options_",
          "fetchAssetCollectionsWithALAssetGroupURLs_options_",
          "fetchAssetCollectionsContainingAsset_withType_options_"
        ]
      },
      "PHContentEditingOutput": {
        "className": "PHContentEditingOutput",
        "methodNames": [
          "initWithPlaceholderForCreatedAsset_",
          "initWithContentEditingInput_"
        ]
      },
      "PHCollectionList": {
        "className": "PHCollectionList",
        "methodNames": [
          "transientCollectionListWithCollectionsFetchResult_title_",
          "fetchMomentListsWithSubtype_options_",
          "fetchCollectionListsWithLocalIdentifiers_options_",
          "fetchCollectionListsContainingCollection_options_",
          "transientCollectionListWithCollections_title_",
          "fetchMomentListsWithSubtype_containingMoment_options_",
          "fetchCollectionListsWithType_subtype_options_"
        ]
      },
      "PHFetchResult": {
        "className": "PHFetchResult",
        "methodNames": [
          "objectsAtIndexes_",
          "enumerateObjectsUsingBlock_",
          "enumerateObjectsWithOptions_usingBlock_",
          "containsObject_",
          "indexOfObject_",
          "enumerateObjectsAtIndexes_options_usingBlock_",
          "countOfAssetsWithMediaType_",
          "objectAtIndexedSubscript_",
          "objectAtIndex_",
          "indexOfObject_inRange_"
        ]
      },
      "PHCollection": {
        "className": "PHCollection",
        "methodNames": [
          "fetchCollectionsInCollectionList_options_",
          "fetchTopLevelUserCollectionsWithOptions_",
          "canPerformEditOperation_"
        ]
      },
      "PHFetchOptions": {
        "className": "PHFetchOptions",
        "methodNames": []
      },
      "PHPhotoLibrary": {
        "className": "PHPhotoLibrary",
        "methodNames": [
          "sharedPhotoLibrary"
        ]
      },
      "PHContentEditingInputRequestOptions": {
        "className": "PHContentEditingInputRequestOptions",
        "methodNames": []
      },
      "PHLivePhotoRequestOptions": {
        "className": "PHLivePhotoRequestOptions",
        "methodNames": []
      },
      "PHCachingImageManager": {
        "className": "PHCachingImageManager",
        "methodNames": [
          "startCachingImagesForAssets_targetSize_contentMode_options_",
          "stopCachingImagesForAssets_targetSize_contentMode_options_",
          "stopCachingImagesForAllAssets"
        ]
      },
      "PHImageRequestOptions": {
        "className": "PHImageRequestOptions",
        "methodNames": []
      }
    }
  },
  "CoreAudio.framework": {
    "frameworkName": "CoreAudio.framework",
    "classes": {}
  },
  "Twitter.framework": {
    "frameworkName": "Twitter.framework",
    "classes": {
      "TWTweetComposeViewController": {
        "className": "TWTweetComposeViewController",
        "methodNames": [
          "canSendTweet",
          "setInitialText_",
          "removeAllURLs",
          "addImage_",
          "addURL_",
          "removeAllImages"
        ]
      },
      "TWRequest": {
        "className": "TWRequest",
        "methodNames": [
          "initWithURL_parameters_requestMethod_",
          "signedURLRequest",
          "performRequestWithHandler_",
          "addMultiPartData_withName_type_"
        ]
      }
    }
  },
  "WebKit.framework": {
    "frameworkName": "WebKit.framework",
    "classes": {
      "WKWebsiteDataRecord": {
        "className": "WKWebsiteDataRecord",
        "methodNames": []
      },
      "WKBackForwardListItem": {
        "className": "WKBackForwardListItem",
        "methodNames": []
      },
      "WKScriptMessage": {
        "className": "WKScriptMessage",
        "methodNames": []
      },
      "WKBackForwardList": {
        "className": "WKBackForwardList",
        "methodNames": [
          "itemAtIndex_"
        ]
      },
      "WKWebViewConfiguration": {
        "className": "WKWebViewConfiguration",
        "methodNames": []
      },
      "WKWebsiteDataStore": {
        "className": "WKWebsiteDataStore",
        "methodNames": [
          "defaultDataStore"
        ]
      },
      "WKSecurityOrigin": {
        "className": "WKSecurityOrigin",
        "methodNames": [
          "init"
        ]
      },
      "WKUserScript": {
        "className": "WKUserScript",
        "methodNames": [
          "initWithSource_injectionTime_forMainFrameOnly_"
        ]
      },
      "WKFrameInfo": {
        "className": "WKFrameInfo",
        "methodNames": []
      },
      "WKWindowFeatures": {
        "className": "WKWindowFeatures",
        "methodNames": []
      },
      "WKPreferences": {
        "className": "WKPreferences",
        "methodNames": []
      },
      "WKWebView": {
        "className": "WKWebView",
        "methodNames": [
          "loadRequest_",
          "reloadFromOrigin",
          "goForward_",
          "reload_",
          "goToBackForwardListItem_",
          "stopLoading",
          "setMagnification_centeredAtPoint_",
          "loadFileURL_allowingReadAccessToURL_",
          "initWithCoder_",
          "loadHTMLString_baseURL_",
          "evaluateJavaScript_completionHandler_",
          "goBack_",
          "loadData_MIMEType_characterEncodingName_baseURL_",
          "initWithFrame_configuration_",
          "goBack",
          "reload",
          "stopLoading_",
          "goForward",
          "reloadFromOrigin_"
        ]
      },
      "WKProcessPool": {
        "className": "WKProcessPool",
        "methodNames": []
      },
      "WKNavigationAction": {
        "className": "WKNavigationAction",
        "methodNames": []
      },
      "WKNavigationResponse": {
        "className": "WKNavigationResponse",
        "methodNames": []
      },
      "WKUserContentController": {
        "className": "WKUserContentController",
        "methodNames": [
          "addUserScript_",
          "removeAllUserScripts",
          "addScriptMessageHandler_name_",
          "removeScriptMessageHandlerForName_"
        ]
      },
      "WKNavigation": {
        "className": "WKNavigation",
        "methodNames": []
      }
    }
  },
  "AssetsLibrary.framework": {
    "frameworkName": "AssetsLibrary.framework",
    "classes": {
      "ALAssetsGroup": {
        "className": "ALAssetsGroup",
        "methodNames": [
          "valueForProperty_"
        ]
      },
      "ALAssetsLibrary": {
        "className": "ALAssetsLibrary",
        "methodNames": [
          "enumerateGroupsWithTypes_usingBlock_failureBlock_"
        ]
      },
      "ALAssetRepresentation": {
        "className": "ALAssetRepresentation",
        "methodNames": [
          "UTI"
        ]
      },
      "ALAsset": {
        "className": "ALAsset",
        "methodNames": [
          "valueForProperty_"
        ]
      },
      "ALAssetsFilter": {
        "className": "ALAssetsFilter",
        "methodNames": [
          "allAssets",
          "allVideos",
          "allPhotos"
        ]
      }
    }
  },
  "CoreAudioKit.framework": {
    "frameworkName": "CoreAudioKit.framework",
    "classes": {
      "CABTMIDILocalPeripheralViewController": {
        "className": "CABTMIDILocalPeripheralViewController",
        "methodNames": []
      },
      "CAInterAppAudioTransportView": {
        "className": "CAInterAppAudioTransportView",
        "methodNames": [
          "setOutputAudioUnit_"
        ]
      },
      "CAInterAppAudioSwitcherView": {
        "className": "CAInterAppAudioSwitcherView",
        "methodNames": [
          "setOutputAudioUnit_",
          "contentWidth"
        ]
      },
      "AUAudioUnit": {
        "className": "AUAudioUnit",
        "methodNames": [
          "requestViewControllerWithCompletionHandler_"
        ]
      },
      "AUViewController": {
        "className": "AUViewController",
        "methodNames": []
      },
      "CABTMIDICentralViewController": {
        "className": "CABTMIDICentralViewController",
        "methodNames": []
      }
    }
  },
  "CoreLocation.framework": {
    "frameworkName": "CoreLocation.framework",
    "classes": {
      "CLBeaconRegion": {
        "className": "CLBeaconRegion",
        "methodNames": [
          "initWithProximityUUID_major_identifier_",
          "initWithProximityUUID_identifier_",
          "peripheralDataWithMeasuredPower_",
          "initWithProximityUUID_major_minor_identifier_"
        ]
      },
      "CLPlacemark": {
        "className": "CLPlacemark",
        "methodNames": [
          "initWithPlacemark_"
        ]
      },
      "CLLocationManager": {
        "className": "CLLocationManager",
        "methodNames": [
          "startMonitoringVisits",
          "locationServicesEnabled"
        ]
      },
      "CLCircularRegion": {
        "className": "CLCircularRegion",
        "methodNames": [
          "containsCoordinate_",
          "initWithCenter_radius_identifier_"
        ]
      },
      "CLBeacon": {
        "className": "CLBeacon",
        "methodNames": []
      },
      "CLRegion": {
        "className": "CLRegion",
        "methodNames": [
          "initCircularRegionWithCenter_radius_identifier_",
          "containsCoordinate_"
        ]
      },
      "CLHeading": {
        "className": "CLHeading",
        "methodNames": []
      },
      "CLFloor": {
        "className": "CLFloor",
        "methodNames": []
      },
      "CLLocation": {
        "className": "CLLocation",
        "methodNames": [
          "initWithLatitude_longitude_",
          "distanceFromLocation_",
          "initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_",
          "initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_",
          "getDistanceFrom_"
        ]
      },
      "CLVisit": {
        "className": "CLVisit",
        "methodNames": []
      },
      "CLGeocoder": {
        "className": "CLGeocoder",
        "methodNames": [
          "cancelGeocode",
          "reverseGeocodeLocation_completionHandler_",
          "geocodeAddressString_completionHandler_",
          "geocodeAddressString_inRegion_completionHandler_",
          "geocodeAddressDictionary_completionHandler_"
        ]
      }
    }
  },
  "VideoToolbox.framework": {
    "frameworkName": "VideoToolbox.framework",
    "classes": {}
  },
  "ContactsUI.framework": {
    "frameworkName": "ContactsUI.framework",
    "classes": {
      "CNContactViewController": {
        "className": "CNContactViewController",
        "methodNames": [
          "descriptorForRequiredKeys",
          "viewControllerForUnknownContact_",
          "viewControllerForNewContact_",
          "viewControllerForContact_",
          "highlightPropertyWithKey_identifier_"
        ]
      },
      "UIApplicationShortcutIcon": {
        "className": "UIApplicationShortcutIcon",
        "methodNames": [
          "iconWithContact_"
        ]
      },
      "CNContactPickerViewController": {
        "className": "CNContactPickerViewController",
        "methodNames": []
      }
    }
  },
  "PushKit.framework": {
    "frameworkName": "PushKit.framework",
    "classes": {
      "PKPushPayload": {
        "className": "PKPushPayload",
        "methodNames": []
      },
      "PKPushCredentials": {
        "className": "PKPushCredentials",
        "methodNames": []
      },
      "PKPushRegistry": {
        "className": "PKPushRegistry",
        "methodNames": [
          "pushTokenForType_",
          "initWithQueue_"
        ]
      }
    }
  },
  "CoreMedia.framework": {
    "frameworkName": "CoreMedia.framework",
    "classes": {}
  },
  "MediaAccessibility.framework": {
    "frameworkName": "MediaAccessibility.framework",
    "classes": {}
  },
  "MultipeerConnectivity.framework": {
    "frameworkName": "MultipeerConnectivity.framework",
    "classes": {
      "MCNearbyServiceAdvertiser": {
        "className": "MCNearbyServiceAdvertiser",
        "methodNames": [
          "initWithPeer_discoveryInfo_serviceType_",
          "stopAdvertisingPeer",
          "startAdvertisingPeer"
        ]
      },
      "MCAdvertiserAssistant": {
        "className": "MCAdvertiserAssistant",
        "methodNames": [
          "stop",
          "initWithServiceType_discoveryInfo_session_",
          "start"
        ]
      },
      "MCBrowserViewController": {
        "className": "MCBrowserViewController",
        "methodNames": [
          "initWithServiceType_session_",
          "initWithBrowser_session_"
        ]
      },
      "MCNearbyServiceBrowser": {
        "className": "MCNearbyServiceBrowser",
        "methodNames": [
          "startBrowsingForPeers",
          "stopBrowsingForPeers",
          "initWithPeer_serviceType_",
          "invitePeer_toSession_withContext_timeout_"
        ]
      },
      "MCPeerID": {
        "className": "MCPeerID",
        "methodNames": [
          "initWithDisplayName_"
        ]
      },
      "MCSession": {
        "className": "MCSession",
        "methodNames": [
          "initWithPeer_",
          "cancelConnectPeer_",
          "nearbyConnectionDataForPeer_withCompletionHandler_",
          "connectPeer_withNearbyConnectionData_"
        ]
      }
    }
  },
  "HealthKit.framework": {
    "frameworkName": "HealthKit.framework",
    "classes": {
      "HKUnit": {
        "className": "HKUnit",
        "methodNames": [
          "calorieUnit",
          "unitDividedByUnit_",
          "minuteUnit",
          "percentUnit",
          "dayUnit",
          "jouleUnitWithMetricPrefix_",
          "pascalUnitWithMetricPrefix_",
          "stoneUnit",
          "pascalUnit",
          "degreeCelsiusUnit",
          "moleUnitWithMolarMass_",
          "unitMultipliedByUnit_",
          "moleUnitWithMetricPrefix_molarMass_",
          "jouleUnit",
          "poundUnit",
          "kilocalorieUnit",
          "secondUnit",
          "kelvinUnit",
          "countUnit",
          "reciprocalUnit",
          "ounceUnit",
          "literUnitWithMetricPrefix_",
          "unitRaisedToPower_",
          "centimeterOfWaterUnit",
          "gramUnitWithMetricPrefix_",
          "meterUnitWithMetricPrefix_",
          "siemenUnitWithMetricPrefix_",
          "hourUnit",
          "atmosphereUnit",
          "gramUnit",
          "millimeterOfMercuryUnit",
          "secondUnitWithMetricPrefix_",
          "siemenUnit",
          "degreeFahrenheitUnit"
        ]
      },
      "HKWorkout": {
        "className": "HKWorkout",
        "methodNames": []
      },
      "HKDeletedObject": {
        "className": "HKDeletedObject",
        "methodNames": []
      },
      "HKSource": {
        "className": "HKSource",
        "methodNames": []
      },
      "HKStatisticsQuery": {
        "className": "HKStatisticsQuery",
        "methodNames": [
          "initWithQuantityType_quantitySamplePredicate_options_completionHandler_"
        ]
      },
      "HKAnchoredObjectQuery": {
        "className": "HKAnchoredObjectQuery",
        "methodNames": []
      },
      "HKQueryAnchor": {
        "className": "HKQueryAnchor",
        "methodNames": [
          "anchorFromValue_"
        ]
      },
      "HKStatisticsCollectionQuery": {
        "className": "HKStatisticsCollectionQuery",
        "methodNames": [
          "initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents_"
        ]
      },
      "HKCategoryType": {
        "className": "HKCategoryType",
        "methodNames": []
      },
      "HKWorkoutEvent": {
        "className": "HKWorkoutEvent",
        "methodNames": []
      },
      "HKObject": {
        "className": "HKObject",
        "methodNames": []
      },
      "HKCorrelationType": {
        "className": "HKCorrelationType",
        "methodNames": []
      },
      "HKHealthStore": {
        "className": "HKHealthStore",
        "methodNames": [
          "addSamples_toWorkout_completion_",
          "isHealthDataAvailable",
          "disableAllBackgroundDeliveryWithCompletion_",
          "preferredUnitsForQuantityTypes_completion_",
          "enableBackgroundDeliveryForType_frequency_withCompletion_",
          "disableBackgroundDeliveryForType_withCompletion_"
        ]
      },
      "HKSourceQuery": {
        "className": "HKSourceQuery",
        "methodNames": [
          "initWithSampleType_samplePredicate_completionHandler_"
        ]
      },
      "HKCharacteristicType": {
        "className": "HKCharacteristicType",
        "methodNames": []
      },
      "HKSampleQuery": {
        "className": "HKSampleQuery",
        "methodNames": []
      },
      "HKFitzpatrickSkinTypeObject": {
        "className": "HKFitzpatrickSkinTypeObject",
        "methodNames": []
      },
      "HKQuantity": {
        "className": "HKQuantity",
        "methodNames": [
          "init",
          "quantityWithUnit_doubleValue_",
          "isCompatibleWithUnit_",
          "compare_",
          "doubleValueForUnit_"
        ]
      },
      "HKCategorySample": {
        "className": "HKCategorySample",
        "methodNames": []
      },
      "HKDevice": {
        "className": "HKDevice",
        "methodNames": []
      },
      "HKObjectType": {
        "className": "HKObjectType",
        "methodNames": []
      },
      "HKStatistics": {
        "className": "HKStatistics",
        "methodNames": []
      },
      "HKWorkoutType": {
        "className": "HKWorkoutType",
        "methodNames": []
      },
      "HKQuantitySample": {
        "className": "HKQuantitySample",
        "methodNames": []
      },
      "HKObserverQuery": {
        "className": "HKObserverQuery",
        "methodNames": [
          "initWithSampleType_predicate_updateHandler_"
        ]
      },
      "HKBiologicalSexObject": {
        "className": "HKBiologicalSexObject",
        "methodNames": []
      },
      "HKQuery": {
        "className": "HKQuery",
        "methodNames": [
          "predicateForQuantitySamplesWithOperatorType_quantity_",
          "predicateForWorkoutsWithWorkoutActivityType_",
          "predicateForCategorySamplesWithOperatorType_value_",
          "predicateForWorkoutsWithOperatorType_totalDistance_",
          "predicateForWorkoutsWithOperatorType_duration_",
          "predicateForObjectsWithMetadataKey_",
          "predicateForWorkoutsWithOperatorType_totalEnergyBurned_",
          "predicateForSamplesWithStartDate_endDate_options_"
        ]
      },
      "HKBloodTypeObject": {
        "className": "HKBloodTypeObject",
        "methodNames": []
      },
      "HKStatisticsCollection": {
        "className": "HKStatisticsCollection",
        "methodNames": [
          "init",
          "sources",
          "enumerateStatisticsFromDate_toDate_withBlock_",
          "statisticsForDate_",
          "statistics"
        ]
      },
      "HKSampleType": {
        "className": "HKSampleType",
        "methodNames": []
      },
      "HKCorrelationQuery": {
        "className": "HKCorrelationQuery",
        "methodNames": []
      },
      "HKSample": {
        "className": "HKSample",
        "methodNames": []
      },
      "HKCorrelation": {
        "className": "HKCorrelation",
        "methodNames": []
      },
      "HKQuantityType": {
        "className": "HKQuantityType",
        "methodNames": [
          "isCompatibleWithUnit_"
        ]
      },
      "HKWorkoutSession": {
        "className": "HKWorkoutSession",
        "methodNames": []
      },
      "HKSourceRevision": {
        "className": "HKSourceRevision",
        "methodNames": []
      }
    }
  },
  "NewsstandKit.framework": {
    "frameworkName": "NewsstandKit.framework",
    "classes": {
      "NKIssue": {
        "className": "NKIssue",
        "methodNames": [
          "addAssetWithRequest_"
        ]
      },
      "NKAssetDownload": {
        "className": "NKAssetDownload",
        "methodNames": [
          "downloadWithDelegate_"
        ]
      },
      "NKLibrary": {
        "className": "NKLibrary",
        "methodNames": [
          "issueWithName_",
          "removeIssue_",
          "addIssueWithName_date_",
          "sharedLibrary"
        ]
      },
      "NSURLConnection": {
        "className": "NSURLConnection",
        "methodNames": []
      }
    }
  },
  "CoreImage.framework": {
    "frameworkName": "CoreImage.framework",
    "classes": {
      "CIFilterShape": {
        "className": "CIFilterShape",
        "methodNames": [
          "unionWith_",
          "intersectWithRect_",
          "insetByX_Y_",
          "initWithRect_",
          "intersectWith_",
          "shapeWithRect_",
          "transformBy_interior_",
          "unionWithRect_"
        ]
      },
      "NSObject": {
        "className": "NSObject",
        "methodNames": [
          "provideImageData_bytesPerRow_origin__size__userInfo_"
        ]
      },
      "CIQRCodeFeature": {
        "className": "CIQRCodeFeature",
        "methodNames": []
      },
      "CIContext": {
        "className": "CIContext",
        "methodNames": [
          "offlineGPUCount"
        ]
      },
      "CIFeature": {
        "className": "CIFeature",
        "methodNames": []
      },
      "CIColor": {
        "className": "CIColor",
        "methodNames": [
          "colorWithRed_green_blue_",
          "initWithCGColor_",
          "colorWithRed_green_blue_alpha_",
          "colorWithCGColor_",
          "colorWithString_",
          "initWithRed_green_blue_alpha_",
          "initWithRed_green_blue_"
        ]
      },
      "CIFaceFeature": {
        "className": "CIFaceFeature",
        "methodNames": []
      },
      "CITextFeature": {
        "className": "CITextFeature",
        "methodNames": []
      },
      "CIRectangleFeature": {
        "className": "CIRectangleFeature",
        "methodNames": []
      },
      "CIImageAccumulator": {
        "className": "CIImageAccumulator",
        "methodNames": [
          "setImage_",
          "image",
          "initWithExtent_format_",
          "initWithExtent_format_colorSpace_",
          "clear",
          "imageAccumulatorWithExtent_format_colorSpace_",
          "imageAccumulatorWithExtent_format_",
          "setImage_dirtyRect_"
        ]
      },
      "CIWarpKernel": {
        "className": "CIWarpKernel",
        "methodNames": [
          "kernelWithString_"
        ]
      },
      "CIKernel": {
        "className": "CIKernel",
        "methodNames": [
          "CI_ARRAY"
        ]
      },
      "CIColorKernel": {
        "className": "CIColorKernel",
        "methodNames": [
          "kernelWithString_"
        ]
      },
      "CISampler": {
        "className": "CISampler",
        "methodNames": [
          "samplerWithImage_"
        ]
      },
      "CIDetector": {
        "className": "CIDetector",
        "methodNames": [
          "detectorOfType_context_options_"
        ]
      },
      "CIFilter": {
        "className": "CIFilter",
        "methodNames": [
          "filterWithName_",
          "serializedXMPFromFilters_"
        ]
      },
      "CIVector": {
        "className": "CIVector",
        "methodNames": [
          "vectorWithCGRect_",
          "initWithX_Y_Z_",
          "vectorWithValues_count_",
          "vectorWithString_",
          "initWithCGPoint_",
          "initWithValues_count_",
          "initWithCGAffineTransform_",
          "vectorWithCGPoint_",
          "vectorWithX_Y_",
          "vectorWithX_Y_Z_",
          "initWithX_Y_",
          "vectorWithCGAffineTransform_",
          "vectorWithX_",
          "initWithString_",
          "vectorWithX_Y_Z_W_",
          "initWithX_",
          "initWithCGRect_",
          "initWithX_Y_Z_W_",
          "valueAtIndex_"
        ]
      },
      "CIImage": {
        "className": "CIImage",
        "methodNames": [
          "imageWithImageProvider_size__format_colorSpace_options_"
        ]
      }
    }
  },
  "AVFoundation.framework": {
    "frameworkName": "AVFoundation.framework",
    "classes": {
      "AVPlayerItem": {
        "className": "AVPlayerItem",
        "methodNames": [
          "initWithAsset_automaticallyLoadedAssetKeys_",
          "removeOutput_",
          "initWithAsset_",
          "errorLog",
          "playerItemWithAsset_",
          "initWithURL_",
          "accessLog",
          "currentTime",
          "selectedMediaOptionInMediaSelectionGroup_",
          "selectMediaOptionAutomaticallyInMediaSelectionGroup_",
          "addOutput_",
          "playerItemWithAsset_automaticallyLoadedAssetKeys_",
          "selectMediaOption_inMediaSelectionGroup_",
          "playerItemWithURL_"
        ]
      },
      "AVAssetTrackSegment": {
        "className": "AVAssetTrackSegment",
        "methodNames": []
      },
      "AVPlayerLayer": {
        "className": "AVPlayerLayer",
        "methodNames": [
          "playerLayerWithPlayer_"
        ]
      },
      "AVMutableAudioMixInputParameters": {
        "className": "AVMutableAudioMixInputParameters",
        "methodNames": [
          "audioMixInputParametersWithTrack_"
        ]
      },
      "AVCaptureVideoPreviewLayer": {
        "className": "AVCaptureVideoPreviewLayer",
        "methodNames": [
          "layerWithSession_"
        ]
      },
      "AVAssetWriterInputMetadataAdaptor": {
        "className": "AVAssetWriterInputMetadataAdaptor",
        "methodNames": [
          "assetWriterInputMetadataAdaptorWithAssetWriterInput_",
          "initWithAssetWriterInput_",
          "appendTimedMetadataGroup_"
        ]
      },
      "AVAudioUnitGenerator": {
        "className": "AVAudioUnitGenerator",
        "methodNames": [
          "initWithAudioComponentDescription_"
        ]
      },
      "AVAsynchronousVideoCompositionRequest": {
        "className": "AVAsynchronousVideoCompositionRequest",
        "methodNames": [
          "sourceFrameByTrackID_",
          "finishWithComposedVideoFrame_",
          "finishWithError_",
          "finishCancelledRequest"
        ]
      },
      "AVAudioSessionRouteDescription": {
        "className": "AVAudioSessionRouteDescription",
        "methodNames": []
      },
      "AVCaptureInputPort": {
        "className": "AVCaptureInputPort",
        "methodNames": []
      },
      "NSValue": {
        "className": "NSValue",
        "methodNames": [
          "valueWithCMTimeRange_",
          "valueWithCMTimeMapping_",
          "valueWithCMTime_"
        ]
      },
      "AVCaptureAudioFileOutput": {
        "className": "AVCaptureAudioFileOutput",
        "methodNames": [
          "startRecordingToOutputFileURL_outputFileType_recordingDelegate_",
          "availableOutputFileTypes"
        ]
      },
      "AVSampleBufferDisplayLayer": {
        "className": "AVSampleBufferDisplayLayer",
        "methodNames": [
          "enqueueSampleBuffer_",
          "flush",
          "flushAndRemoveImage",
          "requestMediaDataWhenReadyOnQueue_usingBlock_",
          "stopRequestingMediaData"
        ]
      },
      "AVAssetReaderOutput": {
        "className": "AVAssetReaderOutput",
        "methodNames": [
          "resetForReadingTimeRanges_",
          "markConfigurationAsFinal"
        ]
      },
      "AVCaptureDeviceInput": {
        "className": "AVCaptureDeviceInput",
        "methodNames": [
          "initWithDevice_error_",
          "deviceInputWithDevice_error_"
        ]
      },
      "AVAudioPlayerNode": {
        "className": "AVAudioPlayerNode",
        "methodNames": [
          "scheduleBuffer_atTime_options_completionHandler_",
          "scheduleSegment_startingFrame_frameCount_atTime_completionHandler_",
          "play",
          "stop",
          "playAtTime_",
          "prepareWithFrameCount_",
          "scheduleBuffer_completionHandler_",
          "nodeTimeForPlayerTime_",
          "scheduleFile_atTime_completionHandler_",
          "playerTimeForNodeTime_",
          "pause"
        ]
      },
      "AVPlayerItemLegibleOutput": {
        "className": "AVPlayerItemLegibleOutput",
        "methodNames": [
          "initWithMediaSubtypesForNativeRepresentation_",
          "setDelegate_queue_"
        ]
      },
      "AVAudioEnvironmentNode": {
        "className": "AVAudioEnvironmentNode",
        "methodNames": []
      },
      "AVPlayerItemTrack": {
        "className": "AVPlayerItemTrack",
        "methodNames": []
      },
      "AVCaptureScreenInput": {
        "className": "AVCaptureScreenInput",
        "methodNames": [
          "initWithDisplayID_"
        ]
      },
      "AVCaptureStillImageOutput": {
        "className": "AVCaptureStillImageOutput",
        "methodNames": []
      },
      "AVMutableVideoCompositionInstruction": {
        "className": "AVMutableVideoCompositionInstruction",
        "methodNames": [
          "videoCompositionInstruction"
        ]
      },
      "AVAudioNode": {
        "className": "AVAudioNode",
        "methodNames": [
          "nameForInputBus_",
          "nameForOutputBus_",
          "reset",
          "installTapOnBus_bufferSize_format_block_",
          "inputFormatForBus_",
          "removeTapOnBus_",
          "outputFormatForBus_"
        ]
      },
      "AVMutableMediaSelection": {
        "className": "AVMutableMediaSelection",
        "methodNames": [
          "selectMediaOption_inMediaSelectionGroup_"
        ]
      },
      "AVAssetResourceLoadingContentInformationRequest": {
        "className": "AVAssetResourceLoadingContentInformationRequest",
        "methodNames": []
      },
      "AVAudioUnitTimeEffect": {
        "className": "AVAudioUnitTimeEffect",
        "methodNames": [
          "initWithAudioComponentDescription_"
        ]
      },
      "AVMetadataItemFilter": {
        "className": "AVMetadataItemFilter",
        "methodNames": [
          "metadataItemFilterForSharing"
        ]
      },
      "AVAssetReaderAudioMixOutput": {
        "className": "AVAssetReaderAudioMixOutput",
        "methodNames": [
          "assetReaderAudioMixOutputWithAudioTracks_audioSettings_",
          "initWithAudioTracks_audioSettings_"
        ]
      },
      "AVAssetResourceRenewalRequest": {
        "className": "AVAssetResourceRenewalRequest",
        "methodNames": []
      },
      "AVCaptureSession": {
        "className": "AVCaptureSession",
        "methodNames": [
          "canSetSessionPreset_"
        ]
      },
      "AVMutableDateRangeMetadataGroup": {
        "className": "AVMutableDateRangeMetadataGroup",
        "methodNames": []
      },
      "AVAudioEngine": {
        "className": "AVAudioEngine",
        "methodNames": [
          "init",
          "prepare",
          "startAndReturnError_",
          "detachNode_",
          "connect_to_format_",
          "disconnectNodeInput_",
          "outputConnectionPointsForNode_outputBus_",
          "disconnectNodeOutput_bus_",
          "pause",
          "connect_to_fromBus_toBus_format_",
          "connect_toConnectionPoints_fromBus_format_",
          "stop",
          "inputConnectionPointForNode_inputBus_",
          "disconnectNodeInput_bus_",
          "reset",
          "attachNode_",
          "disconnectNodeOutput_"
        ]
      },
      "AVAssetReaderVideoCompositionOutput": {
        "className": "AVAssetReaderVideoCompositionOutput",
        "methodNames": [
          "assetReaderVideoCompositionOutputWithVideoTracks_videoSettings_",
          "initWithVideoTracks_videoSettings_"
        ]
      },
      "AVPlayerItemErrorLog": {
        "className": "AVPlayerItemErrorLog",
        "methodNames": [
          "extendedLogData"
        ]
      },
      "AVAudioSequencer": {
        "className": "AVAudioSequencer",
        "methodNames": [
          "init",
          "dataWithSMPTEResolution_error_",
          "beatsForSeconds_",
          "beatsForHostTime_error_",
          "startAndReturnError_",
          "writeToURL_SMPTEResolution_replaceExisting_error_",
          "initWithAudioEngine_",
          "loadFromData_options_error_",
          "stop",
          "hostTimeForBeats_error_",
          "prepareToPlay",
          "secondsForBeats_",
          "loadFromURL_options_error_"
        ]
      },
      "AVAudioEnvironmentDistanceAttenuationParameters": {
        "className": "AVAudioEnvironmentDistanceAttenuationParameters",
        "methodNames": []
      },
      "AVCaptureAudioPreviewOutput": {
        "className": "AVCaptureAudioPreviewOutput",
        "methodNames": []
      },
      "AVAudioMixInputParameters": {
        "className": "AVAudioMixInputParameters",
        "methodNames": []
      },
      "AVAsset": {
        "className": "AVAsset",
        "methodNames": [
          "mediaSelectionGroupForMediaCharacteristic_",
          "chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_",
          "chapterMetadataGroupsBestMatchingPreferredLanguages_",
          "trackWithTrackID_",
          "assetWithURL_",
          "metadataForFormat_",
          "unusedTrackID",
          "cancelLoading",
          "tracksWithMediaType_",
          "tracksWithMediaCharacteristic_"
        ]
      },
      "AVCaptureConnection": {
        "className": "AVCaptureConnection",
        "methodNames": [
          "connectionWithInputPorts_output_"
        ]
      },
      "AVAssetTrack": {
        "className": "AVAssetTrack",
        "methodNames": [
          "segmentForTrackTime_",
          "samplePresentationTimeForTrackTime_",
          "hasMediaCharacteristic_",
          "metadataForFormat_",
          "associatedTracksOfType_"
        ]
      },
      "AVAudioUnitSampler": {
        "className": "AVAudioUnitSampler",
        "methodNames": [
          "loadInstrumentAtURL_error_",
          "loadSoundBankInstrumentAtURL_program_bankMSB_bankLSB_error_",
          "loadAudioFilesAtURLs_error_"
        ]
      },
      "AVAudioUnitMIDIInstrument": {
        "className": "AVAudioUnitMIDIInstrument",
        "methodNames": [
          "sendController_withValue_onChannel_",
          "sendMIDIEvent_data1_",
          "initWithAudioComponentDescription_",
          "sendPitchBend_onChannel_",
          "sendProgramChange_onChannel_",
          "stopNote_onChannel_",
          "sendPressure_onChannel_",
          "sendPressureForKey_withValue_onChannel_",
          "sendProgramChange_bankMSB_bankLSB_onChannel_",
          "sendMIDISysExEvent_",
          "startNote_withVelocity_onChannel_",
          "sendMIDIEvent_data1_data2_"
        ]
      },
      "AVCaptureOutput": {
        "className": "AVCaptureOutput",
        "methodNames": []
      },
      "AVMetadataMachineReadableCodeObject": {
        "className": "AVMetadataMachineReadableCodeObject",
        "methodNames": []
      },
      "AVMutableAudioMix": {
        "className": "AVMutableAudioMix",
        "methodNames": [
          "audioMix"
        ]
      },
      "AVPlayer": {
        "className": "AVPlayer",
        "methodNames": [
          "play",
          "setMediaSelectionCriteria_forMediaCharacteristic_",
          "initWithPlayerItem_",
          "playerWithURL_",
          "seekToTime_",
          "seekToDate_",
          "seekToTime_completionHandler_",
          "playerWithPlayerItem_",
          "initWithURL_",
          "seekToDate_completionHandler_",
          "pause",
          "currentTime",
          "seekToTime_toleranceBefore_toleranceAfter_",
          "removeTimeObserver_",
          "replaceCurrentItemWithPlayerItem_",
          "seekToTime_toleranceBefore_toleranceAfter_completionHandler_",
          "mediaSelectionCriteriaForMediaCharacteristic_",
          "setRate_time_atHostTime_",
          "addPeriodicTimeObserverForInterval_queue_usingBlock_",
          "addBoundaryTimeObserverForTimes_queue_usingBlock_"
        ]
      },
      "AVAssetWriterInputGroup": {
        "className": "AVAssetWriterInputGroup",
        "methodNames": [
          "initWithInputs_defaultInput_",
          "assetWriterInputGroupWithInputs_defaultInput_"
        ]
      },
      "AVCaptureMetadataOutput": {
        "className": "AVCaptureMetadataOutput",
        "methodNames": [
          "setMetadataObjectsDelegate_queue_"
        ]
      },
      "AVAudioMix": {
        "className": "AVAudioMix",
        "methodNames": []
      },
      "AVAssetReaderTrackOutput": {
        "className": "AVAssetReaderTrackOutput",
        "methodNames": [
          "initWithTrack_outputSettings_",
          "assetReaderTrackOutputWithTrack_outputSettings_"
        ]
      },
      "AVSpeechSynthesizer": {
        "className": "AVSpeechSynthesizer",
        "methodNames": [
          "continueSpeaking",
          "speakUtterance_",
          "stopSpeakingAtBoundary_",
          "pauseSpeakingAtBoundary_"
        ]
      },
      "AVFragmentedAssetMinder": {
        "className": "AVFragmentedAssetMinder",
        "methodNames": [
          "fragmentedAssetMinderWithAsset_mindingInterval_"
        ]
      },
      "AVAudioSession": {
        "className": "AVAudioSession",
        "methodNames": [
          "sharedInstance",
          "setPreferredSampleRate_error_"
        ]
      },
      "AVVideoComposition": {
        "className": "AVVideoComposition",
        "methodNames": [
          "videoCompositionWithAsset_applyingCIFiltersWithHandler_",
          "videoCompositionWithPropertiesOfAsset_",
          "isValidForAsset_timeRange_validationDelegate_"
        ]
      },
      "AVFragmentedAsset": {
        "className": "AVFragmentedAsset",
        "methodNames": [
          "fragmentedAssetWithURL_options_",
          "trackWithTrackID_",
          "tracksWithMediaType_",
          "tracksWithMediaCharacteristic_"
        ]
      },
      "AVPlayerItemErrorLogEvent": {
        "className": "AVPlayerItemErrorLogEvent",
        "methodNames": []
      },
      "AVFragmentedAssetTrack": {
        "className": "AVFragmentedAssetTrack",
        "methodNames": []
      },
      "AVCaptureDevice": {
        "className": "AVCaptureDevice",
        "methodNames": [
          "devicesWithMediaType_",
          "setTransportControlsPlaybackMode_speed_",
          "isExposureModeSupported_",
          "defaultDeviceWithMediaType_",
          "hasMediaType_",
          "devices",
          "isFocusModeSupported_",
          "isWhiteBalanceModeSupported_",
          "unlockForConfiguration",
          "supportsAVCaptureSessionPreset_",
          "authorizationStatusForMediaType_",
          "deviceWithUniqueID_",
          "lockForConfiguration_"
        ]
      },
      "AVAudioUnitReverb": {
        "className": "AVAudioUnitReverb",
        "methodNames": [
          "loadFactoryPreset_"
        ]
      },
      "AVVideoCompositionCoreAnimationTool": {
        "className": "AVVideoCompositionCoreAnimationTool",
        "methodNames": [
          "videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer_inLayer_",
          "videoCompositionCoreAnimationToolWithAdditionalLayer_asTrackID_",
          "videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers_inLayer_"
        ]
      },
      "AVCaptureBracketedStillImageSettings": {
        "className": "AVCaptureBracketedStillImageSettings",
        "methodNames": []
      },
      "AVAudioInputNode": {
        "className": "AVAudioInputNode",
        "methodNames": []
      },
      "AVAudioCompressedBuffer": {
        "className": "AVAudioCompressedBuffer",
        "methodNames": [
          "initWithFormat_packetCapacity_",
          "initWithFormat_packetCapacity_maximumPacketSize_"
        ]
      },
      "AVCaptureInput": {
        "className": "AVCaptureInput",
        "methodNames": []
      },
      "AVCaptureAudioDataOutput": {
        "className": "AVCaptureAudioDataOutput",
        "methodNames": [
          "setSampleBufferDelegate_queue_"
        ]
      },
      "AVPlayerItemAccessLogEvent": {
        "className": "AVPlayerItemAccessLogEvent",
        "methodNames": []
      },
      "AVMediaSelectionGroup": {
        "className": "AVMediaSelectionGroup",
        "methodNames": [
          "mediaSelectionOptionsFromArray_withLocale_",
          "mediaSelectionOptionsFromArray_withoutMediaCharacteristics_",
          "mediaSelectionOptionWithPropertyList_",
          "mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_",
          "mediaSelectionOptionsFromArray_withMediaCharacteristics_",
          "playableMediaSelectionOptionsFromArray_"
        ]
      },
      "AVMetadataItem": {
        "className": "AVMetadataItem",
        "methodNames": [
          "metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_",
          "metadataItemsFromArray_withKey_keySpace_",
          "keyForIdentifier_",
          "identifierForKey_keySpace_",
          "metadataItemsFromArray_filteredByIdentifier_",
          "metadataItemsFromArray_filteredByMetadataItemFilter_",
          "metadataItemsFromArray_withLocale_",
          "metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_",
          "statusOfValueForKey_error_",
          "keySpaceForIdentifier_"
        ]
      },
      "AVPlayerItemOutput": {
        "className": "AVPlayerItemOutput",
        "methodNames": [
          "itemTimeForCVTimeStamp_",
          "itemTimeForHostTime_",
          "itemTimeForMachAbsoluteTime_"
        ]
      },
      "AVMutableVideoCompositionLayerInstruction": {
        "className": "AVMutableVideoCompositionLayerInstruction",
        "methodNames": []
      },
      "AVAudioTime": {
        "className": "AVAudioTime",
        "methodNames": [
          "timeWithAudioTimeStamp_sampleRate_",
          "secondsForHostTime_",
          "timeWithHostTime_",
          "hostTimeForSeconds_",
          "initWithSampleTime_atRate_",
          "timeWithSampleTime_atRate_",
          "extrapolateTimeFromAnchor_",
          "initWithHostTime_",
          "initWithAudioTimeStamp_sampleRate_",
          "timeWithHostTime_sampleTime_atRate_",
          "initWithHostTime_sampleTime_atRate_"
        ]
      },
      "AVAudioConverter": {
        "className": "AVAudioConverter",
        "methodNames": [
          "reset",
          "convertToBuffer_fromBuffer_error_",
          "convertToBuffer_error_withInputFromBlock_",
          "initFromFormat_toFormat_"
        ]
      },
      "AVAudioSessionDataSourceDescription": {
        "className": "AVAudioSessionDataSourceDescription",
        "methodNames": []
      },
      "AVMetadataGroup": {
        "className": "AVMetadataGroup",
        "methodNames": []
      },
      "AVAudioOutputNode": {
        "className": "AVAudioOutputNode",
        "methodNames": []
      },
      "AVCaptureManualExposureBracketedStillImageSettings": {
        "className": "AVCaptureManualExposureBracketedStillImageSettings",
        "methodNames": [
          "manualExposureSettingsWithExposureDuration_ISO_"
        ]
      },
      "AVCaptureAutoExposureBracketedStillImageSettings": {
        "className": "AVCaptureAutoExposureBracketedStillImageSettings",
        "methodNames": [
          "autoExposureSettingsWithExposureTargetBias_"
        ]
      },
      "AVComposition": {
        "className": "AVComposition",
        "methodNames": [
          "trackWithTrackID_",
          "tracksWithMediaType_",
          "tracksWithMediaCharacteristic_"
        ]
      },
      "AVAudioSessionChannelDescription": {
        "className": "AVAudioSessionChannelDescription",
        "methodNames": []
      },
      "AVMutableTimedMetadataGroup": {
        "className": "AVMutableTimedMetadataGroup",
        "methodNames": []
      },
      "AVAssetReaderOutputMetadataAdaptor": {
        "className": "AVAssetReaderOutputMetadataAdaptor",
        "methodNames": [
          "initWithAssetReaderTrackOutput_",
          "assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput_",
          "nextTimedMetadataGroup"
        ]
      },
      "AVAudioUnitComponentManager": {
        "className": "AVAudioUnitComponentManager",
        "methodNames": [
          "sharedAudioUnitComponentManager",
          "componentsMatchingPredicate_",
          "componentsMatchingDescription_",
          "componentsPassingTest_"
        ]
      },
      "AVSynchronizedLayer": {
        "className": "AVSynchronizedLayer",
        "methodNames": [
          "synchronizedLayerWithPlayerItem_"
        ]
      },
      "AVAssetReaderSampleReferenceOutput": {
        "className": "AVAssetReaderSampleReferenceOutput",
        "methodNames": [
          "assetReaderSampleReferenceOutputWithTrack_",
          "initWithTrack_"
        ]
      },
      "AVMetadataObject": {
        "className": "AVMetadataObject",
        "methodNames": []
      },
      "AVMutableComposition": {
        "className": "AVMutableComposition",
        "methodNames": [
          "insertEmptyTimeRange_",
          "trackWithTrackID_",
          "composition",
          "scaleTimeRange_toDuration_",
          "addMutableTrackWithMediaType_preferredTrackID_",
          "removeTimeRange_",
          "removeTrack_",
          "insertTimeRange_ofAsset_atTime_error_",
          "compositionWithURLAssetInitializationOptions_",
          "tracksWithMediaType_",
          "tracksWithMediaCharacteristic_",
          "mutableTrackCompatibleWithTrack_"
        ]
      },
      "AVAssetImageGenerator": {
        "className": "AVAssetImageGenerator",
        "methodNames": [
          "assetImageGeneratorWithAsset_",
          "generateCGImagesAsynchronouslyForTimes_completionHandler_",
          "cancelAllCGImageGeneration",
          "copyCGImageAtTime_actualTime_error_",
          "initWithAsset_"
        ]
      },
      "AVAudioRecorder": {
        "className": "AVAudioRecorder",
        "methodNames": [
          "initWithURL_settings_error_"
        ]
      },
      "AVAudioUnitDelay": {
        "className": "AVAudioUnitDelay",
        "methodNames": []
      },
      "AVAssetResourceLoadingRequest": {
        "className": "AVAssetResourceLoadingRequest",
        "methodNames": [
          "streamingContentKeyRequestDataForApp_contentIdentifier_options_error_",
          "finishLoadingWithError_",
          "finishLoading",
          "finishLoadingWithResponse_data_redirect_"
        ]
      },
      "AVAudioMixingDestination": {
        "className": "AVAudioMixingDestination",
        "methodNames": []
      },
      "AVMutableVideoComposition": {
        "className": "AVMutableVideoComposition",
        "methodNames": [
          "videoComposition",
          "videoCompositionWithAsset_applyingCIFiltersWithHandler_"
        ]
      },
      "AVCompositionTrackSegment": {
        "className": "AVCompositionTrackSegment",
        "methodNames": [
          "initWithTimeRange_",
          "compositionTrackSegmentWithURL_trackID_sourceTimeRange_targetTimeRange_",
          "compositionTrackSegmentWithTimeRange_",
          "initWithURL_trackID_sourceTimeRange_targetTimeRange_"
        ]
      },
      "AVSpeechUtterance": {
        "className": "AVSpeechUtterance",
        "methodNames": [
          "initWithString_",
          "speechUtteranceWithString_"
        ]
      },
      "AVAssetDownloadURLSession": {
        "className": "AVAssetDownloadURLSession",
        "methodNames": [
          "sessionWithConfiguration_assetDownloadDelegate_delegateQueue_"
        ]
      },
      "AVSpeechSynthesisVoice": {
        "className": "AVSpeechSynthesisVoice",
        "methodNames": [
          "speechVoices"
        ]
      },
      "AVTimedMetadataGroup": {
        "className": "AVTimedMetadataGroup",
        "methodNames": [
          "initWithSampleBuffer_",
          "copyFormatDescription",
          "initWithItems_timeRange_"
        ]
      },
      "AVAssetExportSession": {
        "className": "AVAssetExportSession",
        "methodNames": [
          "exportSessionWithAsset_presetName_",
          "exportPresetsCompatibleWithAsset_",
          "allExportPresets",
          "exportAsynchronouslyWithCompletionHandler_",
          "cancelExport",
          "determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler_",
          "initWithAsset_presetName_",
          "determineCompatibleFileTypesWithCompletionHandler_"
        ]
      },
      "AVOutputSettingsAssistant": {
        "className": "AVOutputSettingsAssistant",
        "methodNames": [
          "availableOutputSettingsPresets",
          "outputSettingsAssistantWithPreset_"
        ]
      },
      "AVAudioMixerNode": {
        "className": "AVAudioMixerNode",
        "methodNames": []
      },
      "AVMetadataFaceObject": {
        "className": "AVMetadataFaceObject",
        "methodNames": []
      },
      "AVAudioUnitDistortion": {
        "className": "AVAudioUnitDistortion",
        "methodNames": [
          "loadFactoryPreset_"
        ]
      },
      "AVVideoCompositionInstruction": {
        "className": "AVVideoCompositionInstruction",
        "methodNames": []
      },
      "AVAudioChannelLayout": {
        "className": "AVAudioChannelLayout",
        "methodNames": [
          "isEqual_",
          "initWithLayoutTag_",
          "layoutWithLayoutTag_",
          "layoutWithLayout_",
          "initWithLayout_"
        ]
      },
      "AVMusicTrack": {
        "className": "AVMusicTrack",
        "methodNames": []
      },
      "AVQueuePlayer": {
        "className": "AVQueuePlayer",
        "methodNames": [
          "removeItem_",
          "canInsertItem_afterItem_",
          "initWithItems_",
          "insertItem_afterItem_",
          "queuePlayerWithItems_",
          "advanceToNextItem",
          "removeAllItems",
          "items"
        ]
      },
      "AVAssetTrackGroup": {
        "className": "AVAssetTrackGroup",
        "methodNames": []
      },
      "AVAudioUnit": {
        "className": "AVAudioUnit",
        "methodNames": [
          "instantiateWithComponentDescription_options_completionHandler_",
          "loadAudioUnitPresetAtURL_error_"
        ]
      },
      "AVCaptureMovieFileOutput": {
        "className": "AVCaptureMovieFileOutput",
        "methodNames": []
      },
      "AVAudioIONode": {
        "className": "AVAudioIONode",
        "methodNames": []
      },
      "AVAudioUnitComponent": {
        "className": "AVAudioUnitComponent",
        "methodNames": [
          "supportsNumberInputChannels_outputChannels_"
        ]
      },
      "AVMutableMetadataItem": {
        "className": "AVMutableMetadataItem",
        "methodNames": [
          "metadataItem"
        ]
      },
      "AVDateRangeMetadataGroup": {
        "className": "AVDateRangeMetadataGroup",
        "methodNames": [
          "initWithItems_startDate_endDate_"
        ]
      },
      "AVAssetWriterInputPixelBufferAdaptor": {
        "className": "AVAssetWriterInputPixelBufferAdaptor",
        "methodNames": [
          "appendPixelBuffer_withPresentationTime_",
          "assetWriterInputPixelBufferAdaptorWithAssetWriterInput_sourcePixelBufferAttributes_",
          "initWithAssetWriterInput_sourcePixelBufferAttributes_"
        ]
      },
      "AVAssetResourceLoader": {
        "className": "AVAssetResourceLoader",
        "methodNames": [
          "setDelegate_queue_"
        ]
      },
      "AVAssetResourceLoadingDataRequest": {
        "className": "AVAssetResourceLoadingDataRequest",
        "methodNames": [
          "respondWithData_"
        ]
      },
      "AVURLAsset": {
        "className": "AVURLAsset",
        "methodNames": [
          "URLAssetWithURL_options_",
          "audiovisualTypes",
          "compatibleTrackForCompositionTrack_",
          "audiovisualMIMETypes",
          "isPlayableExtendedMIMEType_",
          "initWithURL_options_"
        ]
      },
      "AVMetadataItemValueRequest": {
        "className": "AVMetadataItemValueRequest",
        "methodNames": [
          "respondWithError_",
          "respondWithValue_"
        ]
      },
      "AVTextStyleRule": {
        "className": "AVTextStyleRule",
        "methodNames": [
          "textStyleRuleWithTextMarkupAttributes_",
          "initWithTextMarkupAttributes_",
          "initWithTextMarkupAttributes_textSelector_",
          "textStyleRuleWithTextMarkupAttributes_textSelector_",
          "propertyListForTextStyleRules_",
          "textStyleRulesFromPropertyList_"
        ]
      },
      "AVAudioFormat": {
        "className": "AVAudioFormat",
        "methodNames": [
          "isEqual_",
          "initWithStreamDescription_channelLayout_",
          "initStandardFormatWithSampleRate_channels_",
          "initWithCommonFormat_sampleRate_channels_interleaved_",
          "initWithCMAudioFormatDescription_",
          "initWithStreamDescription_",
          "initStandardFormatWithSampleRate_channelLayout_",
          "initWithCommonFormat_sampleRate_interleaved_channelLayout_",
          "initWithSettings_"
        ]
      },
      "AVAudioUnitVarispeed": {
        "className": "AVAudioUnitVarispeed",
        "methodNames": []
      },
      "AVPlayerItemVideoOutput": {
        "className": "AVPlayerItemVideoOutput",
        "methodNames": [
          "initWithPixelBufferAttributes_",
          "hasNewPixelBufferForItemTime_",
          "setDelegate_queue_",
          "requestNotificationOfMediaDataChangeWithAdvanceInterval_",
          "copyPixelBufferForItemTime_itemTimeForDisplay_"
        ]
      },
      "AVCaptureAudioChannel": {
        "className": "AVCaptureAudioChannel",
        "methodNames": []
      },
      "AVCaptureDeviceInputSource": {
        "className": "AVCaptureDeviceInputSource",
        "methodNames": []
      },
      "AVPlayerMediaSelectionCriteria": {
        "className": "AVPlayerMediaSelectionCriteria",
        "methodNames": [
          "initWithPreferredLanguages_preferredMediaCharacteristics_"
        ]
      },
      "AVCaptureVideoDataOutput": {
        "className": "AVCaptureVideoDataOutput",
        "methodNames": [
          "setSampleBufferDelegate_queue_"
        ]
      },
      "AVAudioPlayer": {
        "className": "AVAudioPlayer",
        "methodNames": [
          "play",
          "initWithData_fileTypeHint_error_",
          "initWithData_error_",
          "stop",
          "playAtTime_",
          "updateMeters",
          "prepareToPlay",
          "peakPowerForChannel_",
          "averagePowerForChannel_",
          "initWithContentsOfURL_error_",
          "initWithContentsOfURL_fileTypeHint_error_",
          "pause"
        ]
      },
      "AVMediaSelectionOption": {
        "className": "AVMediaSelectionOption",
        "methodNames": [
          "hasMediaCharacteristic_",
          "metadataForFormat_",
          "propertyList",
          "displayNameWithLocale_",
          "associatedMediaSelectionOptionInMediaSelectionGroup_"
        ]
      },
      "AVAssetWriterInputPassDescription": {
        "className": "AVAssetWriterInputPassDescription",
        "methodNames": []
      },
      "AVPlayerItemAccessLog": {
        "className": "AVPlayerItemAccessLog",
        "methodNames": [
          "extendedLogData"
        ]
      },
      "AVAssetDownloadTask": {
        "className": "AVAssetDownloadTask",
        "methodNames": []
      },
      "AVMediaSelection": {
        "className": "AVMediaSelection",
        "methodNames": [
          "selectedMediaOptionInMediaSelectionGroup_",
          "mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup_"
        ]
      },
      "NSCoder": {
        "className": "NSCoder",
        "methodNames": [
          "encodeCMTimeRange_forKey_",
          "encodeCMTime_forKey_",
          "decodeCMTimeForKey_",
          "decodeCMTimeRangeForKey_",
          "encodeCMTimeMapping_forKey_",
          "decodeCMTimeMappingForKey_"
        ]
      },
      "AVAssetReader": {
        "className": "AVAssetReader",
        "methodNames": [
          "cancelReading",
          "addOutput_",
          "startReading",
          "canAddOutput_",
          "initWithAsset_error_",
          "assetReaderWithAsset_error_"
        ]
      },
      "AVAudioUnitEQFilterParameters": {
        "className": "AVAudioUnitEQFilterParameters",
        "methodNames": []
      },
      "AVAudioPCMBuffer": {
        "className": "AVAudioPCMBuffer",
        "methodNames": [
          "initWithPCMFormat_frameCapacity_"
        ]
      },
      "AVAssetWriter": {
        "className": "AVAssetWriter",
        "methodNames": [
          "canAddInput_",
          "cancelWriting",
          "initWithURL_fileType_error_",
          "startSessionAtSourceTime_",
          "canAddInputGroup_",
          "assetWriterWithURL_fileType_error_",
          "addInput_",
          "finishWritingWithCompletionHandler_",
          "startWriting",
          "addInputGroup_",
          "canApplyOutputSettings_forMediaType_",
          "finishWriting",
          "endSessionAtSourceTime_"
        ]
      },
      "AVAudioUnitEffect": {
        "className": "AVAudioUnitEffect",
        "methodNames": [
          "initWithAudioComponentDescription_"
        ]
      },
      "AVVideoCompositionRenderContext": {
        "className": "AVVideoCompositionRenderContext",
        "methodNames": []
      },
      "AVCompositionTrack": {
        "className": "AVCompositionTrack",
        "methodNames": []
      },
      "AVAudioFile": {
        "className": "AVAudioFile",
        "methodNames": [
          "initForReading_error_",
          "initForWriting_settings_error_",
          "writeFromBuffer_error_",
          "readIntoBuffer_frameCount_error_",
          "initForReading_commonFormat_interleaved_error_",
          "initForWriting_settings_commonFormat_interleaved_error_",
          "readIntoBuffer_error_"
        ]
      },
      "AVAsynchronousCIImageFilteringRequest": {
        "className": "AVAsynchronousCIImageFilteringRequest",
        "methodNames": [
          "finishWithImage_context_",
          "finishWithError_"
        ]
      },
      "AVVideoCompositionLayerInstruction": {
        "className": "AVVideoCompositionLayerInstruction",
        "methodNames": []
      },
      "AVAudioConnectionPoint": {
        "className": "AVAudioConnectionPoint",
        "methodNames": [
          "initWithNode_bus_"
        ]
      },
      "AVCaptureDeviceFormat": {
        "className": "AVCaptureDeviceFormat",
        "methodNames": []
      },
      "AVFrameRateRange": {
        "className": "AVFrameRateRange",
        "methodNames": []
      },
      "AVAudioEnvironmentReverbParameters": {
        "className": "AVAudioEnvironmentReverbParameters",
        "methodNames": [
          "loadFactoryReverbPreset_"
        ]
      },
      "AVPlayerItemMetadataOutput": {
        "className": "AVPlayerItemMetadataOutput",
        "methodNames": [
          "initWithIdentifiers_",
          "setDelegate_queue_"
        ]
      },
      "AVCaptureFileOutput": {
        "className": "AVCaptureFileOutput",
        "methodNames": [
          "resumeRecording",
          "pauseRecording",
          "startRecordingToOutputFileURL_recordingDelegate_",
          "stopRecording"
        ]
      },
      "AVMIDIPlayer": {
        "className": "AVMIDIPlayer",
        "methodNames": [
          "initWithContentsOfURL_soundBankURL_error_",
          "stop",
          "initWithData_soundBankURL_error_",
          "play_",
          "prepareToPlay"
        ]
      },
      "AVCaptureMetadataInput": {
        "className": "AVCaptureMetadataInput",
        "methodNames": [
          "appendTimedMetadataGroup_error_",
          "metadataInputWithFormatDescription_clock_",
          "initWithFormatDescription_clock_"
        ]
      },
      "AVAudioUnitTimePitch": {
        "className": "AVAudioUnitTimePitch",
        "methodNames": []
      },
      "AVAssetWriterInput": {
        "className": "AVAssetWriterInput",
        "methodNames": [
          "addTrackAssociationWithTrackOfInput_type_",
          "canAddTrackAssociationWithTrackOfInput_type_",
          "markCurrentPassAsFinished",
          "respondToEachPassDescriptionOnQueue_usingBlock_"
        ]
      },
      "AVAudioUnitEQ": {
        "className": "AVAudioUnitEQ",
        "methodNames": [
          "initWithNumberOfBands_"
        ]
      },
      "AVAudioSessionPortDescription": {
        "className": "AVAudioSessionPortDescription",
        "methodNames": []
      },
      "AVAudioBuffer": {
        "className": "AVAudioBuffer",
        "methodNames": []
      },
      "AVMutableCompositionTrack": {
        "className": "AVMutableCompositionTrack",
        "methodNames": [
          "insertEmptyTimeRange_",
          "validateTrackSegments_error_",
          "scaleTimeRange_toDuration_",
          "removeTimeRange_",
          "insertTimeRanges_ofTracks_atTime_error_",
          "insertTimeRange_ofTrack_atTime_error_"
        ]
      }
    }
  },
  "GLKit.framework": {
    "frameworkName": "GLKit.framework",
    "classes": {
      "GLKViewController": {
        "className": "GLKViewController",
        "methodNames": []
      },
      "GLKMesh": {
        "className": "GLKMesh",
        "methodNames": [
          "init",
          "newMeshesFromAsset_sourceMeshes_error_",
          "initWithMesh_error_"
        ]
      },
      "GLKReflectionMapEffect": {
        "className": "GLKReflectionMapEffect",
        "methodNames": [
          "prepareToDraw"
        ]
      },
      "GLKSkyboxEffect": {
        "className": "GLKSkyboxEffect",
        "methodNames": [
          "prepareToDraw",
          "draw"
        ]
      },
      "GLKEffectPropertyMaterial": {
        "className": "GLKEffectPropertyMaterial",
        "methodNames": []
      },
      "GLKMeshBuffer": {
        "className": "GLKMeshBuffer",
        "methodNames": []
      },
      "GLKTextureInfo": {
        "className": "GLKTextureInfo",
        "methodNames": []
      },
      "GLKEffectPropertyTransform": {
        "className": "GLKEffectPropertyTransform",
        "methodNames": []
      },
      "GLKSubmesh": {
        "className": "GLKSubmesh",
        "methodNames": [
          "init"
        ]
      },
      "GLKEffectProperty": {
        "className": "GLKEffectProperty",
        "methodNames": []
      },
      "GLKBaseEffect": {
        "className": "GLKBaseEffect",
        "methodNames": [
          "prepareToDraw"
        ]
      },
      "GLKMeshBufferAllocator": {
        "className": "GLKMeshBufferAllocator",
        "methodNames": []
      },
      "GLKEffectPropertyFog": {
        "className": "GLKEffectPropertyFog",
        "methodNames": []
      },
      "GLKTextureLoader": {
        "className": "GLKTextureLoader",
        "methodNames": [
          "cubeMapWithContentsOfFiles_options_error_",
          "initWithSharegroup_",
          "textureWithContentsOfFile_options_queue_completionHandler_",
          "cubeMapWithContentsOfURL_options_queue_completionHandler_",
          "textureWithContentsOfData_options_error_",
          "cubeMapWithContentsOfFile_options_error_",
          "textureWithContentsOfURL_options_queue_completionHandler_",
          "textureWithCGImage_options_error_",
          "textureWithContentsOfURL_options_error_",
          "textureWithCGImage_options_queue_completionHandler_",
          "cubeMapWithContentsOfFile_options_queue_completionHandler_",
          "textureWithContentsOfFile_options_error_",
          "textureWithContentsOfData_options_queue_completionHandler_",
          "initWithShareContext_",
          "cubeMapWithContentsOfFiles_options_queue_completionHandler_",
          "cubeMapWithContentsOfURL_options_error_"
        ]
      },
      "GLKEffectPropertyTexture": {
        "className": "GLKEffectPropertyTexture",
        "methodNames": []
      },
      "GLKEffectPropertyLight": {
        "className": "GLKEffectPropertyLight",
        "methodNames": []
      },
      "GLKView": {
        "className": "GLKView",
        "methodNames": [
          "bindDrawable",
          "initWithFrame_context_",
          "deleteDrawable",
          "display"
        ]
      }
    }
  },
  "AdSupport.framework": {
    "frameworkName": "AdSupport.framework",
    "classes": {
      "ASIdentifierManager": {
        "className": "ASIdentifierManager",
        "methodNames": [
          "sharedManager"
        ]
      }
    }
  },
  "AddressBookUI.framework": {
    "frameworkName": "AddressBookUI.framework",
    "classes": {
      "ABNewPersonViewController": {
        "className": "ABNewPersonViewController",
        "methodNames": []
      },
      "ABPeoplePickerNavigationController": {
        "className": "ABPeoplePickerNavigationController",
        "methodNames": []
      },
      "ABPersonViewController": {
        "className": "ABPersonViewController",
        "methodNames": []
      },
      "ABUnknownPersonViewController": {
        "className": "ABUnknownPersonViewController",
        "methodNames": []
      }
    }
  },
  "ExternalAccessory.framework": {
    "frameworkName": "ExternalAccessory.framework",
    "classes": {
      "EAWiFiUnconfiguredAccessoryBrowser": {
        "className": "EAWiFiUnconfiguredAccessoryBrowser",
        "methodNames": [
          "initWithDelegate_queue_",
          "stopSearchingForUnconfiguredAccessories",
          "configureAccessory_withConfigurationUIOnViewController_",
          "startSearchingForUnconfiguredAccessoriesMatchingPredicate_"
        ]
      },
      "EAAccessory": {
        "className": "EAAccessory",
        "methodNames": []
      },
      "EASession": {
        "className": "EASession",
        "methodNames": [
          "initWithAccessory_forProtocol_"
        ]
      },
      "EAWiFiUnconfiguredAccessory": {
        "className": "EAWiFiUnconfiguredAccessory",
        "methodNames": []
      },
      "EAAccessoryManager": {
        "className": "EAAccessoryManager",
        "methodNames": [
          "showBluetoothAccessoryPickerWithNameFilter_completion_",
          "unregisterForLocalNotifications",
          "sharedAccessoryManager",
          "registerForLocalNotifications"
        ]
      }
    }
  },
  "OpenGLES.framework": {
    "frameworkName": "OpenGLES.framework",
    "classes": {
      "EAGLContext": {
        "className": "EAGLContext",
        "methodNames": [
          "init",
          "presentRenderbuffer_",
          "renderbufferStorage_fromDrawable_"
        ]
      },
      "EAGLSharegroup": {
        "className": "EAGLSharegroup",
        "methodNames": []
      }
    }
  },
  "WatchConnectivity.framework": {
    "frameworkName": "WatchConnectivity.framework",
    "classes": {
      "WCSessionUserInfoTransfer": {
        "className": "WCSessionUserInfoTransfer",
        "methodNames": [
          "cancel"
        ]
      },
      "WCSession": {
        "className": "WCSession",
        "methodNames": [
          "isSupported"
        ]
      },
      "WCSessionFile": {
        "className": "WCSessionFile",
        "methodNames": []
      },
      "WCSessionFileTransfer": {
        "className": "WCSessionFileTransfer",
        "methodNames": [
          "cancel"
        ]
      }
    }
  },
  "CoreTelephony.framework": {
    "frameworkName": "CoreTelephony.framework",
    "classes": {
      "CTCellularData": {
        "className": "CTCellularData",
        "methodNames": []
      },
      "CTCallCenter": {
        "className": "CTCallCenter",
        "methodNames": []
      },
      "CTSubscriberInfo": {
        "className": "CTSubscriberInfo",
        "methodNames": [
          "subscriber"
        ]
      },
      "CTCarrier": {
        "className": "CTCarrier",
        "methodNames": []
      },
      "CTCall": {
        "className": "CTCall",
        "methodNames": []
      },
      "CTTelephonyNetworkInfo": {
        "className": "CTTelephonyNetworkInfo",
        "methodNames": []
      },
      "CTSubscriber": {
        "className": "CTSubscriber",
        "methodNames": []
      }
    }
  },
  "GameController.framework": {
    "frameworkName": "GameController.framework",
    "classes": {
      "GCControllerElement": {
        "className": "GCControllerElement",
        "methodNames": []
      },
      "GCController": {
        "className": "GCController",
        "methodNames": []
      },
      "GCGamepadSnapshot": {
        "className": "GCGamepadSnapshot",
        "methodNames": [
          "initWithSnapshotData_",
          "initWithController_snapshotData_"
        ]
      },
      "GCControllerButtonInput": {
        "className": "GCControllerButtonInput",
        "methodNames": []
      },
      "GCExtendedGamepadSnapshot": {
        "className": "GCExtendedGamepadSnapshot",
        "methodNames": [
          "initWithSnapshotData_",
          "initWithController_snapshotData_"
        ]
      },
      "GCGamepad": {
        "className": "GCGamepad",
        "methodNames": [
          "saveSnapshot"
        ]
      },
      "GCControllerDirectionPad": {
        "className": "GCControllerDirectionPad",
        "methodNames": []
      },
      "GCMotion": {
        "className": "GCMotion",
        "methodNames": []
      },
      "GCControllerAxisInput": {
        "className": "GCControllerAxisInput",
        "methodNames": []
      },
      "GCExtendedGamepad": {
        "className": "GCExtendedGamepad",
        "methodNames": [
          "saveSnapshot"
        ]
      }
    }
  },
  "MediaToolbox.framework": {
    "frameworkName": "MediaToolbox.framework",
    "classes": {}
  },
  "Contacts.framework": {
    "frameworkName": "Contacts.framework",
    "classes": {
      "CNContact": {
        "className": "CNContact",
        "methodNames": [
          "predicateForContactsWithIdentifiers_",
          "predicateForContactsInGroupWithIdentifier_",
          "predicateForContactsMatchingName_",
          "predicateForContactsInContainerWithIdentifier_"
        ]
      },
      "CNContactVCardSerialization": {
        "className": "CNContactVCardSerialization",
        "methodNames": [
          "descriptorForRequiredKeys",
          "contactsWithData_error_",
          "dataWithContacts_error_"
        ]
      },
      "CNPostalAddress": {
        "className": "CNPostalAddress",
        "methodNames": [
          "localizedStringForKey_"
        ]
      },
      "CNContactProperty": {
        "className": "CNContactProperty",
        "methodNames": []
      },
      "CNContactStore": {
        "className": "CNContactStore",
        "methodNames": [
          "authorizationStatusForEntityType_"
        ]
      },
      "CNMutableGroup": {
        "className": "CNMutableGroup",
        "methodNames": []
      },
      "CNSaveRequest": {
        "className": "CNSaveRequest",
        "methodNames": [
          "deleteGroup_",
          "removeSubgroup_fromGroup_",
          "updateContact_",
          "removeMember_fromGroup_",
          "updateGroup_",
          "deleteContact_",
          "addSubgroup_toGroup_",
          "addMember_toGroup_",
          "addContact_toContainerWithIdentifier_",
          "addGroup_toContainerWithIdentifier_"
        ]
      },
      "NSString": {
        "className": "NSString",
        "methodNames": []
      },
      "CNGroup": {
        "className": "CNGroup",
        "methodNames": [
          "predicateForGroupsWithIdentifiers_",
          "predicateForGroupsInContainerWithIdentifier_",
          "predicateForSubgroupsInGroupWithIdentifier_"
        ]
      },
      "CNMutableContact": {
        "className": "CNMutableContact",
        "methodNames": []
      },
      "CNMutablePostalAddress": {
        "className": "CNMutablePostalAddress",
        "methodNames": []
      },
      "CNContactFetchRequest": {
        "className": "CNContactFetchRequest",
        "methodNames": [
          "initWithKeysToFetch_"
        ]
      },
      "CNInstantMessageAddress": {
        "className": "CNInstantMessageAddress",
        "methodNames": [
          "localizedStringForKey_",
          "localizedStringForService_",
          "initWithUsername_service_"
        ]
      },
      "CNContactFormatter": {
        "className": "CNContactFormatter",
        "methodNames": [
          "nameOrderForContact_",
          "delimiterForContact_",
          "attributedStringFromContact_defaultAttributes_",
          "attributedStringFromContact_style_defaultAttributes_",
          "stringFromContact_style_",
          "descriptorForRequiredKeysForStyle_",
          "stringFromContact_"
        ]
      },
      "CNPhoneNumber": {
        "className": "CNPhoneNumber",
        "methodNames": [
          "initWithStringValue_",
          "phoneNumberWithStringValue_"
        ]
      },
      "CNSocialProfile": {
        "className": "CNSocialProfile",
        "methodNames": [
          "initWithUrlString_username_userIdentifier_service_",
          "localizedStringForKey_",
          "localizedStringForService_"
        ]
      },
      "CNContainer": {
        "className": "CNContainer",
        "methodNames": [
          "predicateForContainerOfGroupWithIdentifier_",
          "predicateForContainersWithIdentifiers_",
          "predicateForContainerOfContactWithIdentifier_"
        ]
      },
      "CNContactRelation": {
        "className": "CNContactRelation",
        "methodNames": [
          "contactRelationWithName_",
          "initWithName_"
        ]
      },
      "CNPostalAddressFormatter": {
        "className": "CNPostalAddressFormatter",
        "methodNames": [
          "attributedStringFromPostalAddress_style_withDefaultAttributes_",
          "stringFromPostalAddress_style_",
          "stringFromPostalAddress_",
          "attributedStringFromPostalAddress_withDefaultAttributes_"
        ]
      },
      "CNContactsUserDefaults": {
        "className": "CNContactsUserDefaults",
        "methodNames": [
          "sharedDefaults"
        ]
      }
    }
  },
  "CoreBluetooth.framework": {
    "frameworkName": "CoreBluetooth.framework",
    "classes": {
      "CBCentral": {
        "className": "CBCentral",
        "methodNames": []
      },
      "CBCharacteristic": {
        "className": "CBCharacteristic",
        "methodNames": []
      },
      "CBMutableDescriptor": {
        "className": "CBMutableDescriptor",
        "methodNames": [
          "initWithType_value_"
        ]
      },
      "CBCentralManager": {
        "className": "CBCentralManager",
        "methodNames": [
          "initWithDelegate_queue_",
          "cancelPeripheralConnection_",
          "retrieveConnectedPeripheralsWithServices_",
          "scanForPeripheralsWithServices_options_",
          "stopScan",
          "initWithDelegate_queue_options_",
          "retrievePeripheralsWithIdentifiers_",
          "connectPeripheral_options_"
        ]
      },
      "CBMutableCharacteristic": {
        "className": "CBMutableCharacteristic",
        "methodNames": [
          "initWithType_properties_value_permissions_"
        ]
      },
      "CBService": {
        "className": "CBService",
        "methodNames": []
      },
      "CBUUID": {
        "className": "CBUUID",
        "methodNames": [
          "UUIDWithString_",
          "UUIDWithNSUUID_",
          "UUIDWithCFUUID_",
          "UUIDWithData_"
        ]
      },
      "CBDescriptor": {
        "className": "CBDescriptor",
        "methodNames": []
      },
      "CBMutableService": {
        "className": "CBMutableService",
        "methodNames": [
          "initWithType_primary_"
        ]
      },
      "CBPeripheralManager": {
        "className": "CBPeripheralManager",
        "methodNames": [
          "initWithDelegate_queue_",
          "setDesiredConnectionLatency_forCentral_",
          "respondToRequest_withResult_",
          "updateValue_forCharacteristic_onSubscribedCentrals_",
          "stopAdvertising",
          "removeService_",
          "removeAllServices",
          "addService_",
          "initWithDelegate_queue_options_",
          "authorizationStatus",
          "startAdvertising_"
        ]
      },
      "CBATTRequest": {
        "className": "CBATTRequest",
        "methodNames": [
          "init"
        ]
      },
      "CBPeripheral": {
        "className": "CBPeripheral",
        "methodNames": [
          "writeValue_forCharacteristic_type_",
          "discoverIncludedServices_forService_",
          "maximumWriteValueLengthForType_",
          "readRSSI",
          "setNotifyValue_forCharacteristic_",
          "discoverCharacteristics_forService_",
          "discoverServices_",
          "discoverDescriptorsForCharacteristic_",
          "readValueForCharacteristic_",
          "readValueForDescriptor_",
          "writeValue_forDescriptor_"
        ]
      },
      "CBPeer": {
        "className": "CBPeer",
        "methodNames": [
          "init"
        ]
      },
      "CBAttribute": {
        "className": "CBAttribute",
        "methodNames": [
          "init"
        ]
      }
    }
  },
  "Metal.framework": {
    "frameworkName": "Metal.framework",
    "classes": {
      "MTLDepthStencilDescriptor": {
        "className": "MTLDepthStencilDescriptor",
        "methodNames": []
      },
      "MTLVertexAttribute": {
        "className": "MTLVertexAttribute",
        "methodNames": []
      },
      "MTLVertexAttributeDescriptorArray": {
        "className": "MTLVertexAttributeDescriptorArray",
        "methodNames": [
          "setObject_atIndexedSubscript_",
          "objectAtIndexedSubscript_"
        ]
      },
      "MTLRenderPipelineDescriptor": {
        "className": "MTLRenderPipelineDescriptor",
        "methodNames": [
          "reset"
        ]
      },
      "MTLSamplerDescriptor": {
        "className": "MTLSamplerDescriptor",
        "methodNames": []
      },
      "MTLRenderPassStencilAttachmentDescriptor": {
        "className": "MTLRenderPassStencilAttachmentDescriptor",
        "methodNames": []
      },
      "MTLTextureDescriptor": {
        "className": "MTLTextureDescriptor",
        "methodNames": [
          "textureCubeDescriptorWithPixelFormat_size_mipmapped_",
          "texture2DDescriptorWithPixelFormat_width_height_mipmapped_"
        ]
      },
      "MTLRenderPassDepthAttachmentDescriptor": {
        "className": "MTLRenderPassDepthAttachmentDescriptor",
        "methodNames": []
      },
      "MTLVertexDescriptor": {
        "className": "MTLVertexDescriptor",
        "methodNames": [
          "vertexDescriptor",
          "reset"
        ]
      },
      "MTLRenderPassColorAttachmentDescriptorArray": {
        "className": "MTLRenderPassColorAttachmentDescriptorArray",
        "methodNames": [
          "setObject_atIndexedSubscript_",
          "objectAtIndexedSubscript_"
        ]
      },
      "MTLVertexAttributeDescriptor": {
        "className": "MTLVertexAttributeDescriptor",
        "methodNames": []
      },
      "MTLStructMember": {
        "className": "MTLStructMember",
        "methodNames": [
          "arrayType",
          "structType"
        ]
      },
      "MTLRenderPipelineColorAttachmentDescriptor": {
        "className": "MTLRenderPipelineColorAttachmentDescriptor",
        "methodNames": []
      },
      "MTLComputePipelineDescriptor": {
        "className": "MTLComputePipelineDescriptor",
        "methodNames": [
          "reset"
        ]
      },
      "MTLRenderPipelineColorAttachmentDescriptorArray": {
        "className": "MTLRenderPipelineColorAttachmentDescriptorArray",
        "methodNames": [
          "setObject_atIndexedSubscript_",
          "objectAtIndexedSubscript_"
        ]
      },
      "MTLArrayType": {
        "className": "MTLArrayType",
        "methodNames": [
          "elementStructType",
          "elementArrayType"
        ]
      },
      "MTLRenderPipelineReflection": {
        "className": "MTLRenderPipelineReflection",
        "methodNames": []
      },
      "MTLCompileOptions": {
        "className": "MTLCompileOptions",
        "methodNames": []
      },
      "MTLVertexBufferLayoutDescriptorArray": {
        "className": "MTLVertexBufferLayoutDescriptorArray",
        "methodNames": [
          "setObject_atIndexedSubscript_",
          "objectAtIndexedSubscript_"
        ]
      },
      "MTLStencilDescriptor": {
        "className": "MTLStencilDescriptor",
        "methodNames": []
      },
      "MTLArgument": {
        "className": "MTLArgument",
        "methodNames": []
      },
      "MTLRenderPassAttachmentDescriptor": {
        "className": "MTLRenderPassAttachmentDescriptor",
        "methodNames": []
      },
      "MTLVertexBufferLayoutDescriptor": {
        "className": "MTLVertexBufferLayoutDescriptor",
        "methodNames": []
      },
      "MTLComputePipelineReflection": {
        "className": "MTLComputePipelineReflection",
        "methodNames": []
      },
      "MTLStructType": {
        "className": "MTLStructType",
        "methodNames": [
          "memberByName_"
        ]
      },
      "MTLRenderPassColorAttachmentDescriptor": {
        "className": "MTLRenderPassColorAttachmentDescriptor",
        "methodNames": []
      },
      "MTLRenderPassDescriptor": {
        "className": "MTLRenderPassDescriptor",
        "methodNames": [
          "renderPassDescriptor"
        ]
      }
    }
  },
  "GSS.framework": {
    "frameworkName": "GSS.framework",
    "classes": {}
  },
  "CoreFoundation.framework": {
    "frameworkName": "CoreFoundation.framework",
    "classes": {}
  },
  "CoreMIDI.framework": {
    "frameworkName": "CoreMIDI.framework",
    "classes": {
      "MIDINetworkConnection": {
        "className": "MIDINetworkConnection",
        "methodNames": [
          "connectionWithHost_"
        ]
      },
      "MIDINetworkSession": {
        "className": "MIDINetworkSession",
        "methodNames": [
          "removeContact_",
          "defaultSession",
          "addConnection_",
          "sourceEndpoint",
          "destinationEndpoint",
          "removeConnection_",
          "addContact_",
          "contacts",
          "connections"
        ]
      },
      "MIDINetworkHost": {
        "className": "MIDINetworkHost",
        "methodNames": [
          "hostWithName_netServiceName_netServiceDomain_",
          "hostWithName_netService_",
          "hostWithName_address_port_",
          "hasSameAddressAs_"
        ]
      }
    }
  },
  "CoreText.framework": {
    "frameworkName": "CoreText.framework",
    "classes": {}
  },
  "AudioToolbox.framework": {
    "frameworkName": "AudioToolbox.framework",
    "classes": {}
  },
  "AVKit.framework": {
    "frameworkName": "AVKit.framework",
    "classes": {
      "AVPlayerViewController": {
        "className": "AVPlayerViewController",
        "methodNames": []
      },
      "AVPictureInPictureController": {
        "className": "AVPictureInPictureController",
        "methodNames": [
          "isPictureInPictureSupported",
          "pictureInPictureButtonStartImageCompatibleWithTraitCollection_",
          "pictureInPictureButtonStopImageCompatibleWithTraitCollection_",
          "startPictureInPicture",
          "stopPictureInPicture",
          "initWithPlayerLayer_"
        ]
      }
    }
  },
  "CoreVideo.framework": {
    "frameworkName": "CoreVideo.framework",
    "classes": {}
  },
  "ImageIO.framework": {
    "frameworkName": "ImageIO.framework",
    "classes": {}
  },
  "WatchKit.framework": {
    "frameworkName": "WatchKit.framework",
    "classes": {
      "WKAccessibilityImageRegion": {
        "className": "WKAccessibilityImageRegion",
        "methodNames": []
      },
      "WKPickerItem": {
        "className": "WKPickerItem",
        "methodNames": []
      },
      "WKInterfaceObject": {
        "className": "WKInterfaceObject",
        "methodNames": [
          "init",
          "sizeToFitWidth",
          "setHorizontalAlignment_",
          "setWidth_",
          "sizeToFitHeight",
          "setRelativeHeight_withAdjustment_",
          "setHeight_",
          "setHidden_",
          "setVerticalAlignment_",
          "setAlpha_",
          "setAccessibilityIdentifier_",
          "setSemanticContentAttribute_",
          "setRelativeWidth_withAdjustment_"
        ]
      },
      "WKInterfaceSwitch": {
        "className": "WKInterfaceSwitch",
        "methodNames": [
          "setAttributedTitle_",
          "setEnabled_",
          "setTitle_",
          "setColor_",
          "setOn_"
        ]
      },
      "WKInterfacePicker": {
        "className": "WKInterfacePicker",
        "methodNames": [
          "focus"
        ]
      },
      "WKInterfaceLabel": {
        "className": "WKInterfaceLabel",
        "methodNames": [
          "setAttributedText_",
          "setTextColor_",
          "setText_"
        ]
      },
      "WKInterfaceSlider": {
        "className": "WKInterfaceSlider",
        "methodNames": [
          "setValue_",
          "setEnabled_",
          "setColor_",
          "setNumberOfSteps_"
        ]
      },
      "WKUserNotificationInterfaceController": {
        "className": "WKUserNotificationInterfaceController",
        "methodNames": [
          "init",
          "didReceiveLocalNotification_withCompletion_",
          "didReceiveRemoteNotification_withCompletion_",
          "suggestionsForResponseToActionWithIdentifier_forLocalNotification_inputLanguage_",
          "suggestionsForResponseToActionWithIdentifier_forRemoteNotification_inputLanguage_"
        ]
      },
      "WKInterfaceGroup": {
        "className": "WKInterfaceGroup",
        "methodNames": [
          "setBackgroundImage_",
          "setBackgroundImageNamed_",
          "setContentInset_",
          "setBackgroundColor_",
          "setCornerRadius_",
          "setBackgroundImageData_"
        ]
      },
      "WKInterfaceTable": {
        "className": "WKInterfaceTable",
        "methodNames": [
          "removeRowsAtIndexes_",
          "scrollToRowAtIndex_",
          "setNumberOfRows_withRowType_",
          "setRowTypes_",
          "rowControllerAtIndex_",
          "insertRowsAtIndexes_withRowType_"
        ]
      },
      "WKInterfaceButton": {
        "className": "WKInterfaceButton",
        "methodNames": [
          "setBackgroundImage_",
          "setAttributedTitle_",
          "setEnabled_",
          "setTitle_",
          "setBackgroundImageNamed_",
          "setBackgroundColor_",
          "setBackgroundImageData_"
        ]
      },
      "WKInterfaceImage": {
        "className": "WKInterfaceImage",
        "methodNames": [
          "setImage_",
          "setImageNamed_",
          "setTintColor_",
          "setImageData_"
        ]
      },
      "WKImage": {
        "className": "WKImage",
        "methodNames": [
          "imageWithImage_"
        ]
      },
      "WKInterfaceMovie": {
        "className": "WKInterfaceMovie",
        "methodNames": [
          "setMovieURL_",
          "setVideoGravity_",
          "setPosterImage_",
          "setLoops_"
        ]
      },
      "WKAudioFilePlayerItem": {
        "className": "WKAudioFilePlayerItem",
        "methodNames": [
          "init",
          "playerItemWithAsset_"
        ]
      },
      "WKInterfaceTimer": {
        "className": "WKInterfaceTimer",
        "methodNames": [
          "setTextColor_",
          "stop",
          "setDate_",
          "start"
        ]
      },
      "WKAudioFilePlayer": {
        "className": "WKAudioFilePlayer",
        "methodNames": [
          "play",
          "init",
          "replaceCurrentItemWithPlayerItem_",
          "playerWithPlayerItem_",
          "pause"
        ]
      },
      "WKExtension": {
        "className": "WKExtension",
        "methodNames": [
          "openSystemURL_",
          "sharedExtension"
        ]
      },
      "WKInterfaceController": {
        "className": "WKInterfaceController",
        "methodNames": [
          "init"
        ]
      },
      "WKAlertAction": {
        "className": "WKAlertAction",
        "methodNames": [
          "actionWithTitle_style_handler_"
        ]
      },
      "WKAudioFileQueuePlayer": {
        "className": "WKAudioFileQueuePlayer",
        "methodNames": [
          "removeItem_",
          "queuePlayerWithItems_",
          "advanceToNextItem",
          "removeAllItems",
          "appendItem_"
        ]
      },
      "WKInterfaceDate": {
        "className": "WKInterfaceDate",
        "methodNames": [
          "setTimeZone_",
          "setTextColor_",
          "setCalendar_"
        ]
      },
      "WKInterfaceDevice": {
        "className": "WKInterfaceDevice",
        "methodNames": [
          "currentDevice"
        ]
      },
      "WKInterfaceMap": {
        "className": "WKInterfaceMap",
        "methodNames": [
          "addAnnotation_withImageNamed_centerOffset_",
          "setRegion_",
          "setVisibleMapRect_",
          "removeAllAnnotations",
          "addAnnotation_withImage_centerOffset_",
          "addAnnotation_withPinColor_"
        ]
      },
      "WKInterfaceSeparator": {
        "className": "WKInterfaceSeparator",
        "methodNames": [
          "setColor_"
        ]
      },
      "WKAudioFileAsset": {
        "className": "WKAudioFileAsset",
        "methodNames": [
          "init",
          "assetWithURL_",
          "assetWithURL_title_albumTitle_artist_"
        ]
      }
    }
  },
  "OpenAL.framework": {
    "frameworkName": "OpenAL.framework",
    "classes": {}
  },
  "MetalKit.framework": {
    "frameworkName": "MetalKit.framework",
    "classes": {
      "MTKView": {
        "className": "MTKView",
        "methodNames": [
          "initWithCoder_",
          "draw",
          "initWithFrame_device_",
          "releaseDrawables"
        ]
      },
      "MTKMeshBuffer": {
        "className": "MTKMeshBuffer",
        "methodNames": [
          "init"
        ]
      },
      "MTKMeshBufferAllocator": {
        "className": "MTKMeshBufferAllocator",
        "methodNames": [
          "init",
          "initWithDevice_"
        ]
      },
      "MTKMesh": {
        "className": "MTKMesh",
        "methodNames": [
          "init",
          "newMeshesFromAsset_device_sourceMeshes_error_",
          "initWithMesh_device_error_"
        ]
      },
      "MTKSubmesh": {
        "className": "MTKSubmesh",
        "methodNames": [
          "init"
        ]
      },
      "MTKTextureLoader": {
        "className": "MTKTextureLoader",
        "methodNames": []
      }
    }
  },
  "NetworkExtension.framework": {
    "frameworkName": "NetworkExtension.framework",
    "classes": {
      "NEAppProxyProviderManager": {
        "className": "NEAppProxyProviderManager",
        "methodNames": [
          "loadAllFromPreferencesWithCompletionHandler_"
        ]
      },
      "NEHotspotNetwork": {
        "className": "NEHotspotNetwork",
        "methodNames": [
          "setConfidence_",
          "setPassword_"
        ]
      },
      "NEFilterRemediationVerdict": {
        "className": "NEFilterRemediationVerdict",
        "methodNames": [
          "allowVerdict",
          "dropVerdict",
          "needRulesVerdict"
        ]
      },
      "NWPath": {
        "className": "NWPath",
        "methodNames": [
          "isEqualToPath_"
        ]
      },
      "NEOnDemandRuleDisconnect": {
        "className": "NEOnDemandRuleDisconnect",
        "methodNames": []
      },
      "NEOnDemandRule": {
        "className": "NEOnDemandRule",
        "methodNames": []
      },
      "NEFilterControlVerdict": {
        "className": "NEFilterControlVerdict",
        "methodNames": [
          "updateRules",
          "dropVerdictWithUpdateRules_",
          "allowVerdictWithUpdateRules_"
        ]
      },
      "NEPacketTunnelNetworkSettings": {
        "className": "NEPacketTunnelNetworkSettings",
        "methodNames": []
      },
      "NWTCPConnection": {
        "className": "NWTCPConnection",
        "methodNames": [
          "cancel",
          "write_completionHandler_",
          "readLength_completionHandler_",
          "readMinimumLength_maximumLength_completionHandler_",
          "initWithUpgradeForConnection_",
          "writeClose"
        ]
      },
      "NEFilterSocketFlow": {
        "className": "NEFilterSocketFlow",
        "methodNames": []
      },
      "NEIPv6Route": {
        "className": "NEIPv6Route",
        "methodNames": [
          "defaultRoute",
          "initWithDestinationAddress_networkPrefixLength_"
        ]
      },
      "NETunnelNetworkSettings": {
        "className": "NETunnelNetworkSettings",
        "methodNames": [
          "initWithTunnelRemoteAddress_"
        ]
      },
      "NEVPNConnection": {
        "className": "NEVPNConnection",
        "methodNames": [
          "stopVPNTunnel",
          "startVPNTunnelWithOptions_andReturnError_",
          "startVPNTunnelAndReturnError_"
        ]
      },
      "NEAppProxyUDPFlow": {
        "className": "NEAppProxyUDPFlow",
        "methodNames": [
          "readDatagramsWithCompletionHandler_",
          "writeDatagrams_sentByEndpoints_completionHandler_"
        ]
      },
      "NEProvider": {
        "className": "NEProvider",
        "methodNames": [
          "sleepWithCompletionHandler_",
          "wake",
          "createTCPConnectionToEndpoint_enableTLS_TLSParameters_delegate_",
          "createUDPSessionToEndpoint_fromEndpoint_"
        ]
      },
      "NEPacketTunnelFlow": {
        "className": "NEPacketTunnelFlow",
        "methodNames": [
          "readPacketsWithCompletionHandler_",
          "writePackets_withProtocols_"
        ]
      },
      "NWHostEndpoint": {
        "className": "NWHostEndpoint",
        "methodNames": [
          "endpointWithHostname_port_"
        ]
      },
      "NEVPNIKEv2SecurityAssociationParameters": {
        "className": "NEVPNIKEv2SecurityAssociationParameters",
        "methodNames": []
      },
      "NEFilterControlProvider": {
        "className": "NEFilterControlProvider",
        "methodNames": [
          "notifyRulesChanged",
          "handleRemediationForFlow_completionHandler_",
          "handleNewFlow_completionHandler_"
        ]
      },
      "NEFilterFlow": {
        "className": "NEFilterFlow",
        "methodNames": []
      },
      "NEVPNProtocol": {
        "className": "NEVPNProtocol",
        "methodNames": []
      },
      "NEAppProxyTCPFlow": {
        "className": "NEAppProxyTCPFlow",
        "methodNames": [
          "readDataWithCompletionHandler_",
          "writeData_withCompletionHandler_"
        ]
      },
      "NEVPNProtocolIKEv2": {
        "className": "NEVPNProtocolIKEv2",
        "methodNames": []
      },
      "NEFilterDataVerdict": {
        "className": "NEFilterDataVerdict",
        "methodNames": [
          "dataVerdictWithPassBytes_peekBytes_",
          "allowVerdict",
          "dropVerdict",
          "remediateVerdictWithRemediationURLMapKey_remediationButtonTextMapKey_",
          "needRulesVerdict"
        ]
      },
      "NETunnelProviderProtocol": {
        "className": "NETunnelProviderProtocol",
        "methodNames": []
      },
      "NWTLSParameters": {
        "className": "NWTLSParameters",
        "methodNames": []
      },
      "NEVPNProtocolIPSec": {
        "className": "NEVPNProtocolIPSec",
        "methodNames": []
      },
      "NWEndpoint": {
        "className": "NWEndpoint",
        "methodNames": []
      },
      "NETunnelProvider": {
        "className": "NETunnelProvider",
        "methodNames": [
          "handleAppMessage_completionHandler_"
        ]
      },
      "NEOnDemandRuleEvaluateConnection": {
        "className": "NEOnDemandRuleEvaluateConnection",
        "methodNames": []
      },
      "NEVPNManager": {
        "className": "NEVPNManager",
        "methodNames": [
          "sharedManager"
        ]
      },
      "NEProxySettings": {
        "className": "NEProxySettings",
        "methodNames": []
      },
      "NEFilterManager": {
        "className": "NEFilterManager",
        "methodNames": [
          "saveToPreferencesWithCompletionHandler_",
          "sharedManager",
          "loadFromPreferencesWithCompletionHandler_",
          "removeFromPreferencesWithCompletionHandler_"
        ]
      },
      "NEHotspotHelper": {
        "className": "NEHotspotHelper",
        "methodNames": [
          "registerWithOptions_queue_handler_",
          "supportedNetworkInterfaces",
          "logoff_"
        ]
      },
      "NEFilterNewFlowVerdict": {
        "className": "NEFilterNewFlowVerdict",
        "methodNames": [
          "filterDataVerdictWithFilterInbound_peekInboundBytes_filterOutbound_peekOutboundBytes_",
          "URLAppendStringVerdictWithMapKey_",
          "allowVerdict",
          "dropVerdict",
          "needRulesVerdict",
          "remediateVerdictWithRemediationURLMapKey_remediationButtonTextMapKey_"
        ]
      },
      "NEAppProxyFlow": {
        "className": "NEAppProxyFlow",
        "methodNames": [
          "openWithLocalEndpoint_completionHandler_",
          "closeWriteWithError_",
          "closeReadWithError_"
        ]
      },
      "NEFilterVerdict": {
        "className": "NEFilterVerdict",
        "methodNames": []
      },
      "NEIPv6Settings": {
        "className": "NEIPv6Settings",
        "methodNames": [
          "initWithAddresses_networkPrefixLengths_"
        ]
      },
      "NEFilterDataProvider": {
        "className": "NEFilterDataProvider",
        "methodNames": [
          "handleRemediationForFlow_",
          "handleInboundDataFromFlow_readBytesStartOffset_readBytes_",
          "handleOutboundDataCompleteForFlow_",
          "handleOutboundDataFromFlow_readBytesStartOffset_readBytes_",
          "handleRulesChanged",
          "handleNewFlow_",
          "handleInboundDataCompleteForFlow_"
        ]
      },
      "NEFilterProviderConfiguration": {
        "className": "NEFilterProviderConfiguration",
        "methodNames": []
      },
      "NEEvaluateConnectionRule": {
        "className": "NEEvaluateConnectionRule",
        "methodNames": [
          "initWithMatchDomains_andAction_"
        ]
      },
      "NEDNSSettings": {
        "className": "NEDNSSettings",
        "methodNames": [
          "initWithServers_"
        ]
      },
      "NSMutableURLRequest": {
        "className": "NSMutableURLRequest",
        "methodNames": [
          "bindToHotspotHelperCommand_"
        ]
      },
      "NEFilterProvider": {
        "className": "NEFilterProvider",
        "methodNames": [
          "startFilterWithCompletionHandler_",
          "stopFilterWithReason_completionHandler_"
        ]
      },
      "NEIPv4Route": {
        "className": "NEIPv4Route",
        "methodNames": [
          "initWithDestinationAddress_subnetMask_",
          "defaultRoute"
        ]
      },
      "NEFlowMetaData": {
        "className": "NEFlowMetaData",
        "methodNames": []
      },
      "NEHotspotHelperCommand": {
        "className": "NEHotspotHelperCommand",
        "methodNames": [
          "createResponse_",
          "createUDPSession_",
          "createTCPConnection_"
        ]
      },
      "NEHotspotHelperResponse": {
        "className": "NEHotspotHelperResponse",
        "methodNames": [
          "setNetworkList_",
          "deliver",
          "setNetwork_"
        ]
      },
      "NEOnDemandRuleConnect": {
        "className": "NEOnDemandRuleConnect",
        "methodNames": []
      },
      "NEPacketTunnelProvider": {
        "className": "NEPacketTunnelProvider",
        "methodNames": [
          "createTCPConnectionThroughTunnelToEndpoint_enableTLS_TLSParameters_delegate_",
          "createUDPSessionThroughTunnelToEndpoint_fromEndpoint_",
          "startTunnelWithOptions_completionHandler_",
          "cancelTunnelWithError_",
          "stopTunnelWithReason_completionHandler_"
        ]
      },
      "NWUDPSession": {
        "className": "NWUDPSession",
        "methodNames": [
          "cancel",
          "setReadHandler_maxDatagrams_",
          "tryNextResolvedEndpoint",
          "initWithUpgradeForSession_",
          "writeMultipleDatagrams_completionHandler_",
          "writeDatagram_completionHandler_"
        ]
      },
      "NEOnDemandRuleIgnore": {
        "className": "NEOnDemandRuleIgnore",
        "methodNames": []
      },
      "NETunnelProviderSession": {
        "className": "NETunnelProviderSession",
        "methodNames": [
          "startTunnelWithOptions_andReturnError_"
        ]
      },
      "NEAppProxyProvider": {
        "className": "NEAppProxyProvider",
        "methodNames": [
          "startProxyWithOptions_completionHandler_",
          "stopProxyWithReason_completionHandler_",
          "cancelProxyWithError_",
          "handleNewFlow_"
        ]
      },
      "NETunnelProviderManager": {
        "className": "NETunnelProviderManager",
        "methodNames": [
          "loadAllFromPreferencesWithCompletionHandler_",
          "copyAppRules"
        ]
      },
      "NWBonjourServiceEndpoint": {
        "className": "NWBonjourServiceEndpoint",
        "methodNames": [
          "endpointWithName_type_domain_"
        ]
      },
      "NEAppRule": {
        "className": "NEAppRule",
        "methodNames": [
          "initWithSigningIdentifier_",
          "initWithSigningIdentifier_designatedRequirement_"
        ]
      },
      "NEProxyServer": {
        "className": "NEProxyServer",
        "methodNames": [
          "initWithAddress_port_"
        ]
      },
      "NEFilterBrowserFlow": {
        "className": "NEFilterBrowserFlow",
        "methodNames": []
      },
      "NEIPv4Settings": {
        "className": "NEIPv4Settings",
        "methodNames": [
          "initWithAddresses_subnetMasks_"
        ]
      }
    }
  },
  "ModelIO.framework": {
    "frameworkName": "ModelIO.framework",
    "classes": {
      "MDLObjectContainer": {
        "className": "MDLObjectContainer",
        "methodNames": []
      },
      "MDLTextureFilter": {
        "className": "MDLTextureFilter",
        "methodNames": []
      },
      "MDLNormalMapTexture": {
        "className": "MDLNormalMapTexture",
        "methodNames": [
          "initByGeneratingNormalMapWithTexture_name_smoothness_contrast_"
        ]
      },
      "MDLAsset": {
        "className": "MDLAsset",
        "methodNames": [
          "exportAssetToURL_",
          "canExportFileExtension_",
          "boundingBoxAtTime_",
          "initWithURL_vertexDescriptor_bufferAllocator_preserveTopology_error_",
          "exportAssetToURL_error_",
          "canImportFileExtension_",
          "initWithURL_vertexDescriptor_bufferAllocator_",
          "removeObject_",
          "objectAtIndexedSubscript_",
          "objectAtIndex_",
          "initWithURL_",
          "addObject_"
        ]
      },
      "MDLCamera": {
        "className": "MDLCamera",
        "methodNames": [
          "lookAt_from_",
          "rayTo_forViewPort_",
          "lookAt_",
          "bokehKernelWithSize_",
          "frameBoundingBox_setNearAndFar_"
        ]
      },
      "MDLPhysicallyPlausibleLight": {
        "className": "MDLPhysicallyPlausibleLight",
        "methodNames": [
          "setColorByTemperature_"
        ]
      },
      "MDLStereoscopicCamera": {
        "className": "MDLStereoscopicCamera",
        "methodNames": []
      },
      "MDLVertexDescriptor": {
        "className": "MDLVertexDescriptor",
        "methodNames": [
          "setPackedStrides",
          "attributeNamed_",
          "addOrReplaceAttribute_",
          "reset",
          "setPackedOffsets",
          "initWithVertexDescriptor_"
        ]
      },
      "MDLMeshBufferZoneDefault": {
        "className": "MDLMeshBufferZoneDefault",
        "methodNames": []
      },
      "MDLScatteringFunction": {
        "className": "MDLScatteringFunction",
        "methodNames": []
      },
      "MDLMeshBufferData": {
        "className": "MDLMeshBufferData",
        "methodNames": [
          "initWithType_length_",
          "initWithType_data_"
        ]
      },
      "MDLObject": {
        "className": "MDLObject",
        "methodNames": [
          "componentConformingToProtocol_",
          "boundingBoxAtTime_",
          "addChild_",
          "setComponent_forProtocol_"
        ]
      },
      "MDLTexture": {
        "className": "MDLTexture",
        "methodNames": [
          "imageFromTexture",
          "irradianceTextureCubeWithTexture_name_dimensions_",
          "irradianceTextureCubeWithTexture_name_dimensions_roughness_",
          "textureCubeWithImagesNamed_",
          "initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_",
          "writeToURL_type_",
          "writeToURL_",
          "texelDataWithTopLeftOriginAtMipLevel_create_",
          "textureNamed_bundle_",
          "texelDataWithBottomLeftOriginAtMipLevel_create_",
          "textureNamed_",
          "texelDataWithTopLeftOrigin",
          "textureCubeWithImagesNamed_bundle_",
          "texelDataWithBottomLeftOrigin"
        ]
      },
      "MDLCheckerboardTexture": {
        "className": "MDLCheckerboardTexture",
        "methodNames": [
          "initWithDivisions_name_dimensions_channelCount_channelEncoding_color1_color2_"
        ]
      },
      "MDLNoiseTexture": {
        "className": "MDLNoiseTexture",
        "methodNames": [
          "initVectorNoiseWithSmoothness_name_textureDimensions_channelEncoding_",
          "initScalarNoiseWithSmoothness_name_textureDimensions_channelCount_channelEncoding_grayscale_"
        ]
      },
      "MDLMaterial": {
        "className": "MDLMaterial",
        "methodNames": [
          "propertyWithSemantic_",
          "objectForKeyedSubscript_",
          "removeAllProperties",
          "initWithName_scatteringFunction_",
          "setProperty_",
          "objectAtIndexedSubscript_",
          "removeProperty_",
          "propertyNamed_"
        ]
      },
      "MDLMeshBufferMap": {
        "className": "MDLMeshBufferMap",
        "methodNames": [
          "initWithBytes_deallocator_"
        ]
      },
      "MDLSubmesh": {
        "className": "MDLSubmesh",
        "methodNames": [
          "initWithName_indexBuffer_indexCount_indexType_geometryType_material_",
          "initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_",
          "initWithMDLSubmesh_indexType_geometryType_",
          "initWithIndexBuffer_indexCount_indexType_geometryType_material_"
        ]
      },
      "MDLVertexBufferLayout": {
        "className": "MDLVertexBufferLayout",
        "methodNames": []
      },
      "MDLPhotometricLight": {
        "className": "MDLPhotometricLight",
        "methodNames": [
          "generateCubemapFromLight_",
          "generateSphericalHarmonicsFromLight_",
          "initWithIESProfile_"
        ]
      },
      "MDLLightProbe": {
        "className": "MDLLightProbe",
        "methodNames": [
          "initWithReflectiveTexture_irradianceTexture_",
          "generateSphericalHarmonicsFromIrradiance_",
          "lightProbeWithTextureSize_forLocation_lightsToConsider_objectsToConsider_reflectiveCubemap_irradianceCubemap_"
        ]
      },
      "MDLVertexAttributeData": {
        "className": "MDLVertexAttributeData",
        "methodNames": []
      },
      "MDLSubmeshTopology": {
        "className": "MDLSubmeshTopology",
        "methodNames": []
      },
      "MDLVoxelArray": {
        "className": "MDLVoxelArray",
        "methodNames": [
          "voxelsWithinExtent_",
          "setVoxelsForMesh_divisions_interiorNBWidth_exteriorNBWidth_patchRadius_",
          "voxelIndices",
          "voxelBoundingBoxAtIndex_",
          "spatialLocationOfIndex_",
          "intersectWithVoxels_",
          "indexOfSpatialLocation_",
          "initWithAsset_divisions_interiorShells_exteriorShells_patchRadius_",
          "voxelExistsAtIndex_allowAnyX_allowAnyY_allowAnyZ_allowAnyShell_",
          "unionWithVoxels_",
          "differenceWithVoxels_",
          "setVoxelsForMesh_divisions_interiorShells_exteriorShells_patchRadius_",
          "setVoxelAtIndex_",
          "meshUsingAllocator_",
          "initWithAsset_divisions_interiorNBWidth_exteriorNBWidth_patchRadius_",
          "initWithData_boundingBox_voxelExtent_"
        ]
      },
      "MDLAreaLight": {
        "className": "MDLAreaLight",
        "methodNames": []
      },
      "MDLPhysicallyPlausibleScatteringFunction": {
        "className": "MDLPhysicallyPlausibleScatteringFunction",
        "methodNames": []
      },
      "MDLColorSwatchTexture": {
        "className": "MDLColorSwatchTexture",
        "methodNames": [
          "initWithColorGradientFrom_toColor_name_textureDimensions_",
          "initWithColorTemperatureGradientFrom_toColorTemperature_name_textureDimensions_"
        ]
      },
      "MDLSkyCubeTexture": {
        "className": "MDLSkyCubeTexture",
        "methodNames": [
          "initWithName_channelEncoding_textureDimensions_turbidity_sunElevation_upperAtmosphereScattering_groundAlbedo_",
          "updateTexture"
        ]
      },
      "MDLLight": {
        "className": "MDLLight",
        "methodNames": [
          "irradianceAtPoint_",
          "irradianceAtPoint_colorSpace_"
        ]
      },
      "MDLMaterialProperty": {
        "className": "MDLMaterialProperty",
        "methodNames": [
          "init"
        ]
      },
      "MDLURLTexture": {
        "className": "MDLURLTexture",
        "methodNames": [
          "initWithURL_name_"
        ]
      },
      "MDLTextureSampler": {
        "className": "MDLTextureSampler",
        "methodNames": []
      },
      "MDLMeshBufferDataAllocator": {
        "className": "MDLMeshBufferDataAllocator",
        "methodNames": []
      },
      "MDLTransform": {
        "className": "MDLTransform",
        "methodNames": [
          "initWithIdentity",
          "translationAtTime_",
          "shearAtTime_",
          "rotationMatrixAtTime_",
          "setRotation_forTime_",
          "setScale_forTime_",
          "initWithTransformComponent_",
          "setShear_forTime_",
          "setTranslation_forTime_",
          "initWithMatrix_",
          "rotationAtTime_",
          "scaleAtTime_",
          "setIdentity"
        ]
      },
      "MDLMesh": {
        "className": "MDLMesh",
        "methodNames": [
          "makeVerticesUnique",
          "newCylinderWithHeight_radii_radialSegments_verticalSegments_geometryType_inwardNormals_allocator_",
          "addTangentBasisForTextureCoordinateAttributeNamed_tangentAttributeNamed_bitangentAttributeNamed_",
          "generateAmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed_",
          "initWithVertexBuffer_vertexCount_descriptor_submeshes_",
          "addAttributeWithName_format_",
          "generateAmbientOcclusionVertexColorsWithRaysPerSample_attenuationFactor_objectsToConsider_vertexAttributeNamed_",
          "addNormalsWithAttributeNamed_creaseThreshold_",
          "newEllipsoidWithRadii_radialSegments_verticalSegments_geometryType_inwardNormals_hemisphere_allocator_",
          "addTangentBasisForTextureCoordinateAttributeNamed_normalAttributeNamed_tangentAttributeNamed_",
          "newPlaneWithDimensions_segments_geometryType_allocator_",
          "newSubdividedMesh_submeshIndex_subdivisionLevels_",
          "generateAmbientOcclusionTextureWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_",
          "generateLightMapTextureWithTextureSize_lightsToConsider_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_",
          "generateLightMapTextureWithQuality_lightsToConsider_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_",
          "newBoxWithDimensions_segments_geometryType_inwardNormals_allocator_",
          "newEllipticalConeWithHeight_radii_radialSegments_verticalSegments_geometryType_inwardNormals_allocator_",
          "generateAmbientOcclusionTextureWithSize_raysPerSample_attenuationFactor_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_",
          "newIcosahedronWithRadius_inwardNormals_allocator_",
          "generateLightMapVertexColorsWithLightsToConsider_objectsToConsider_vertexAttributeNamed_"
        ]
      },
      "MDLVertexAttribute": {
        "className": "MDLVertexAttribute",
        "methodNames": [
          "initWithName_format_offset_bufferIndex_"
        ]
      }
    }
  },
  "CloudKit.framework": {
    "frameworkName": "CloudKit.framework",
    "classes": {
      "CKDiscoverUserInfosOperation": {
        "className": "CKDiscoverUserInfosOperation",
        "methodNames": [
          "init",
          "initWithEmailAddresses_userRecordIDs_"
        ]
      },
      "NSData": {
        "className": "NSData",
        "methodNames": []
      },
      "NSArray": {
        "className": "NSArray",
        "methodNames": []
      },
      "CKRecordZone": {
        "className": "CKRecordZone",
        "methodNames": [
          "defaultRecordZone"
        ]
      },
      "CKFetchRecordsOperation": {
        "className": "CKFetchRecordsOperation",
        "methodNames": [
          "init",
          "fetchCurrentUserRecordOperation",
          "initWithRecordIDs_"
        ]
      },
      "CKNotification": {
        "className": "CKNotification",
        "methodNames": [
          "init",
          "notificationFromRemoteNotificationDictionary_"
        ]
      },
      "CKRecordID": {
        "className": "CKRecordID",
        "methodNames": [
          "init",
          "initWithRecordName_",
          "initWithRecordName_zoneID_"
        ]
      },
      "CKModifyRecordZonesOperation": {
        "className": "CKModifyRecordZonesOperation",
        "methodNames": [
          "init",
          "initWithRecordZonesToSave_recordZoneIDsToDelete_"
        ]
      },
      "CKDatabase": {
        "className": "CKDatabase",
        "methodNames": [
          "init",
          "fetchAllSubscriptionsWithCompletionHandler_",
          "fetchSubscriptionWithID_completionHandler_",
          "addOperation_",
          "fetchAllRecordZonesWithCompletionHandler_",
          "saveSubscription_completionHandler_",
          "deleteRecordWithID_completionHandler_",
          "saveRecord_completionHandler_",
          "fetchRecordZoneWithID_completionHandler_",
          "deleteSubscriptionWithID_completionHandler_",
          "saveRecordZone_completionHandler_",
          "performQuery_inZoneWithID_completionHandler_",
          "fetchRecordWithID_completionHandler_",
          "deleteRecordZoneWithID_completionHandler_"
        ]
      },
      "CKFetchSubscriptionsOperation": {
        "className": "CKFetchSubscriptionsOperation",
        "methodNames": [
          "init",
          "initWithSubscriptionIDs_",
          "fetchAllSubscriptionsOperation"
        ]
      },
      "CKQueryNotification": {
        "className": "CKQueryNotification",
        "methodNames": []
      },
      "CKDatabaseOperation": {
        "className": "CKDatabaseOperation",
        "methodNames": []
      },
      "NSString": {
        "className": "NSString",
        "methodNames": []
      },
      "CLLocation": {
        "className": "CLLocation",
        "methodNames": []
      },
      "NSNumber": {
        "className": "NSNumber",
        "methodNames": []
      },
      "CKFetchWebAuthTokenOperation": {
        "className": "CKFetchWebAuthTokenOperation",
        "methodNames": [
          "initWithAPIToken_"
        ]
      },
      "CKFetchRecordZonesOperation": {
        "className": "CKFetchRecordZonesOperation",
        "methodNames": [
          "init",
          "initWithRecordZoneIDs_",
          "fetchAllRecordZonesOperation"
        ]
      },
      "CKRecord": {
        "className": "CKRecord",
        "methodNames": [
          "init",
          "objectForKeyedSubscript_",
          "encodeSystemFieldsWithCoder_",
          "initWithRecordType_zoneID_",
          "allKeys",
          "allTokens",
          "setObject_forKey_",
          "initWithRecordType_recordID_",
          "setObject_forKeyedSubscript_",
          "initWithRecordType_",
          "objectForKey_",
          "changedKeys"
        ]
      },
      "CKLocationSortDescriptor": {
        "className": "CKLocationSortDescriptor",
        "methodNames": [
          "init",
          "initWithKey_relativeLocation_",
          "initWithCoder_"
        ]
      },
      "CKDiscoverAllContactsOperation": {
        "className": "CKDiscoverAllContactsOperation",
        "methodNames": [
          "init"
        ]
      },
      "CKMarkNotificationsReadOperation": {
        "className": "CKMarkNotificationsReadOperation",
        "methodNames": [
          "init",
          "initWithNotificationIDsToMarkRead_"
        ]
      },
      "NSDate": {
        "className": "NSDate",
        "methodNames": []
      },
      "CKQueryCursor": {
        "className": "CKQueryCursor",
        "methodNames": [
          "init"
        ]
      },
      "CKFetchNotificationChangesOperation": {
        "className": "CKFetchNotificationChangesOperation",
        "methodNames": [
          "initWithPreviousServerChangeToken_"
        ]
      },
      "CKRecordZoneNotification": {
        "className": "CKRecordZoneNotification",
        "methodNames": []
      },
      "CKQuery": {
        "className": "CKQuery",
        "methodNames": [
          "init",
          "initWithRecordType_predicate_",
          "initWithCoder_"
        ]
      },
      "CKFetchRecordChangesOperation": {
        "className": "CKFetchRecordChangesOperation",
        "methodNames": [
          "initWithRecordZoneID_previousServerChangeToken_"
        ]
      },
      "CKModifySubscriptionsOperation": {
        "className": "CKModifySubscriptionsOperation",
        "methodNames": [
          "initWithSubscriptionsToSave_subscriptionIDsToDelete_"
        ]
      },
      "CKContainer": {
        "className": "CKContainer",
        "methodNames": [
          "discoverUserInfoWithUserRecordID_completionHandler_",
          "init",
          "statusForApplicationPermission_completionHandler_",
          "defaultContainer",
          "containerWithIdentifier_",
          "addOperation_",
          "discoverAllContactUserInfosWithCompletionHandler_",
          "requestApplicationPermission_completionHandler_",
          "accountStatusWithCompletionHandler_",
          "fetchUserRecordIDWithCompletionHandler_",
          "discoverUserInfoWithEmailAddress_completionHandler_"
        ]
      },
      "CKAsset": {
        "className": "CKAsset",
        "methodNames": [
          "init",
          "initWithFileURL_"
        ]
      },
      "CKReference": {
        "className": "CKReference",
        "methodNames": [
          "init",
          "initWithRecordID_action_",
          "initWithRecord_action_"
        ]
      },
      "CKDiscoveredUserInfo": {
        "className": "CKDiscoveredUserInfo",
        "methodNames": [
          "init"
        ]
      },
      "CKQueryOperation": {
        "className": "CKQueryOperation",
        "methodNames": [
          "init",
          "initWithCursor_",
          "initWithQuery_"
        ]
      },
      "CKOperation": {
        "className": "CKOperation",
        "methodNames": [
          "init",
          "activityStart"
        ]
      },
      "CKSubscription": {
        "className": "CKSubscription",
        "methodNames": [
          "init",
          "initWithRecordType_predicate_subscriptionID_options_",
          "initWithZoneID_options_",
          "initWithZoneID_subscriptionID_options_",
          "initWithCoder_",
          "initWithRecordType_predicate_options_"
        ]
      },
      "CKNotificationID": {
        "className": "CKNotificationID",
        "methodNames": []
      },
      "CKModifyBadgeOperation": {
        "className": "CKModifyBadgeOperation",
        "methodNames": [
          "init",
          "initWithBadgeValue_"
        ]
      },
      "CKRecordZoneID": {
        "className": "CKRecordZoneID",
        "methodNames": [
          "init",
          "initWithZoneName_ownerName_"
        ]
      },
      "CKModifyRecordsOperation": {
        "className": "CKModifyRecordsOperation",
        "methodNames": [
          "init",
          "initWithRecordsToSave_recordIDsToDelete_"
        ]
      },
      "CKServerChangeToken": {
        "className": "CKServerChangeToken",
        "methodNames": [
          "init"
        ]
      },
      "CKNotificationInfo": {
        "className": "CKNotificationInfo",
        "methodNames": []
      }
    }
  },
  "PhotosUI.framework": {
    "frameworkName": "PhotosUI.framework",
    "classes": {
      "PHLivePhotoView": {
        "className": "PHLivePhotoView",
        "methodNames": [
          "startPlaybackWithStyle_",
          "livePhotoBadgeImageWithOptions_",
          "stopPlayback"
        ]
      }
    }
  },
  "QuickLook.framework": {
    "frameworkName": "QuickLook.framework",
    "classes": {
      "QLPreviewController": {
        "className": "QLPreviewController",
        "methodNames": [
          "refreshCurrentPreviewItem",
          "canPreviewItem_",
          "reloadData"
        ]
      },
      "NSURL": {
        "className": "NSURL",
        "methodNames": []
      }
    }
  },
  "JavaScriptCore.framework": {
    "frameworkName": "JavaScriptCore.framework",
    "classes": {
      "JSValue": {
        "className": "JSValue",
        "methodNames": [
          "hasProperty_",
          "valueWithUInt32_inContext_",
          "isEqualToObject_",
          "valueWithSize_inContext_",
          "objectForKeyedSubscript_",
          "valueWithInt32_inContext_",
          "setValue_atIndex_",
          "toRect",
          "toPoint",
          "defineProperty_descriptor_",
          "valueWithDouble_inContext_",
          "invokeMethod_withArguments_",
          "toDouble",
          "toUInt32",
          "constructWithArguments_",
          "isEqualWithTypeCoercionToObject_",
          "valueWithNewRegularExpressionFromPattern_flags_inContext_",
          "toArray",
          "toObject",
          "setObject_forKeyedSubscript_",
          "valueWithBool_inContext_",
          "isInstanceOf_",
          "valueWithObject_inContext_",
          "toInt32",
          "toDate",
          "toSize",
          "toBool",
          "setValue_forProperty_",
          "objectAtIndexedSubscript_",
          "toObjectOfClass_",
          "toRange",
          "valueWithRange_inContext_",
          "toDictionary",
          "valueWithJSValueRef_inContext_",
          "valueWithNewErrorFromMessage_inContext_",
          "valueForProperty_",
          "valueWithRect_inContext_",
          "deleteProperty_",
          "valueWithNullInContext_",
          "valueWithPoint_inContext_",
          "valueWithUndefinedInContext_",
          "callWithArguments_",
          "setObject_atIndexedSubscript_",
          "valueWithNewArrayInContext_",
          "toString",
          "valueWithNewObjectInContext_",
          "toNumber",
          "valueAtIndex_"
        ]
      },
      "JSVirtualMachine": {
        "className": "JSVirtualMachine",
        "methodNames": [
          "init",
          "removeManagedReference_withOwner_",
          "addManagedReference_withOwner_"
        ]
      },
      "JSManagedValue": {
        "className": "JSManagedValue",
        "methodNames": [
          "initWithValue_",
          "managedValueWithValue_",
          "managedValueWithValue_andOwner_"
        ]
      },
      "JSContext": {
        "className": "JSContext",
        "methodNames": [
          "currentArguments",
          "init",
          "currentThis",
          "objectForKeyedSubscript_",
          "currentContext",
          "contextWithJSGlobalContextRef_",
          "evaluateScript_withSourceURL_",
          "evaluateScript_",
          "initWithVirtualMachine_",
          "setObject_forKeyedSubscript_",
          "currentCallee"
        ]
      }
    }
  },
  "Accounts.framework": {
    "frameworkName": "Accounts.framework",
    "classes": {
      "ACAccount": {
        "className": "ACAccount",
        "methodNames": [
          "initWithAccountType_"
        ]
      },
      "ACAccountType": {
        "className": "ACAccountType",
        "methodNames": []
      },
      "ACAccountStore": {
        "className": "ACAccountStore",
        "methodNames": [
          "requestAccessToAccountsWithType_withCompletionHandler_",
          "accountsWithAccountType_",
          "requestAccessToAccountsWithType_options_completion_",
          "renewCredentialsForAccount_completion_",
          "accountWithIdentifier_",
          "removeAccount_withCompletionHandler_",
          "saveAccount_withCompletionHandler_",
          "accountTypeWithAccountTypeIdentifier_"
        ]
      },
      "ACAccountCredential": {
        "className": "ACAccountCredential",
        "methodNames": [
          "initWithOAuth2Token_refreshToken_expiryDate_",
          "initWithOAuthToken_tokenSecret_"
        ]
      }
    }
  },
  "CoreGraphics.framework": {
    "frameworkName": "CoreGraphics.framework",
    "classes": {}
  },
  "EventKitUI.framework": {
    "frameworkName": "EventKitUI.framework",
    "classes": {
      "EKEventViewController": {
        "className": "EKEventViewController",
        "methodNames": []
      },
      "EKEventEditViewController": {
        "className": "EKEventEditViewController",
        "methodNames": [
          "cancelEditing"
        ]
      },
      "EKCalendarChooser": {
        "className": "EKCalendarChooser",
        "methodNames": [
          "initWithSelectionStyle_displayStyle_entityType_eventStore_",
          "initWithSelectionStyle_displayStyle_eventStore_"
        ]
      }
    }
  },
  "MediaPlayer.framework": {
    "frameworkName": "MediaPlayer.framework",
    "classes": {
      "MPMediaPredicate": {
        "className": "MPMediaPredicate",
        "methodNames": []
      },
      "MPNowPlayingInfoLanguageOptionGroup": {
        "className": "MPNowPlayingInfoLanguageOptionGroup",
        "methodNames": [
          "initWithLanguageOptions_defaultLanguageOption_allowEmptySelection_"
        ]
      },
      "MPMediaEntity": {
        "className": "MPMediaEntity",
        "methodNames": [
          "canFilterByProperty_"
        ]
      },
      "MPSkipIntervalCommandEvent": {
        "className": "MPSkipIntervalCommandEvent",
        "methodNames": []
      },
      "MPMoviePlayerViewController": {
        "className": "MPMoviePlayerViewController",
        "methodNames": [
          "initWithContentURL_"
        ]
      },
      "AVMediaSelectionOption": {
        "className": "AVMediaSelectionOption",
        "methodNames": [
          "makeNowPlayingInfoLanguageOption"
        ]
      },
      "MPMediaPickerController": {
        "className": "MPMediaPickerController",
        "methodNames": [
          "initWithMediaTypes_"
        ]
      },
      "MPRemoteCommand": {
        "className": "MPRemoteCommand",
        "methodNames": [
          "addTargetWithHandler_",
          "addTarget_action_",
          "removeTarget_",
          "removeTarget_action_"
        ]
      },
      "MPMediaItem": {
        "className": "MPMediaItem",
        "methodNames": [
          "persistentIDPropertyForGroupingType_"
        ]
      },
      "MPChangePlaybackPositionCommandEvent": {
        "className": "MPChangePlaybackPositionCommandEvent",
        "methodNames": []
      },
      "MPVolumeView": {
        "className": "MPVolumeView",
        "methodNames": []
      },
      "MPMediaQuerySection": {
        "className": "MPMediaQuerySection",
        "methodNames": []
      },
      "MPMovieErrorLog": {
        "className": "MPMovieErrorLog",
        "methodNames": []
      },
      "MPNowPlayingInfoCenter": {
        "className": "MPNowPlayingInfoCenter",
        "methodNames": [
          "defaultCenter"
        ]
      },
      "MPMediaQuery": {
        "className": "MPMediaQuery",
        "methodNames": [
          "initWithFilterPredicates_"
        ]
      },
      "MPRemoteCommandCenter": {
        "className": "MPRemoteCommandCenter",
        "methodNames": [
          "sharedCommandCenter"
        ]
      },
      "MPFeedbackCommandEvent": {
        "className": "MPFeedbackCommandEvent",
        "methodNames": []
      },
      "MPContentItem": {
        "className": "MPContentItem",
        "methodNames": [
          "initWithIdentifier_"
        ]
      },
      "MPChangeLanguageOptionCommandEvent": {
        "className": "MPChangeLanguageOptionCommandEvent",
        "methodNames": []
      },
      "MPRatingCommandEvent": {
        "className": "MPRatingCommandEvent",
        "methodNames": []
      },
      "MPChangePlaybackRateCommandEvent": {
        "className": "MPChangePlaybackRateCommandEvent",
        "methodNames": []
      },
      "UIViewController": {
        "className": "UIViewController",
        "methodNames": [
          "presentMoviePlayerViewControllerAnimated_"
        ]
      },
      "MPMediaPlaylist": {
        "className": "MPMediaPlaylist",
        "methodNames": []
      },
      "MPSeekCommandEvent": {
        "className": "MPSeekCommandEvent",
        "methodNames": []
      },
      "MPMusicPlayerController": {
        "className": "MPMusicPlayerController",
        "methodNames": [
          "applicationMusicPlayer"
        ]
      },
      "MPTimedMetadata": {
        "className": "MPTimedMetadata",
        "methodNames": []
      },
      "AVMediaSelectionGroup": {
        "className": "AVMediaSelectionGroup",
        "methodNames": [
          "makeNowPlayingInfoLanguageOptionGroup"
        ]
      },
      "MPMoviePlayerController": {
        "className": "MPMoviePlayerController",
        "methodNames": [
          "thumbnailImageAtTime_timeOption_",
          "initWithContentURL_"
        ]
      },
      "MPMovieErrorLogEvent": {
        "className": "MPMovieErrorLogEvent",
        "methodNames": []
      },
      "MPRemoteCommandEvent": {
        "className": "MPRemoteCommandEvent",
        "methodNames": []
      },
      "MPPlayableContentManagerContext": {
        "className": "MPPlayableContentManagerContext",
        "methodNames": []
      },
      "MPPlayableContentManager": {
        "className": "MPPlayableContentManager",
        "methodNames": []
      },
      "MPChangePlaybackRateCommand": {
        "className": "MPChangePlaybackRateCommand",
        "methodNames": []
      },
      "MPMediaItemArtwork": {
        "className": "MPMediaItemArtwork",
        "methodNames": [
          "initWithImage_"
        ]
      },
      "MPChangePlaybackPositionCommand": {
        "className": "MPChangePlaybackPositionCommand",
        "methodNames": []
      },
      "MPMovieAccessLog": {
        "className": "MPMovieAccessLog",
        "methodNames": []
      },
      "MPNowPlayingInfoLanguageOption": {
        "className": "MPNowPlayingInfoLanguageOption",
        "methodNames": [
          "initWithType_languageTag_characteristics_displayName_identifier_",
          "isAutomaticLegibleLanguageOption",
          "isAutomaticAudibleLanguageOption"
        ]
      },
      "MPFeedbackCommand": {
        "className": "MPFeedbackCommand",
        "methodNames": []
      },
      "MPMovieAccessLogEvent": {
        "className": "MPMovieAccessLogEvent",
        "methodNames": []
      },
      "MPMediaPropertyPredicate": {
        "className": "MPMediaPropertyPredicate",
        "methodNames": [
          "predicateWithValue_forProperty_",
          "predicateWithValue_forProperty_comparisonType_"
        ]
      },
      "MPMediaItemCollection": {
        "className": "MPMediaItemCollection",
        "methodNames": [
          "collectionWithItems_",
          "initWithItems_"
        ]
      },
      "MPSkipIntervalCommand": {
        "className": "MPSkipIntervalCommand",
        "methodNames": []
      },
      "MPRatingCommand": {
        "className": "MPRatingCommand",
        "methodNames": []
      },
      "MPMediaLibrary": {
        "className": "MPMediaLibrary",
        "methodNames": [
          "endGeneratingLibraryChangeNotifications",
          "beginGeneratingLibraryChangeNotifications",
          "defaultMediaLibrary"
        ]
      }
    }
  },
  "StoreKit.framework": {
    "frameworkName": "StoreKit.framework",
    "classes": {
      "SKMutablePayment": {
        "className": "SKMutablePayment",
        "methodNames": []
      },
      "SKDownload": {
        "className": "SKDownload",
        "methodNames": []
      },
      "SKPaymentQueue": {
        "className": "SKPaymentQueue",
        "methodNames": [
          "defaultQueue"
        ]
      },
      "SKProductsResponse": {
        "className": "SKProductsResponse",
        "methodNames": []
      },
      "SKPayment": {
        "className": "SKPayment",
        "methodNames": [
          "paymentWithProduct_"
        ]
      },
      "SKProductsRequest": {
        "className": "SKProductsRequest",
        "methodNames": [
          "initWithProductIdentifiers_"
        ]
      },
      "SKRequest": {
        "className": "SKRequest",
        "methodNames": []
      },
      "SKProduct": {
        "className": "SKProduct",
        "methodNames": []
      },
      "SKPaymentTransaction": {
        "className": "SKPaymentTransaction",
        "methodNames": []
      },
      "SKStoreProductViewController": {
        "className": "SKStoreProductViewController",
        "methodNames": []
      },
      "SKReceiptRefreshRequest": {
        "className": "SKReceiptRefreshRequest",
        "methodNames": [
          "initWithReceiptProperties_"
        ]
      }
    }
  }
}