var React = require('react');
var IndexHeader = require('./IndexHeader');
var IndexContent = require('./IndexContent');
var Radium = require('radium');


var IndexSectionContent = [

  {
    "title": "AppScan",
    "description": "Mobile application is the most popular and dominant software applications nowadays. In this analysis, we develop a system for doing static check on applications' codes and build up the application behavior pattern using Hadoop map-reduce structure. We compute the class methods called in each app executables, and the \"Double\", \"Triple\" call sequence are computed among thousands of popular apps on AppStore, and analysis the composition of each app by using the sequence call results. After realizing the composition in an Application, we will use double-sequence and triple-sequence result to compute the similarity between the behavior pattern codes and the executables. Next, using Self-Organizing-Map to clustering the applications base on the double, and triple-sequence results, in order to find out the outlier application under the same behavior pattern.",
    "content":  [
      {
        url:"http://i.imgur.com/FWR4AfD.png",
        step:"1.Call Sequence Counting"
      },
      {
        url:"http://i.imgur.com/QzOyrt7.png",
        step:"2.Behavior Matching"
      },
      {
        url:"http://i.imgur.com/LvHicAK.png",
        step:"3.Outlier Detection"
      }
    ]
  },
  {
    "title": "AppReco",
    "description": "Mobile applications have been widely used in life and become dominant software applications nowadays. However there are lack of systematic recommendation systems that can be lever- aged in advance without users’ evaluations. We present AppReco, a novel recommendation system of iOS mobile applications. AppReco evaluates apps that have similar descriptions with their embedded functions in the executable. The analysis consists of three stages: (1) unsupervised clustering on app descriptions with Latent Dirichlet Allocation and Growing Hierarchical Self-organizing Maps, (2) static binary analysis on executables to discover embedded sys- tem calls and (3) ranking common-topic applications from their matched behavior patterns. To find apps that have similar interests, AppReco discovers (unsupervised) topics in official descriptions and clusters apps that have common topics as similar-interest apps. To evaluate apps, AppReco adopts static binary analysis on their executables to count invoked system calls and reveal embedded functions. To recommend apps, AppReco analyzes similar-interest apps with their behaviors of executables, and recommend apps that have less sensitive behaviors such as commercial advertisements, privacy information access, and internet connections, to users. We report our analysis against thousands of iOS apps in the Apple app store including most of the listed top 200 applications in each category.",
    "content": [
      {
        url:"http://imgur.com/TSjmHqj.png",
        step:"1.Topic Discovery"
      },
      {
        url:"http://imgur.com/Cq8K0Jc.png",
        step:"2.App Clustering"
      },
      {
        url:"http://imgur.com/vBkpppU.png",
        step:"3.Behavior Analysis"
      },
      {
        url:"http://imgur.com/g1wLKNQ.png",
        step:"4.Risk Evaluation"
      }
    ]
  },
  {
    "title": "AppSync",
    "description": "There are more then 1.4 millions mobile applications in Apple’s AppStore and these apps have been downloaded more then 15 billion times. Thus, developing moblie applications is the trend of this era. AppSynthesis is made to provide a much simplier way to create a mobile application for development. First, we applied Binflow to create the fundation of our service, BinFlow contains a ARMv7 assembly parser which can parse ARMv7 assembly to a parse tree. Based on the parse tree, we can further analyze the semantics in the assembly and reconstruct the definitions and metadata in iOS program and control flows of each subroutine. By using the analytics of Control Flow Graph generated by BinFlow, AppSynthesis extracted the similar Libraries and it’s Classes and Methods of certain type of Apps were using mostly. With assistance of this contraption, we can generate a certain app template for developers, which make making mobile appilcations much easier!",
    "content": [
      {
        url:"http://imgur.com/HOXi433.png",
        step:"1.Flow Graph Construction"
      },
      {
        url:"http://imgur.com/UNnlOZO.png",
        step:"2.Flow Pattern Extration"
      },
      {
        url:"http://imgur.com/kKhiIOo.png",
        step:"3.Code Synthesis"
      }
    ]
  }
];

var Index = React.createClass({
  getInitialState: function() {
    return {
      data: IndexSectionContent
    };

  },
  render: function(){
    var codeBlockStyle = { "fontFamily": "monospace",
                           "backgroundColor": "#D0D0D0" };
    return (
      <div>
        <IndexHeader/>
        <div id="main" className="container">
          <IndexContent data={this.state.data} />
        </div>
      </div>

    );
  }
});

module.exports = Radium(Index);
